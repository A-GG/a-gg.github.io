<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Wizard's Lair]]></title><description><![CDATA[Enjoy life && Enjoy Coding]]></description><link>https://wizd.dev</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 21 Nov 2024 21:10:53 GMT</lastBuildDate><item><title><![CDATA[NAND as Universal Gate]]></title><description><![CDATA[NAND Gate 又叫与非门，可以理解为与门和非门的组合，用逻辑表达式为：Y=a⋅b‾Y=\overline{a\cdot b}Y=a⋅b NAND as NOT

NOT 是一个单输入的逻辑门，用逻辑表达式为：Y=a‾Y=\overline{a}Y=a 。

因为 a⋅a=aa…]]></description><link>https://wizd.dev/NAND-as-Universal-Gate/</link><guid isPermaLink="false">https://wizd.dev/NAND-as-Universal-Gate/</guid><pubDate>Wed, 18 May 2022 10:19:49 GMT</pubDate><content:encoded>
NAND Gate 又叫与非门，可以理解为与门和非门的组合，用逻辑表达式为：$Y=\overline{a\cdot b}$

## NAND as NOT

NOT 是一个单输入的逻辑门，用逻辑表达式为：$Y=\overline{a}$ 。

因为 $a\cdot a = a$ 所以 $Y = \overline{a\cdot a} = \overline{a}$

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-09-12-48e2df1cf8e864478f784e00ba475da8-NOT-GATE-7bc3cc.png)

```nand2tetris-hdl
/**
 * Not gate:
 * out = not in
 */

CHIP Not {
    IN in;
    OUT out;

    PARTS:
    // Put your code here:
    Nand(a = in, b = in, out = out);
}
```

## NAND as AND

AND Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=a\cdot b$, 其中 $a$ 和 $b$ 分别是输入的两个端口。

NAND Gate 逻辑表达式为：$Y=\overline{a\cdot b}$ ，我们想要得到 $a\cdot b$ ，只需要对 $Y$ 做一个取反操作即可，即：$Y&apos; =\overline{\overline{a\cdot b}} = a\cdot b$

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-00-bebb701c23e2a068c6277fff14c22a7d-AND-GATE-a8a6a7.png)

```nand2tetris-hdl
/**
 * And gate:
 * out = a and b
 */

CHIP And {
    IN a, b;
    OUT out;

    PARTS:
    // Put your code here:
    Nand(a = a, b = b, out = nandOut);
    Nand(a = nandOut, b = nandOut, out = out); // Not(in = nandOut, out = out);
```

## NAND as OR

OR Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=a+b$, 其中 $a$ 和 $b$ 分别是输入的两个端口。

NAND Gate 逻辑表达式为：$Y=\overline{a\cdot b}$ ，根据 DeMorgan&apos;s law，我们可以得到 $Y = \overline{a\cdot b} = \overline{a}+\overline{b}$ ，那如果我们在输入 $a$ 和 $b$ 的时候，&lt;u&gt;分别对他们进行取反操作让输入变成&lt;/u&gt; $\overline{a}$ 和 $\overline{b}$, 则可得到：

$$
Y=\overline{\overline{a}\cdot \overline{b}} = \overline{\overline{a}}+\overline{\overline{b}}=a+b
$$

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-25-06f41ba4e59bf8312619831a257e3060-OR-GATE-f3d009.png)

```nand2tetris-hdl
/**
 * Or gate:
 * out = a or b
 */

CHIP Or {
    IN a, b;
    OUT out;

    PARTS:
    // Put your code here:
    Nand(a = a, b = a, out = nota);
    Nand(a = b, b = b, out = notb);
    Nand(a = nota, b = notb, out = out);
}
```

## NAND as NOR

NOR Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=\overline{a+b}$, 其中 $a$ 和 $b$ 分别是输入的两个端口。

上面已经有了 OR 的实现和 NOT 的实现，直接用 OR 和 NOT 就可以得到 NOR 的实现，即：

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-43-25f10b34ee68752199aadd0d459bbc64-NOR-GATE-1ab0cd.png)

```nand2tetris-hdl
/**
 * Nor gate:
 * out = a nor b
 */

CHIP Nor {
  IN a, b;
  OUT out;

  PARTS:
  // Put your code here:
  //Or(a = a, b = b, out = out);
  Nand(a = a, b = a, out = nota);
  Nand(a = b, b = b, out = notb);
  Nand(a = nota, b = notb, out = orOut);
  Nand(a = orOut, b = orOut, out = out);
```

## NAND as XOR

XOR Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=a\oplus b=a\cdot \overline{b}+\overline{a}\cdot b$, 其中 $a$ 和 $b$ 分别是输入的两个端口。

这里我们需要用到两个 AND，两个 NOT，一个 OR，所以一共需要九个Nand，即：

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-58-dc900b7758d54247c8e9ee4a6b877fcc-XOR-GATE-9-bcf2ba.png)

```nand2tetris-hdl
/**
 * Xor gate:
 * out = a xor b
 */

CHIP Xor {
  IN a, b;
  OUT out;

  PARTS:
  // Put your code here:
  Nand(a = b, b = b, out = notb);
  Nand(a = a, b = notb, out = nandanotb);
  Nand(a = nandab, b = nandab, out = aandnotb);
  Nand(a = a, b = a, out = nota);
  Nand(a = nota, b = b, out = nandnotab);
  Nand(a = nandnotab, b = nandnotab, out = notaandb);
  Nand(a = aandnotb, b = aandnotb, out = NOTaandnotb);
  Nand(a = notaandb, b = notaandb, out = NOTnotaandb);
  Nand(a = NOTaandnotb, b = NOTnotaandb, out = out);
}
```

这个实现用到了过多的 NAND，我们想办法优化一下，注意观察图中红框里的部分，这部分是明显就是两次 NOT：
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-17-08-1c5ce4d174b8376903a0e1a862578ca9-XOR-GATE-9-INFO-98ff40.png)
这两次 NOT 叠加之后就相当于什么事情都没干，所以我们可以把这部分干掉，就剩下五个 Nand，即：
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-15-55-916c3a61c8cf02b9c6727c4543e1c6ae-XOR-GATE-5-ed7333.png)
其实我们还可以对这个门进行一次简化，用四个 NAND 来实现 XOR（这里如果全部用逻辑运算写的话太复杂，我直接在公式里使用 NAND 了）:
$$
\begin{aligned}
Y &amp;=a\oplus b\\
&amp;  =a\cdot \overline{b}+\overline{a}\cdot b\\
&amp;  =NAND\big(\overline{(a\cdot \overline{b})}, \overline{(\overline{a}\cdot b)}\big)\\
&amp;  =NAND(\overline{a}+b, \overline{b}+a)\\
&amp;  =NAND\big(\overline{a}+(a\cdot b), \overline{b}+(a\cdot b)\big)\\
&amp;  =NAND\Big(NAND\big(a\cdot (\overline{a\cdot b})\big), NAND\big(b\cdot (\overline{a\cdot b})\big)\Big)\\
&amp;  =NAND\Bigg(NAND\Big(a\cdot\big(NAND(a,b)\big)\Big), NAND\Big(b\cdot\big(NAND(a,b)\big)\Big)\Bigg)\\
\end{aligned}
$$
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-18-48-145a55345ab36b1cb39652e8ff9fa102-XOR-GATE-4-9e85a7.png)

```nand2tetris-hdl{9}{numberLines: true}
/**
 * Xor gate:
 * out = a xor b
 */
CHIP Xor {
  IN a, b;
  OUT out;
  PARTS:
  // Put your code here:
  Nand(a = a, b = b, out = nandAB);
  Nand(a = a, b = nandAB, out = nandABA);
  Nand(a = b, b = nandAB, out = nandABB);
  Nand(a = nandABA, b = nandABB, out = out);
```</content:encoded></item><item><title><![CDATA[在 Gatsby MDX 中使用 LaTeX]]></title><description><![CDATA[LaTeX\huge{\LaTeX}LATE​X 年初把博客更新了成用 gatsby-plugin-mdx 处理 mdx 文件来生成页面。在更新前，解析 Markdown 文件中的 LaTeX\LaTeX{}LATE​X 公式使用的是 gatsby-remark-katex 插件…]]></description><link>https://wizd.dev/在-Gatsby-MDX-中使用-LaTeX/</link><guid isPermaLink="false">https://wizd.dev/在-Gatsby-MDX-中使用-LaTeX/</guid><pubDate>Thu, 12 May 2022 11:24:17 GMT</pubDate><content:encoded>
$$
\huge{\LaTeX}
$$

年初把博客更新了成用 [gatsby-plugin-mdx](https://www.npmjs.com/package/gatsby-plugin-mdx) 处理 [mdx 文件](https://mdxjs.com/)来生成页面。在更新前，解析 Markdown 文件中的 $\LaTeX{}$ 公式使用的是 [gatsby-remark-katex](https://www.npmjs.com/package/gatsby-remark-katex) 插件，这个插件和 [gatsby-transformer-remark](https://www.npmjs.com/package/gatsby-transformer-remark) 配合挺好用的，但是当我更新成 MDX 之后就没法正常工作了，所以本文简单记录下解决方案。

## 用到的插件
* [remark-math@v3](https://www.npmjs.com/package/remark-math)
* [rehype-katex@v3](https://www.npmjs.com/package/rehype-katex)

这里我标注了插件版本，大家在使用的时候需要下载相应版本，版本过高会导致插件不起作用，粗略探索了一下，大致是因为 `gatsby-plugin-mdx` 依赖的 `mdx-js` 版本比较低导致的。

```shell
yarn add remark-math@v3 rehype-katex@v3
```

## 配置方式

1. 在 gatsby-config.js 中配置插件
```javascript
//gatsby-config.js

// 插件版本过高的话，这里也会提示不让用require引用，需要使用import
const remarkMath = require(&apos;remark-math&apos;)
const rehypeKatex = require(&apos;rehype-katex&apos;)

module.exports = {
  // ...
  plugins: [
    // ...
    {
      resolve: `gatsby-plugin-mdx`,
      options: {
        extensions: [`.mdx`, `.md`],
        remarkPlugins: [remarkMath],
        rehypePlugins: [rehypeKatex],
        gatsbyRemarkPlugins: [
          {
            resolve: `gatsby-remark-images`,
            options: {
              maxWidth: 960,
              quality: 90,
              linkImagesToOriginal: false,
            },
          },
        ],
      },
    },
   ],
}
```
2. 在 gatsby-browser.js 中引用 Katex 的 css 样式

因为上面两个插件只是单纯的帮我们将 LaTeX 公式转成了相应的 HTML 元素，我们需要使用 Katex 的样式，这样 LaTeX 公式才能正常 render。

```javascript
// gatsby-browser.js
// ...
import &quot;katex/dist/katex.min.css&quot;
// ...
```

## 示例
进行配置之后，我们就可以在 mdx 文件中书写相应的 LaTeX 内容了，插件可以解析行内和块两种写法。

### 行内写法示例
```markdown
这是一个行内 $\LaTeX$ 公式, $i\hbar\frac{\partial \varphi } {\partial {t}} = \frac{-\hbar^2}{2m} 
\left( \frac{\partial^2}{\partial x^2} + \frac{\partial^2}{\partial y^2} + 
\frac{\partial^2}{\partial z^2} \right) \varphi  + V \varphi$
```
这是一个行内 $\LaTeX$ 公式, $i\hbar\frac{\partial \varphi } {\partial {t}} = \frac{-\hbar^2}{2m} \left( \frac{\partial^2}{\partial x^2} + \frac{\partial^2}{\partial y^2} + \frac{\partial^2}{\partial z^2} \right) \varphi  + V \varphi$

### 块写法示例
```markdown
下面是一个 $\LaTeX$ 公式块:

$$
\int_{x^2 + y^2 \leq R^2}   f(x,y) dx dy = 
\int_{\theta=0}^{2\pi}    \int_{r=0}^R    f(r\cos\theta,r\sin\theta) r dr d\theta
$$
```

下面是一个 $\LaTeX$ 公式块:
$$
\int_{x^2 + y^2 \leq R^2}   f(x,y) dx dy = 
\int_{\theta=0}^{2\pi}    \int_{r=0}^R    f(r\cos\theta,r\sin\theta) r dr d\theta
$$
</content:encoded></item><item><title><![CDATA[Vue2 中的 Global Event Bus]]></title><description><![CDATA[适用场景 全局事件总线（Global Event Bus）一般用于远距离（非父子）组件之间的数据通信，是 Vue 中全局状态管理方案的一种。

下图中的组件 B 和 组件 D 之间进行通信，则可以通过 Global Event Bus 来实现。

基本原理

全局事件总线…]]></description><link>https://wizd.dev/Vue中的Global-Event-Bus/</link><guid isPermaLink="false">https://wizd.dev/Vue中的Global-Event-Bus/</guid><pubDate>Sat, 12 Mar 2022 11:27:32 GMT</pubDate><content:encoded>
## 适用场景

全局事件总线（Global Event Bus）一般用于远距离（非父子）组件之间的数据通信，是 Vue 中全局状态管理方案的一种。

下图中的组件 B 和 组件 D 之间进行通信，则可以通过 Global Event Bus 来实现。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-48-09-dac00e9525d0a78be5f994cf7254e432-comps-0a2b45.png)

## 基本原理

全局事件总线（Global Event Bus）本质上是通过在全局创建一个空的 Vue 实例，当前项目内所有的组件皆可向该实例上注册事件，相应的，在项目内任意组件内触发该事件，即可实现组件之间的通讯。

## 使用方法

### 第一步：创建实例

创建一个空的 Vue 实例

```javascript
export const EventBus = new Vue();
```

### 第二步：注册事件

在组件 A 中使用 `$on` 方法向 `EventBus` 注册事件

```html
&lt;template&gt;
  &lt;div&gt;{{ count }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import { EventBus } from &quot;../eventbus&quot;;
export default {
  data() {
    return {
      count: 0,
    };
  },
  methods: {
    increaseCount() {
      this.count++;
    },
  },
  created() {
    EventBus.$on(&quot;increase-count&quot;, this.increaseCount);
  },
};
&lt;/script&gt;
```

### 第三步： 触发事件

在组件 D 中使用 `$emit` 方法触发注册在 `EventBus` 上的事件

```html
&lt;template&gt;
  &lt;div&gt;
    &lt;button @click=&quot;clickHandler&quot;&gt;+1&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import { EventBus } from &quot;../eventbus&quot;;
export default {
  methods: {
    clickHandler() {
      EventBus.$emit(&quot;increase-count&quot;);
    },
  },
};
&lt;/script&gt;
```



### 第四步：解绑事件

经过上面三步之后，我们已经可以实现组件 A 和组件 D 之间的通信啦！但是要注意，我们注册给 `EventBus` 的事件，需要在组件 A 销毁的时候取消注册

在组件 A 的 `beforeDestory` 钩子函数中使用 `$off` 方法取消已注册的事件

```html
&lt;template&gt;
  &lt;div&gt;{{ count }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import { EventBus } from &quot;../eventbus&quot;;
export default {
  data() {
    return {
      count: 0,
    };
  },
  methods: {
    increaseCount() {
      this.count++;
    },
  },
  created() {
    EventBus.$on(&quot;increase-count&quot;, this.increaseCount);
  },
  beforeDestory() {
    EventBus.$off(&apos;increase-count&apos;, this.increaseCount);
  }
};
&lt;/script&gt;
```

## 核心 API 

### `$on`

**参数**：
`{string} event`  命名需要使用 Kebab Case
`{Function} callback`

**用法**：
监听当前实例上的自定义事件。事件可以由 vm.$emit 触发。回调函数会接收所有传入事件触发函数的额外参数。

**示例**：

```javascript
vm.$on(&apos;test&apos;, function (msg) {
  console.log(msg)
})
vm.$emit(&apos;test&apos;, &apos;hi&apos;)
// =&gt; &quot;hi&quot;
```


### `$emit`

**参数**：

`{string} eventName`
`[...args]`
触发当前实例上的事件。附加参数都会传给监听器回调。

**示例**：

只配合一个事件名使用 `$emit`：

```javascript
vm.$emit(&apos;事件名&apos;)
```

传递额外的参数使用 `$emit`:

```javascript
const foo = (bar) =&gt; console.log(bar);
vm.$on(&apos;trigger-foo&apos;, foo)
vm.$emit(&apos;trigger-foo&apos;, &apos;Hello world&apos;)
```



### `$off`

**参数**：

`{string | Array&lt;string&gt;} event` (只在 2.2.2+ 支持数组)
`{Function} [callback]`

**用法**：

移除自定义事件监听器。

- 如果没有提供参数，则移除所有的事件监听器 `$emit()`
- 如果只提供了事件，则移除该事件所有的监听器 `$emit(&apos;事件名称&apos;)`
- 如果同时提供了事件与回调，则只移除这个回调的监听器 `$emit(&apos;事件名称&apos;, 事件处理函数)`

## 总结

借助 Vue 提供的相关 API，使用全局事件总线可以非常方便的实现非父子组件之间的通信。

全局事件总线这种方案实际开发中使用的较少，几乎用不到，Vue3 中已经将其弃用，因为其存在如下问题：

1. 破坏了项目数据流，会让项目后续维护困难
2. 所有的事件都注册在同一对象上，无法做模块划分，且事件命名易产生冲突
3. 使用`$off`取消注册事件需要和`$on`成对出现，但是经常会被忘记

VueX 以及 Pinia 等工具提供了更为清晰完善的全局状态管理方案，若项目中遇到较为复杂的组件通信场景，首先考虑这些工具，而不是使用 Global Event Bus。</content:encoded></item><item><title><![CDATA[AuthorziedKey配置小记]]></title><description><![CDATA[早上起床发现 VPS 突然无法访问了，后来在 TG 群里了解到是因为厂商做母鸡迁移导致文件损坏，可以提工单等待修复。工作需要使用外网，而小作坊的工单处理速度可想而知，考虑到反正服务器内存储的内容并不是很多，且都有备份，就着手直接重装。 当一切都准备就绪之后，发现配置了…]]></description><link>https://wizd.dev/AuthorziedKey配置小记/</link><guid isPermaLink="false">https://wizd.dev/AuthorziedKey配置小记/</guid><pubDate>Sat, 17 Jul 2021 16:54:17 GMT</pubDate><content:encoded>
早上起床发现 VPS 突然无法访问了，后来在 TG 群里了解到是因为厂商做母鸡迁移导致文件损坏，可以提工单等待修复。工作需要使用外网，而小作坊的工单处理速度可想而知，考虑到反正服务器内存储的内容并不是很多，且都有备份，就着手直接重装。

当一切都准备就绪之后，发现配置了 authorized_keys 之后，免密访问依然无法使用，在进行一系列的问题探究之后，发现很可能是创建 authorized_keys 文件的姿势不对。

使用 touch 创建的文件，默认权限是 644 如下：
```
$ls -al
-rw-r--r--. 1 root root    0 Jul  16 07:49 authorized_keys
```
但是 ssh 要求的权限为 600, 故需要对其进行修改
```
$chmod 600 .ssh/authorized_keys
$ls -al
-rw-------. 1 root root    0 Jul  16 07:50 authorized_keys
```

这样操作之后，免密登录就完全正常了。

### SCP 命令直接追加 authorized_keys 

有朋友问怎么能直接一步到位把公钥添加到 authorized_keys 里去，特别简单。

```bash
ssh user@hostname &apos;cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub
```</content:encoded></item><item><title><![CDATA[2021年如何在OSX上安装PIP2]]></title><description><![CDATA[起因 2021年1月23日 pip 更新的21.x的版本停止了对 python2 的支持，这导致新入手 Mac 的朋友安装 pip 变成一件及其困难的事情。

看本文的时候不要着急，别看见命令就执行，看完再说。正确的姿势

错误的尝试

当你在尝试在 Big Sur 上安装 pip2…]]></description><link>https://wizd.dev/2021年如何在OSX上安装PIP2/</link><guid isPermaLink="false">https://wizd.dev/2021年如何在OSX上安装PIP2/</guid><pubDate>Thu, 17 Jun 2021 16:54:17 GMT</pubDate><content:encoded>
## 起因

2021年1月23日 pip 更新的21.x的版本停止了对 python2 的支持，这导致新入手 Mac 的朋友安装 pip 变成一件及其困难的事情。

看本文的时候不要着急，别看见命令就执行，看完再说。[正确的姿势](#使用正确的姿势进行安装)

## 错误的尝试

当你在尝试在 Big Sur 上安装 pip2 的时候，你的搜索关键词很可能是 `mac os 安装 pip2`网络上大概率的搜索结果如下：

```bash
sudo easy_install pip
```

在你进行尝试之后，你会发现安装过程会报些许 Error， 且你在使用 pip 时会得到如下的 Error:

```bash
&gt; python -m pip
&gt; Traceback (most recent call last):
  File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py&quot;, line 163, in _run_module_as_main
    mod_name, _Error)
  File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py&quot;, line 111, in _get_module_details
    __import__(mod_name)  # Do not catch exceptions initializing package
  File &quot;/Library/Python/2.7/site-packages/pip-21.1.1-py2.7.egg/pip/__init__.py&quot;, line 1, in &lt;module&gt;
    from typing import List, Optional
ImportError: No module named typing
```

然后你又会去 Search， `No module named typing`， 然后你又会得到如下的答案：

```bash
pip install typing
```

WTF? 缺少 typing 导致 pip 无法使用，然后你让我用 pip 安装 typing 来解决这个问题？（你想知道怎么翻墙吗？那你得先翻个墙？？？）

## 删除刚才安装的有问题的 pip

执行这些命令你得慎重一些

```bash
sudo easy_install -mxN pip

rm -rf /Library/Python/2.7/site-packages/pipxxxxx.egg

rm /usr/local/bin/pip
```

## 使用正确的姿势进行安装

```bash
curl -O https://bootstrap.pypa.io/pip/2.7/get-pip.py

python get-pip.py

python -m pip install --upgrade &quot;pip &lt; 21.0&quot;
```

记得自己加环境变量去，不然就得 `python -m pip`了。

`export PATH=/Users/你的用户名/Library/Python/2.7/bin:$PATH`</content:encoded></item><item><title><![CDATA[fish 使用笔记]]></title><description><![CDATA[安装 由于我自己使用的是 OSX，所以这里我只介绍 OSX 中的安装方式。

OSX 中的软件管理神器 HomeBrew 大家肯定不陌生，陌生的话就熟悉一下

如果感兴趣的话，还可以了解一下 Oh-My-Fish。

设置 fish 为默认 Shell

由于 fish 不是标准…]]></description><link>https://wizd.dev/Fish使用笔记/</link><guid isPermaLink="false">https://wizd.dev/Fish使用笔记/</guid><pubDate>Thu, 10 Jun 2021 16:38:23 GMT</pubDate><content:encoded>
## 安装

由于我自己使用的是 OSX，所以这里我只介绍 OSX 中的安装方式。

OSX 中的软件管理神器 [HomeBrew](https://brew.sh/) 大家肯定不陌生，陌生的话就熟悉一下

```shell{promptUser: w1zd}{promptHost: localhost}{outputLines:1}
# 使用 brew 安装 fish
brew install fish     
```

如果感兴趣的话，还可以了解一下 [Oh-My-Fish](https://github.com/oh-my-fish/oh-my-fish)。

```shell{promptUser: w1zd}{promptHost: localhost}{outputLines:1,3}
# 安装 Oh My Fish
curl -L https://get.oh-my.fish &gt; install
# 这里的 path 和 config 你可以自定义
fish install --path=~/.local/share/omf --config=~/.config/omf
```

## 设置 fish 为默认 Shell

由于 fish 不是标准 shell，我们需要将 fish 添加到 /etc/shells 中去，否则修改默认 shell 的时候会报错。

```shell{promptUser: w1zd}{promptHost: localhost}{outputLines:3-19}
# 编辑 /etc/shells
sudo vi /etc/shells

# List of acceptable shells for chpass(1).
# Ftpd will not allow users to connect who are not using
# one of these shells.

/bin/bash
/bin/csh
/bin/dash
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
/usr/local/bin/fish
# 添加 fish 
/usr/local/bin/fish
```

设置 fish 为默认 shell

```shell{promptUser: w1zd}{promptHost: localhost}{outputLines:3}
chsh -s /usr/local/bin/fish

# 可以通过下面的命令修改回 bash
chsh -s /bin/bash 
```

## 安装主题

```shell{promptUser: w1zd}{promptHost: localhost}
omf install lambda
```

## 安装插件管理工具 fisher（可选）

```shell{promptUser: w1zd}{promptHost: localhost}
curl -sL https://git.io/fisher | source &amp;&amp; fisher install jorgebucaran/fisher
```

## fish 中设置环境变量

```shell{promptUser: w1zd}{promptHost: localhost}
set -Ux KEY VALUE
```

添加 PATH

```shell{promptUser: w1zd}{promptHost: localhost}
fish_add_path ~/xxxx/bin/
```

## fish 设置 vi-mode

```shell{promptUser: w1zd}{promptHost: localhost}
sudo echo fish_vi_key_bindings &gt;&gt; ~/.config/fish/config.fish
```

## shell 编程相关

不做多介绍，fish 提供了[很多特别实用的语法](https://fishshell.com/docs/current/index.html#syntax-overview)，有 shell 编程需求的同学可以看一看，很 sweet，但是要注意这些都是非标语法😎。</content:encoded></item><item><title><![CDATA[Prismjs 代码高亮支持语言列表]]></title><description><![CDATA[本站使用的是 Gatsby.js，其中使用了 Prismjs 的代码高亮，这里对支持的语言做一个简单的记录，以备查询。]]></description><link>https://wizd.dev/Prismjs-Highlight-Supported-Language-List/</link><guid isPermaLink="false">https://wizd.dev/Prismjs-Highlight-Supported-Language-List/</guid><pubDate>Wed, 14 Apr 2021 16:38:29 GMT</pubDate><content:encoded>
本站使用的是 Gatsby.js，其中使用了 Prismjs 的代码高亮，这里对支持的语言做一个简单的记录，以备查询。

&lt;div id=&quot;languages-list&quot;&gt;&lt;ul&gt;&lt;li data-id=&quot;markup&quot;&gt;Markup - &lt;code class=&quot; language-markup&quot;&gt;markup&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;html&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;xml&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;svg&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;mathml&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;ssml&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;atom&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;rss&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;css&quot;&gt;CSS - &lt;code class=&quot; language-markup&quot;&gt;css&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;clike&quot;&gt;C-like - &lt;code class=&quot; language-markup&quot;&gt;clike&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;javascript&quot;&gt;JavaScript - &lt;code class=&quot; language-markup&quot;&gt;javascript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;js&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;abap&quot;&gt;ABAP - &lt;code class=&quot; language-markup&quot;&gt;abap&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;abnf&quot;&gt;ABNF - &lt;code class=&quot; language-markup&quot;&gt;abnf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;actionscript&quot;&gt;ActionScript - &lt;code class=&quot; language-markup&quot;&gt;actionscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ada&quot;&gt;Ada - &lt;code class=&quot; language-markup&quot;&gt;ada&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;agda&quot;&gt;Agda - &lt;code class=&quot; language-markup&quot;&gt;agda&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;al&quot;&gt;AL - &lt;code class=&quot; language-markup&quot;&gt;al&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;antlr4&quot;&gt;ANTLR4 - &lt;code class=&quot; language-markup&quot;&gt;antlr4&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;g4&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;apacheconf&quot;&gt;Apache Configuration - &lt;code class=&quot; language-markup&quot;&gt;apacheconf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;apex&quot;&gt;Apex - &lt;code class=&quot; language-markup&quot;&gt;apex&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;apl&quot;&gt;APL - &lt;code class=&quot; language-markup&quot;&gt;apl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;applescript&quot;&gt;AppleScript - &lt;code class=&quot; language-markup&quot;&gt;applescript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;aql&quot;&gt;AQL - &lt;code class=&quot; language-markup&quot;&gt;aql&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;arduino&quot;&gt;Arduino - &lt;code class=&quot; language-markup&quot;&gt;arduino&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;arff&quot;&gt;ARFF - &lt;code class=&quot; language-markup&quot;&gt;arff&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;asciidoc&quot;&gt;AsciiDoc - &lt;code class=&quot; language-markup&quot;&gt;asciidoc&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;adoc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;aspnet&quot;&gt;ASP.NET (C#) - &lt;code class=&quot; language-markup&quot;&gt;aspnet&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;asm6502&quot;&gt;6502 Assembly - &lt;code class=&quot; language-markup&quot;&gt;asm6502&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;autohotkey&quot;&gt;AutoHotkey - &lt;code class=&quot; language-markup&quot;&gt;autohotkey&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;autoit&quot;&gt;AutoIt - &lt;code class=&quot; language-markup&quot;&gt;autoit&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;bash&quot;&gt;Bash - &lt;code class=&quot; language-markup&quot;&gt;bash&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;shell&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;basic&quot;&gt;BASIC - &lt;code class=&quot; language-markup&quot;&gt;basic&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;batch&quot;&gt;Batch - &lt;code class=&quot; language-markup&quot;&gt;batch&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;bbcode&quot;&gt;BBcode - &lt;code class=&quot; language-markup&quot;&gt;bbcode&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;shortcode&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;birb&quot;&gt;Birb - &lt;code class=&quot; language-markup&quot;&gt;birb&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;bison&quot;&gt;Bison - &lt;code class=&quot; language-markup&quot;&gt;bison&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;bnf&quot;&gt;BNF - &lt;code class=&quot; language-markup&quot;&gt;bnf&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;rbnf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;brainfuck&quot;&gt;Brainfuck - &lt;code class=&quot; language-markup&quot;&gt;brainfuck&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;brightscript&quot;&gt;BrightScript - &lt;code class=&quot; language-markup&quot;&gt;brightscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;bro&quot;&gt;Bro - &lt;code class=&quot; language-markup&quot;&gt;bro&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;bsl&quot;&gt;BSL (1C:Enterprise) - &lt;code class=&quot; language-markup&quot;&gt;bsl&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;oscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;c&quot;&gt;C - &lt;code class=&quot; language-markup&quot;&gt;c&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;csharp&quot;&gt;C# - &lt;code class=&quot; language-markup&quot;&gt;csharp&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;cs&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;dotnet&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;cpp&quot;&gt;C++ - &lt;code class=&quot; language-markup&quot;&gt;cpp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;cfscript&quot;&gt;CFScript - &lt;code class=&quot; language-markup&quot;&gt;cfscript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;cfc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;chaiscript&quot;&gt;ChaiScript - &lt;code class=&quot; language-markup&quot;&gt;chaiscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;cil&quot;&gt;CIL - &lt;code class=&quot; language-markup&quot;&gt;cil&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;clojure&quot;&gt;Clojure - &lt;code class=&quot; language-markup&quot;&gt;clojure&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;cmake&quot;&gt;CMake - &lt;code class=&quot; language-markup&quot;&gt;cmake&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;cobol&quot;&gt;COBOL - &lt;code class=&quot; language-markup&quot;&gt;cobol&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;coffeescript&quot;&gt;CoffeeScript - &lt;code class=&quot; language-markup&quot;&gt;coffeescript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;coffee&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;concurnas&quot;&gt;Concurnas - &lt;code class=&quot; language-markup&quot;&gt;concurnas&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;conc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;csp&quot;&gt;Content-Security-Policy - &lt;code class=&quot; language-markup&quot;&gt;csp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;coq&quot;&gt;Coq - &lt;code class=&quot; language-markup&quot;&gt;coq&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;crystal&quot;&gt;Crystal - &lt;code class=&quot; language-markup&quot;&gt;crystal&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;css-extras&quot;&gt;CSS Extras - &lt;code class=&quot; language-markup&quot;&gt;css-extras&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;csv&quot;&gt;CSV - &lt;code class=&quot; language-markup&quot;&gt;csv&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;cypher&quot;&gt;Cypher - &lt;code class=&quot; language-markup&quot;&gt;cypher&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;d&quot;&gt;D - &lt;code class=&quot; language-markup&quot;&gt;d&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;dart&quot;&gt;Dart - &lt;code class=&quot; language-markup&quot;&gt;dart&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;dataweave&quot;&gt;DataWeave - &lt;code class=&quot; language-markup&quot;&gt;dataweave&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;dax&quot;&gt;DAX - &lt;code class=&quot; language-markup&quot;&gt;dax&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;dhall&quot;&gt;Dhall - &lt;code class=&quot; language-markup&quot;&gt;dhall&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;diff&quot;&gt;Diff - &lt;code class=&quot; language-markup&quot;&gt;diff&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;django&quot;&gt;Django/Jinja2 - &lt;code class=&quot; language-markup&quot;&gt;django&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;jinja2&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;dns-zone-file&quot;&gt;DNS zone file - &lt;code class=&quot; language-markup&quot;&gt;dns-zone-file&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;dns-zone&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;docker&quot;&gt;Docker - &lt;code class=&quot; language-markup&quot;&gt;docker&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;dockerfile&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;dot&quot;&gt;DOT (Graphviz) - &lt;code class=&quot; language-markup&quot;&gt;dot&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;gv&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ebnf&quot;&gt;EBNF - &lt;code class=&quot; language-markup&quot;&gt;ebnf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;editorconfig&quot;&gt;EditorConfig - &lt;code class=&quot; language-markup&quot;&gt;editorconfig&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;eiffel&quot;&gt;Eiffel - &lt;code class=&quot; language-markup&quot;&gt;eiffel&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ejs&quot;&gt;EJS - &lt;code class=&quot; language-markup&quot;&gt;ejs&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;eta&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;elixir&quot;&gt;Elixir - &lt;code class=&quot; language-markup&quot;&gt;elixir&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;elm&quot;&gt;Elm - &lt;code class=&quot; language-markup&quot;&gt;elm&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;etlua&quot;&gt;Embedded Lua templating - &lt;code class=&quot; language-markup&quot;&gt;etlua&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;erb&quot;&gt;ERB - &lt;code class=&quot; language-markup&quot;&gt;erb&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;erlang&quot;&gt;Erlang - &lt;code class=&quot; language-markup&quot;&gt;erlang&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;excel-formula&quot;&gt;Excel Formula - &lt;code class=&quot; language-markup&quot;&gt;excel-formula&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;xlsx&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;xls&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;fsharp&quot;&gt;F# - &lt;code class=&quot; language-markup&quot;&gt;fsharp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;factor&quot;&gt;Factor - &lt;code class=&quot; language-markup&quot;&gt;factor&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;false&quot;&gt;False - &lt;code class=&quot; language-markup&quot;&gt;false&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;firestore-security-rules&quot;&gt;Firestore security rules - &lt;code class=&quot; language-markup&quot;&gt;firestore-security-rules&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;flow&quot;&gt;Flow - &lt;code class=&quot; language-markup&quot;&gt;flow&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;fortran&quot;&gt;Fortran - &lt;code class=&quot; language-markup&quot;&gt;fortran&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ftl&quot;&gt;FreeMarker Template Language - &lt;code class=&quot; language-markup&quot;&gt;ftl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;gml&quot;&gt;GameMaker Language - &lt;code class=&quot; language-markup&quot;&gt;gml&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;gamemakerlanguage&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;gcode&quot;&gt;G-code - &lt;code class=&quot; language-markup&quot;&gt;gcode&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;gdscript&quot;&gt;GDScript - &lt;code class=&quot; language-markup&quot;&gt;gdscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;gedcom&quot;&gt;GEDCOM - &lt;code class=&quot; language-markup&quot;&gt;gedcom&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;gherkin&quot;&gt;Gherkin - &lt;code class=&quot; language-markup&quot;&gt;gherkin&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;git&quot;&gt;Git - &lt;code class=&quot; language-markup&quot;&gt;git&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;glsl&quot;&gt;GLSL - &lt;code class=&quot; language-markup&quot;&gt;glsl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;go&quot;&gt;Go - &lt;code class=&quot; language-markup&quot;&gt;go&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;graphql&quot;&gt;GraphQL - &lt;code class=&quot; language-markup&quot;&gt;graphql&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;groovy&quot;&gt;Groovy - &lt;code class=&quot; language-markup&quot;&gt;groovy&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;haml&quot;&gt;Haml - &lt;code class=&quot; language-markup&quot;&gt;haml&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;handlebars&quot;&gt;Handlebars - &lt;code class=&quot; language-markup&quot;&gt;handlebars&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;haskell&quot;&gt;Haskell - &lt;code class=&quot; language-markup&quot;&gt;haskell&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;hs&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;haxe&quot;&gt;Haxe - &lt;code class=&quot; language-markup&quot;&gt;haxe&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;hcl&quot;&gt;HCL - &lt;code class=&quot; language-markup&quot;&gt;hcl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;hlsl&quot;&gt;HLSL - &lt;code class=&quot; language-markup&quot;&gt;hlsl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;http&quot;&gt;HTTP - &lt;code class=&quot; language-markup&quot;&gt;http&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;hpkp&quot;&gt;HTTP Public-Key-Pins - &lt;code class=&quot; language-markup&quot;&gt;hpkp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;hsts&quot;&gt;HTTP Strict-Transport-Security - &lt;code class=&quot; language-markup&quot;&gt;hsts&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ichigojam&quot;&gt;IchigoJam - &lt;code class=&quot; language-markup&quot;&gt;ichigojam&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;icon&quot;&gt;Icon - &lt;code class=&quot; language-markup&quot;&gt;icon&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;icu-message-format&quot;&gt;ICU Message Format - &lt;code class=&quot; language-markup&quot;&gt;icu-message-format&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;idris&quot;&gt;Idris - &lt;code class=&quot; language-markup&quot;&gt;idris&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;idr&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ignore&quot;&gt;.ignore - &lt;code class=&quot; language-markup&quot;&gt;ignore&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;gitignore&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;hgignore&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;npmignore&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;inform7&quot;&gt;Inform 7 - &lt;code class=&quot; language-markup&quot;&gt;inform7&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ini&quot;&gt;Ini - &lt;code class=&quot; language-markup&quot;&gt;ini&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;io&quot;&gt;Io - &lt;code class=&quot; language-markup&quot;&gt;io&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;j&quot;&gt;J - &lt;code class=&quot; language-markup&quot;&gt;j&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;java&quot;&gt;Java - &lt;code class=&quot; language-markup&quot;&gt;java&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;javadoc&quot;&gt;JavaDoc - &lt;code class=&quot; language-markup&quot;&gt;javadoc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;javadoclike&quot;&gt;JavaDoc-like - &lt;code class=&quot; language-markup&quot;&gt;javadoclike&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;javastacktrace&quot;&gt;Java stack trace - &lt;code class=&quot; language-markup&quot;&gt;javastacktrace&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jexl&quot;&gt;Jexl - &lt;code class=&quot; language-markup&quot;&gt;jexl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jolie&quot;&gt;Jolie - &lt;code class=&quot; language-markup&quot;&gt;jolie&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jq&quot;&gt;JQ - &lt;code class=&quot; language-markup&quot;&gt;jq&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jsdoc&quot;&gt;JSDoc - &lt;code class=&quot; language-markup&quot;&gt;jsdoc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;js-extras&quot;&gt;JS Extras - &lt;code class=&quot; language-markup&quot;&gt;js-extras&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;json&quot;&gt;JSON - &lt;code class=&quot; language-markup&quot;&gt;json&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;webmanifest&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;json5&quot;&gt;JSON5 - &lt;code class=&quot; language-markup&quot;&gt;json5&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jsonp&quot;&gt;JSONP - &lt;code class=&quot; language-markup&quot;&gt;jsonp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jsstacktrace&quot;&gt;JS stack trace - &lt;code class=&quot; language-markup&quot;&gt;jsstacktrace&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;js-templates&quot;&gt;JS Templates - &lt;code class=&quot; language-markup&quot;&gt;js-templates&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;julia&quot;&gt;Julia - &lt;code class=&quot; language-markup&quot;&gt;julia&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;keyman&quot;&gt;Keyman - &lt;code class=&quot; language-markup&quot;&gt;keyman&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;kotlin&quot;&gt;Kotlin - &lt;code class=&quot; language-markup&quot;&gt;kotlin&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;kt&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;kts&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;kumir&quot;&gt;KuMir (КуМир) - &lt;code class=&quot; language-markup&quot;&gt;kumir&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;kum&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;latex&quot;&gt;LaTeX - &lt;code class=&quot; language-markup&quot;&gt;latex&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;tex&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;context&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;latte&quot;&gt;Latte - &lt;code class=&quot; language-markup&quot;&gt;latte&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;less&quot;&gt;Less - &lt;code class=&quot; language-markup&quot;&gt;less&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;lilypond&quot;&gt;LilyPond - &lt;code class=&quot; language-markup&quot;&gt;lilypond&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;ly&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;liquid&quot;&gt;Liquid - &lt;code class=&quot; language-markup&quot;&gt;liquid&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;lisp&quot;&gt;Lisp - &lt;code class=&quot; language-markup&quot;&gt;lisp&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;emacs&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;elisp&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;emacs-lisp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;livescript&quot;&gt;LiveScript - &lt;code class=&quot; language-markup&quot;&gt;livescript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;llvm&quot;&gt;LLVM IR - &lt;code class=&quot; language-markup&quot;&gt;llvm&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;log&quot;&gt;Log file - &lt;code class=&quot; language-markup&quot;&gt;log&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;lolcode&quot;&gt;LOLCODE - &lt;code class=&quot; language-markup&quot;&gt;lolcode&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;lua&quot;&gt;Lua - &lt;code class=&quot; language-markup&quot;&gt;lua&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;makefile&quot;&gt;Makefile - &lt;code class=&quot; language-markup&quot;&gt;makefile&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;markdown&quot;&gt;Markdown - &lt;code class=&quot; language-markup&quot;&gt;markdown&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;md&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;markup-templating&quot;&gt;Markup templating - &lt;code class=&quot; language-markup&quot;&gt;markup-templating&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;matlab&quot;&gt;MATLAB - &lt;code class=&quot; language-markup&quot;&gt;matlab&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;mel&quot;&gt;MEL - &lt;code class=&quot; language-markup&quot;&gt;mel&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;mizar&quot;&gt;Mizar - &lt;code class=&quot; language-markup&quot;&gt;mizar&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;mongodb&quot;&gt;MongoDB - &lt;code class=&quot; language-markup&quot;&gt;mongodb&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;monkey&quot;&gt;Monkey - &lt;code class=&quot; language-markup&quot;&gt;monkey&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;moonscript&quot;&gt;MoonScript - &lt;code class=&quot; language-markup&quot;&gt;moonscript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;moon&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;n1ql&quot;&gt;N1QL - &lt;code class=&quot; language-markup&quot;&gt;n1ql&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;n4js&quot;&gt;N4JS - &lt;code class=&quot; language-markup&quot;&gt;n4js&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;n4jsd&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nand2tetris-hdl&quot;&gt;Nand To Tetris HDL - &lt;code class=&quot; language-markup&quot;&gt;nand2tetris-hdl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;naniscript&quot;&gt;Naninovel Script - &lt;code class=&quot; language-markup&quot;&gt;naniscript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;nani&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nasm&quot;&gt;NASM - &lt;code class=&quot; language-markup&quot;&gt;nasm&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;neon&quot;&gt;NEON - &lt;code class=&quot; language-markup&quot;&gt;neon&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nevod&quot;&gt;Nevod - &lt;code class=&quot; language-markup&quot;&gt;nevod&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nginx&quot;&gt;nginx - &lt;code class=&quot; language-markup&quot;&gt;nginx&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nim&quot;&gt;Nim - &lt;code class=&quot; language-markup&quot;&gt;nim&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nix&quot;&gt;Nix - &lt;code class=&quot; language-markup&quot;&gt;nix&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;nsis&quot;&gt;NSIS - &lt;code class=&quot; language-markup&quot;&gt;nsis&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;objectivec&quot;&gt;Objective-C - &lt;code class=&quot; language-markup&quot;&gt;objectivec&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;objc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ocaml&quot;&gt;OCaml - &lt;code class=&quot; language-markup&quot;&gt;ocaml&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;opencl&quot;&gt;OpenCL - &lt;code class=&quot; language-markup&quot;&gt;opencl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;openqasm&quot;&gt;OpenQasm - &lt;code class=&quot; language-markup&quot;&gt;openqasm&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;qasm&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;oz&quot;&gt;Oz - &lt;code class=&quot; language-markup&quot;&gt;oz&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;parigp&quot;&gt;PARI/GP - &lt;code class=&quot; language-markup&quot;&gt;parigp&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;parser&quot;&gt;Parser - &lt;code class=&quot; language-markup&quot;&gt;parser&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;pascal&quot;&gt;Pascal - &lt;code class=&quot; language-markup&quot;&gt;pascal&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;objectpascal&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;pascaligo&quot;&gt;Pascaligo - &lt;code class=&quot; language-markup&quot;&gt;pascaligo&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;psl&quot;&gt;PATROL Scripting Language - &lt;code class=&quot; language-markup&quot;&gt;psl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;pcaxis&quot;&gt;PC-Axis - &lt;code class=&quot; language-markup&quot;&gt;pcaxis&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;px&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;peoplecode&quot;&gt;PeopleCode - &lt;code class=&quot; language-markup&quot;&gt;peoplecode&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;pcode&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;perl&quot;&gt;Perl - &lt;code class=&quot; language-markup&quot;&gt;perl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;php&quot;&gt;PHP - &lt;code class=&quot; language-markup&quot;&gt;php&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;phpdoc&quot;&gt;PHPDoc - &lt;code class=&quot; language-markup&quot;&gt;phpdoc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;php-extras&quot;&gt;PHP Extras - &lt;code class=&quot; language-markup&quot;&gt;php-extras&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;plsql&quot;&gt;PL/SQL - &lt;code class=&quot; language-markup&quot;&gt;plsql&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;powerquery&quot;&gt;PowerQuery - &lt;code class=&quot; language-markup&quot;&gt;powerquery&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;pq&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;mscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;powershell&quot;&gt;PowerShell - &lt;code class=&quot; language-markup&quot;&gt;powershell&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;processing&quot;&gt;Processing - &lt;code class=&quot; language-markup&quot;&gt;processing&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;prolog&quot;&gt;Prolog - &lt;code class=&quot; language-markup&quot;&gt;prolog&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;promql&quot;&gt;PromQL - &lt;code class=&quot; language-markup&quot;&gt;promql&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;properties&quot;&gt;.properties - &lt;code class=&quot; language-markup&quot;&gt;properties&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;protobuf&quot;&gt;Protocol Buffers - &lt;code class=&quot; language-markup&quot;&gt;protobuf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;pug&quot;&gt;Pug - &lt;code class=&quot; language-markup&quot;&gt;pug&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;puppet&quot;&gt;Puppet - &lt;code class=&quot; language-markup&quot;&gt;puppet&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;pure&quot;&gt;Pure - &lt;code class=&quot; language-markup&quot;&gt;pure&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;purebasic&quot;&gt;PureBasic - &lt;code class=&quot; language-markup&quot;&gt;purebasic&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;pbfasm&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;purescript&quot;&gt;PureScript - &lt;code class=&quot; language-markup&quot;&gt;purescript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;purs&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;python&quot;&gt;Python - &lt;code class=&quot; language-markup&quot;&gt;python&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;py&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;qsharp&quot;&gt;Q# - &lt;code class=&quot; language-markup&quot;&gt;qsharp&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;qs&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;q&quot;&gt;Q (kdb+ database) - &lt;code class=&quot; language-markup&quot;&gt;q&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;qml&quot;&gt;QML - &lt;code class=&quot; language-markup&quot;&gt;qml&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;qore&quot;&gt;Qore - &lt;code class=&quot; language-markup&quot;&gt;qore&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;r&quot;&gt;R - &lt;code class=&quot; language-markup&quot;&gt;r&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;racket&quot;&gt;Racket - &lt;code class=&quot; language-markup&quot;&gt;racket&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;rkt&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;jsx&quot;&gt;React JSX - &lt;code class=&quot; language-markup&quot;&gt;jsx&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;tsx&quot;&gt;React TSX - &lt;code class=&quot; language-markup&quot;&gt;tsx&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;reason&quot;&gt;Reason - &lt;code class=&quot; language-markup&quot;&gt;reason&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;regex&quot;&gt;Regex - &lt;code class=&quot; language-markup&quot;&gt;regex&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;rego&quot;&gt;Rego - &lt;code class=&quot; language-markup&quot;&gt;rego&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;renpy&quot;&gt;Ren&apos;py - &lt;code class=&quot; language-markup&quot;&gt;renpy&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;rpy&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;rest&quot;&gt;reST (reStructuredText) - &lt;code class=&quot; language-markup&quot;&gt;rest&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;rip&quot;&gt;Rip - &lt;code class=&quot; language-markup&quot;&gt;rip&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;roboconf&quot;&gt;Roboconf - &lt;code class=&quot; language-markup&quot;&gt;roboconf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;robotframework&quot;&gt;Robot Framework - &lt;code class=&quot; language-markup&quot;&gt;robotframework&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;robot&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;ruby&quot;&gt;Ruby - &lt;code class=&quot; language-markup&quot;&gt;ruby&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;rb&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;rust&quot;&gt;Rust - &lt;code class=&quot; language-markup&quot;&gt;rust&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;sas&quot;&gt;SAS - &lt;code class=&quot; language-markup&quot;&gt;sas&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;sass&quot;&gt;Sass (Sass) - &lt;code class=&quot; language-markup&quot;&gt;sass&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;scss&quot;&gt;Sass (Scss) - &lt;code class=&quot; language-markup&quot;&gt;scss&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;scala&quot;&gt;Scala - &lt;code class=&quot; language-markup&quot;&gt;scala&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;scheme&quot;&gt;Scheme - &lt;code class=&quot; language-markup&quot;&gt;scheme&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;shell-session&quot;&gt;Shell session - &lt;code class=&quot; language-markup&quot;&gt;shell-session&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;sh-session&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;shellsession&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;smali&quot;&gt;Smali - &lt;code class=&quot; language-markup&quot;&gt;smali&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;smalltalk&quot;&gt;Smalltalk - &lt;code class=&quot; language-markup&quot;&gt;smalltalk&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;smarty&quot;&gt;Smarty - &lt;code class=&quot; language-markup&quot;&gt;smarty&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;sml&quot;&gt;SML - &lt;code class=&quot; language-markup&quot;&gt;sml&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;smlnj&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;solidity&quot;&gt;Solidity (Ethereum) - &lt;code class=&quot; language-markup&quot;&gt;solidity&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;sol&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;solution-file&quot;&gt;Solution file - &lt;code class=&quot; language-markup&quot;&gt;solution-file&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;sln&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;soy&quot;&gt;Soy (Closure Template) - &lt;code class=&quot; language-markup&quot;&gt;soy&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;sparql&quot;&gt;SPARQL - &lt;code class=&quot; language-markup&quot;&gt;sparql&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;rq&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;splunk-spl&quot;&gt;Splunk SPL - &lt;code class=&quot; language-markup&quot;&gt;splunk-spl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;sqf&quot;&gt;SQF: Status Quo Function (Arma 3) - &lt;code class=&quot; language-markup&quot;&gt;sqf&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;sql&quot;&gt;SQL - &lt;code class=&quot; language-markup&quot;&gt;sql&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;squirrel&quot;&gt;Squirrel - &lt;code class=&quot; language-markup&quot;&gt;squirrel&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;stan&quot;&gt;Stan - &lt;code class=&quot; language-markup&quot;&gt;stan&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;iecst&quot;&gt;Structured Text (IEC 61131-3) - &lt;code class=&quot; language-markup&quot;&gt;iecst&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;stylus&quot;&gt;Stylus - &lt;code class=&quot; language-markup&quot;&gt;stylus&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;swift&quot;&gt;Swift - &lt;code class=&quot; language-markup&quot;&gt;swift&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;t4-templating&quot;&gt;T4 templating - &lt;code class=&quot; language-markup&quot;&gt;t4-templating&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;t4-cs&quot;&gt;T4 Text Templates (C#) - &lt;code class=&quot; language-markup&quot;&gt;t4-cs&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;t4&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;t4-vb&quot;&gt;T4 Text Templates (VB) - &lt;code class=&quot; language-markup&quot;&gt;t4-vb&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;tap&quot;&gt;TAP - &lt;code class=&quot; language-markup&quot;&gt;tap&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;tcl&quot;&gt;Tcl - &lt;code class=&quot; language-markup&quot;&gt;tcl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;tt2&quot;&gt;Template Toolkit 2 - &lt;code class=&quot; language-markup&quot;&gt;tt2&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;textile&quot;&gt;Textile - &lt;code class=&quot; language-markup&quot;&gt;textile&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;toml&quot;&gt;TOML - &lt;code class=&quot; language-markup&quot;&gt;toml&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;turtle&quot;&gt;Turtle - &lt;code class=&quot; language-markup&quot;&gt;turtle&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;trig&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;twig&quot;&gt;Twig - &lt;code class=&quot; language-markup&quot;&gt;twig&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;typescript&quot;&gt;TypeScript - &lt;code class=&quot; language-markup&quot;&gt;typescript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;ts&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;typoscript&quot;&gt;TypoScript - &lt;code class=&quot; language-markup&quot;&gt;typoscript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;tsconfig&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;unrealscript&quot;&gt;UnrealScript - &lt;code class=&quot; language-markup&quot;&gt;unrealscript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;uscript&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;uc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;uri&quot;&gt;URI - &lt;code class=&quot; language-markup&quot;&gt;uri&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;url&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;v&quot;&gt;V - &lt;code class=&quot; language-markup&quot;&gt;v&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;vala&quot;&gt;Vala - &lt;code class=&quot; language-markup&quot;&gt;vala&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;vbnet&quot;&gt;VB.Net - &lt;code class=&quot; language-markup&quot;&gt;vbnet&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;velocity&quot;&gt;Velocity - &lt;code class=&quot; language-markup&quot;&gt;velocity&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;verilog&quot;&gt;Verilog - &lt;code class=&quot; language-markup&quot;&gt;verilog&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;vhdl&quot;&gt;VHDL - &lt;code class=&quot; language-markup&quot;&gt;vhdl&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;vim&quot;&gt;vim - &lt;code class=&quot; language-markup&quot;&gt;vim&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;visual-basic&quot;&gt;Visual Basic - &lt;code class=&quot; language-markup&quot;&gt;visual-basic&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;vb&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;vba&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;warpscript&quot;&gt;WarpScript - &lt;code class=&quot; language-markup&quot;&gt;warpscript&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;wasm&quot;&gt;WebAssembly - &lt;code class=&quot; language-markup&quot;&gt;wasm&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;wiki&quot;&gt;Wiki markup - &lt;code class=&quot; language-markup&quot;&gt;wiki&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;xeora&quot;&gt;Xeora - &lt;code class=&quot; language-markup&quot;&gt;xeora&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;xeoracube&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;xml-doc&quot;&gt;XML doc (.net) - &lt;code class=&quot; language-markup&quot;&gt;xml-doc&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;xojo&quot;&gt;Xojo (REALbasic) - &lt;code class=&quot; language-markup&quot;&gt;xojo&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;xquery&quot;&gt;XQuery - &lt;code class=&quot; language-markup&quot;&gt;xquery&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;yaml&quot;&gt;YAML - &lt;code class=&quot; language-markup&quot;&gt;yaml&lt;/code&gt;, &lt;code class=&quot; language-markup&quot;&gt;yml&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;yang&quot;&gt;YANG - &lt;code class=&quot; language-markup&quot;&gt;yang&lt;/code&gt;&lt;/li&gt;&lt;li data-id=&quot;zig&quot;&gt;Zig - &lt;code class=&quot; language-markup&quot;&gt;zig&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[GitHub Actions 入门]]></title><description><![CDATA[这个博客站是我自己用 Gatsby 随便拼凑了一下造出来的，前几天发现好久都没有更新博客了，心里还是很愧疚的 🤣，那就更新一篇吧。 之前用 Gatsby 写博客要么是在 OS 系统下，要么是在 Linux 系统下，从来没用过 Windows。但是由于工作环境的变化，手头只有…]]></description><link>https://wizd.dev/GithubActions入门/</link><guid isPermaLink="false">https://wizd.dev/GithubActions入门/</guid><pubDate>Mon, 12 Apr 2021 11:11:23 GMT</pubDate><content:encoded>
![github-actions](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-12-ff8131d6e5212fdddaddb1f20be4e03e-github-actions-fd25c1.png)

这个博客站是我自己用 Gatsby 随便拼凑了一下造出来的，前几天发现好久都没有更新博客了，心里还是很愧疚的 🤣，那就更新一篇吧。

之前用 Gatsby 写博客要么是在 OS 系统下，要么是在 Linux 系统下，从来没用过 Windows。但是由于工作环境的变化，手头只有 Windows 可用，讲道理这种纯前端该没什么平台限制，但是在我一通 `npm` 命令之后，博客并没有按照我的预期正常跑起来，这里不对这个问题做深究（Windows 文件路径大小写不敏感，而且盘符根目录都是大写字母 C D E，会导致 Gatsby 脚手架部分功能异常）。

经过一番努力之后，终于正常跑起来了，但是由于使用的 Windows 系统配置特别差，CPU 动不动就要飙到 100%，Gatsby 最终生成静态站点的过程及其痛苦。

由于所在网络环境的问题，最终将生成的静态内容推送到 Github Pages 服务的过程也是很糟心 😢。

遂决定，使用 Github Actions 自动打包自动部署。趁有空花了一下午时间，把 Github Lab 中的 Github actions 的内容都过了一遍，这里就做个简单的记录。

## Github Actions 简介

&gt; Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you&apos;d like, including CI/CD, and combine actions in a completely customized workflow.

Github Actions 可以粗略的理解为集成在 Github 中的 CI/CD 服务， 和 Jenkins、Travis CI 等类似。

![ci/cd](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-29-98b9955a8eb015e58811a8ac81a195d3-cicd-749ce1.png)

Github Actions 目前可以用来做以下这些事情：

- 自动化测试（持续集成）
- 持续交付和部署
- 触发 Code Review
- 管理分支
- 分类 Issue 和 PR

简单的来说，就是之前我们需要在本地电脑上进行的 `npm run build` `npm run test`，都可以通过使用 Github Actions 在云平台中进行，而且在打包和测试完成之后，还能自动帮你进行部署。

这就意味着，我们不需要自己购买以及配置相关的构建服务器，Github 提供了免费云环境供大家使用。而且，由于是和 Github 集成的，所有的工作流都可以设置 Github 相关事件触发（push, issues, label, pull request 等等）。

在 Gihub 中有一个 [Action 市场](https://github.com/marketplace?type=actions)，还有别人整理的一个 [Awesome Acitons](https://github.com/sdras/awesome-actions)，里面有很多别人已经写好的 Action，可以直接拿过来用，不要太爽。

## 快速入门

### 准备工作

你需要一个 Github 仓库，新建一个仓库，或者使用一个已有的仓库都可以。

### 创建你的第一个 workflow 文件

在你的本地仓库根目录创建 `.github/workflows` 文件夹，使用 Windows 操作系统的同学自行创建，Linux 操作系统的同学可以使用下面的命令。（当然你也可以不使用本地仓库，直接在 Github 网页中进行创建文件的操作）

```bash
mkdir -p .github/workflows
cd .github/workflows
```

创建文件 `your-first-workflow.yml`

```bash
touch your-first-workflow.yml
```

将下面的内容复制到你的 `your-first-workflow.yml` 文件中，并保存。

```yaml
name: GitHub Actions Demo
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo &quot;🎉 你的工作流被 ${{ github.event_name }} 事件自动触发了.&quot;
      - run: echo &quot;🐧 本工作流运行在 Github 托管的 ${{ runner.os }} 服务器上!&quot;
      - run: echo &quot;🔎 你的分支名是 ${{ github.ref }}，你的 github 仓库是 ${{ github.repository }}.&quot;
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo &quot;💡 仓库 ${{ github.repository }} 已经被克隆到 ubuntu 了&quot;
      - run: echo &quot;🖥️ 工作流已经准备好在 ubuntu 上对你的代码进行测试了&quot;
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo &quot;🍏 当前工作流的状态是 ${{ job.status }}.&quot;
```

将当前改动推送到你的 Github 仓库中。（如果你是 Github 页面直接新建文件操作的直接跳过）

```bash
git add .
git push -u 你的仓库地址 master
```

然后打开 Github 中的 Actions 页面，你会发现你的工作流已经在运行了。

## Github Actions 基本概念

- workflow(工作流)：每个 workflow 文件就代表一个工作流，会在特定的条件下触发。
- jobs(工作)：一个工作流中可以包含很多工作，字面意思很好理解（乔布斯哈哈哈）
- steps(步骤)：每个工作可以有很多步骤组成
- action(行为)：每个步骤中可以执行一个或多个行为（或者叫命令更好？实在不知道怎么翻译更好 😅）

## workflow 文件详解

### name

工作流的名称，会展示在你的 Gihub Actions 页面中， 如果你不给名字，默认会使用你的文件路径

比如快速入门中，我们的工作流名称就是 `GitHub Actions Demo`

```yaml
name: GitHub Actions Demo
```

### on

触发你工作流的 Gihub 事件名称，可以是单个事件，也可以是个事件数组。
[能触发工作的流的事件看这里](https://docs.github.com/en/actions/reference/events-that-trigger-workflows)

快速入门中，我们的设置的触发事件是 `push`，那就意味着，当我们向 Github 仓库中推送内容的时候，就会自动触发我们的工作流。

```yaml
on: [push]
# 你也可以用如下的形式
on: push
```

我们也可以设置在指定的分支上 push 时才触发

```yaml
on:
  push:
    branches:
      - master
```

我们还可以设置让工作流定时执行，这就很强了！比如你写个爬虫，定时去跑，当然这属于薅羊毛操作，之前好像有不少人因为不明原因被取消了使用资格。正常情况下不会有这样的事情，官方的限制可以看看[这里](https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration)。

```yaml
on:
  schedule:
    - cron: &quot;*/30 5,17 * * *&quot;
```

上面的定时计划是，在每天的 `5:30` 和 `17:30` 自动执行，这里使用的时间计划是[POSIX cron syntax](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07)，感兴趣的同学自行了解。

### jobs

上面关于工作流整体的配置基本 ok 了，那么接下来就是具体的工作流里面要做的事情了。`jobs` 就是用来设置当前工作流中具体的工作内容的。

每个工作需要有自己的 `id`，同时还需要一个 `name`:

```yaml
jobs:
  job1: # 这里 job1 就是 id
    name: This is the job1 # 这里是 job 的 name
  job2:
    name: My second job
```

当有多项工作的时候，避免不了的会出现工作项之间的依赖关系，比如 `job2` 要在 `job1` 完成之后才能执行，那我们就需要为 `job2` 设置 `needs` 选项：

```yaml
jobs:
  job1: # 这里 job1 就是 id
    name: This is the job1 # 这里是 job 的 name
  job2:
    name: My second job
    needs: job1 # 注意这里使用的是 id，不是 name
```

在执行构建任务或者测试任务时，需要指定对应的执行环境，也就是对应的操作系统，我们可以通过 `runs-on` 来指定当前 `jobs` 需要执行的环境。

```yaml
jobs:
  job1:
    name: This is the job1
    runs-on: ubuntu-latest
```

目前 Github 能提供的环境如下：

| Virtual environment  | YAML workflow label            |
| -------------------- | ------------------------------ |
| Windows Server 2019  | windows-latest or windows-2019 |
| Ubuntu 20.04         | ubuntu-latest or ubuntu-20.04  |
| Ubuntu 18.04         | ubuntu-18.04                   |
| Ubuntu 16.04         | ubuntu-16.04                   |
| macOS Big Sur 11.0   | macos-11.0                     |
| macOS Catalina 10.15 | macos-latest or macos-10.15    |

有的时候需要在不同环境下测试一套代码，有同学可能会想，那我是不是要来多个 `job` 来在不同的环境中进行操作。其实不需要，Github Action 帮我们解决了这个问题，使用 `strategy`，就可以让当前 `job` 在不同环境中运行。

下面的配置就可以让我们在 `unbuntu-latest` 和 `windows-2016` 中分别执行 `job1`，而且！而且！而且！会分别在 `node 12.x` 和 `node 14.x` 的版本中执行。 也就是我们的 `job1` 最终会执行 4 次哦！

```yaml
jobs:
  job1:
    name: This is the job1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2016]
        node-version: [12.x, 14.x]
```

### steps

每个 `job` 中需要进行的操作，我们需要使用 `steps` 来定义。

`step` 中也有 `name` 来定义每一步的名称，用来声明这一步在做什么。

```yaml
jobs:
  job1:
    name: This is the job1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2016]
        node-version: [12.x, 14.x]
    steps:
      - name: Print a greeting
```

`step` 中最关键的是 `run`，用来执行具体的命令。

```yaml
jobs:
  job1:
    name: This is the job1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2016]
        node-version: [12.x, 14.x]
    steps:
      - name: Print a greeting
        run: |
          echo Hello World.
```

`step` 中还可以添加环境变量 `env`，这样在执行的命令中可以使用这些环境变量，就像下面这样。

```yaml
jobs:
  job1:
    name: This is the job1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2016]
        node-version: [12.x, 14.x]
    steps:
      - name: Print a greeting
        env:
          MY_VAR: Hi there! My name is
          FIRST_NAME: Mona
          MIDDLE_NAME: The
          LAST_NAME: Octocat
        run: |
          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.
```

除了执行指定的命令外，我们也可以使用 `uses` 在 `step` 中调用 `action`（`aciton`可以自己写，也可以去市场找）。

```yaml
jobs:
  job1:
    name: This is the job1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2016]
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2 # 这里就是使用市场中提供的 action 将当前的仓库代码检出到虚拟机
      - name: Use Node.js ${{ matrix.node-version }}
        uses: ./.github/actions/setup-node # 这里是使用自己写的 action 安装 node 环境（实际不存在，只是给大家演示写法，实际使用的还是市场提供的 actions/setup-node@v1）
        with: # with 为这个 action 提供相应的参数
          node-version: ${{ matrix.node-version }}
      - name: npm install, and test
        run: |
          npm install
          npm test
```

## 使用 Github Actions 发布 Gatsby 到 Github Pages

本来打算自己写一个发布的 action，结果发现已经有人已经造好了轮子，那我们就在巨人肩上玩玩吧。

下面是我完整的 workflow 文件。

```yaml
name: Gatsby Publish

on:
  push:
    branches:
      - master # master 分支是我得 Gatsby 代码

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1 # 这里还是使用市场提供的 action 检出代码到虚拟机
      - uses: enriikke/gatsby-gh-pages-action@v2 # 这里就是巨人造好得轮子，可以构建 Gatsby 静态页面，并且发布到 Github Pages
        with:
          access-token: ${{ secrets.ACCESS_TOKEN }} # 我们需要提供相应的参数，这个 token 提供我会在下面讲到
          deploy-branch: page # 这里是指定提供 Github Pages 的分支，最终构件好的静态页面就会发布到这个分支
```

整个 workflow 运行流程如下：

1. 本地写好文章后，`push` 到 github
2. 由于 workflow 中 `on: push` 的存在，会自动触发该工作流
3. 当前 workflow 只有一个job，在虚拟机环境 ubuntu-latest 中
4. 第一步使用 `actions/checkout` 获取源码
5. 第二步使用 `enriikke/gatsby-gh-pages-action@v2` 构建静态站点并进行部署

也就是在我们每次本地写好 Markdown 文章之后，推送到 Github，我们的 `workflow` 就会自动帮我们生成静态页面，并且发布到 Github Pages。

### $\{\{ secrets.ACCESS_TOKEN \}\}

在上面的 `steps` 第二步中，我们用到了一个 `${{ secrets.ACCESS_TOKEN }}`， 这是由于该 `action` 需要将构件好的静态页面 `push` 到我们的 `page` 分支，所以需要 Github 的访问权限，我们需要[自己生成 `Access_Token`](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)，并在项目设置页面中提供。

![access_token](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-36-677e12d2d7b9db2aaab9fb3070b7329d-access_token-aba4e5.png)

## 总结

本文只是讲解了一些日常用法，关于 Github Actions 更深层次的学习，大家可以参考[官网文档](https://docs.github.com/en/actions/learn-github-actions)。

Github Actions 使得定制开发工作流如此简单，在 DevOps 方面还有很多的可能性，必然会是日后发展的趋势（当然我是说它这种模式，毕竟，它是要收钱的🤣 🤣 🤣）。

</content:encoded></item><item><title><![CDATA[HTTP 会话机制及 JWT 深入浅出]]></title><description><![CDATA[HTTP 协议无状态的说明（马什么梅？什么冬梅？） HTTP 协议属于无状态协议，在客户端使用 HTTP 协议与服务端通信的时候，服务器就像是马冬梅家楼下的老大爷一样，比较健忘。每次请求对于服务器来说都是一次全新的请求，对之前的请求毫无记忆。

如果不对此提供相应的解决方案…]]></description><link>https://wizd.dev/HTTP会话机制及JWT原理浅析/</link><guid isPermaLink="false">https://wizd.dev/HTTP会话机制及JWT原理浅析/</guid><pubDate>Mon, 29 Mar 2021 14:51:50 GMT</pubDate><content:encoded>
![jwt](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-55-34-77f83fc49b81e4f8377846d66fa014ad-jwt-a0a11c.jpg)

## HTTP 协议无状态的说明（马什么梅？什么冬梅？）

HTTP 协议属于无状态协议，在客户端使用 HTTP 协议与服务端通信的时候，服务器就像是马冬梅家楼下的老大爷一样，比较健忘。每次请求对于服务器来说都是一次全新的请求，对之前的请求毫无记忆。

如果不对此提供相应的解决方案，那么用户在访问网站的时候，页面每跳转一次就得输入一次用户名和密码来给服务器大爷表明身份，可以说用户体验极差。

那么实际开发中我们是如何解决上述问题的？

## HTTP 协议会话状态保持

会话状态保持，指的就是让服务器对之前的请求有记忆，客户端在对服务器发起请求时便不需要每次都进行身份认证，一次登录身份信息一直有效，直至登出或者会话过期。

要实现这样的功能，最简单的方式就是服务器在对客户端进行身份认证之后，给客户端发放令牌，客户端在后续所有的请求中都携带该令牌，这样即可避免重复的身份校验，这里的令牌就像是古代出入皇宫用的令牌，是身份的标识。

### Cookie &amp; Session

本节中不对 Cookie 和 Session 做详细讲解，只涉及会话保持相关内容。

我们可以简单的将 Session 理解为服务器端一小块存储空间，Cookie 为浏览器端的一小块存储空间。

用户正常的登录操作将会如下图所示：

![cookie-session](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-55-56-9142b0e1e226be2566e792ecedc6291f-cookie-session-754c2e.jpg)

&lt;div style={{display: &apos;none&apos;}}&gt;
```mermaid
sequenceDiagram
 participant Cookie
 participant 客户端
 participant 服务器
 participant Session
    客户端-&gt;服务器: ① 登录请求：用户名&amp;密码
    服务器-&gt;服务器: ② 验证用户名和密码
    服务器-&gt;Session: ③ 通过校验后，将用户信息存储到Session中
    Session-&gt;服务器: ④ 获取到存储在Session中的信息对应的SessionId
    服务器-&gt;客户端: ⑤ 在响应头中使用Set-Cookie&lt;br /&gt;让客户端将Session存储到Cookie中
    客户端-&gt;Cookie: ⑥ 将SessionId存储到Cookie
    Cookie-&gt;客户端: ⑥ 所有的请求会自动将Cookie中的&lt;br /&gt;SessionId携带到服务器
    客户端-&gt;服务器: ⑦ 后续包含SessionId的请求
    服务器-&gt;Session: ⑧ 服务器拿到SessionId之后&lt;br /&gt;去Session中查找对应的信息&lt;br /&gt;找到就证明登录了，找不到就让用户重新登录
```
&lt;/div&gt;

### 传统 Token

其实早期 Token 的出现是为了解决单点登录中的 Session 问题以及移动端不能使用 Cookie 的问题的，他和上面提到的 SessionId 功效几乎完全一致。所以你可以把上图中的 SessionID 和 Token 划等号。

这里的 Token 一般都是在用户身份验证成功之后，生成的全局唯一的随机字符串(UUID)，用它作为键将必要信息以及 Token 有效期等信息存储到相关的数据库中，随后将其返回给客户端，客户端需要自行管理接收到的Token, 在后续的请求中，都需要携带这个 Token。在服务器接收到这个 Token 之后，查库验证 Token 的有效性。

和上面 Cookie &amp; Session 差别在于，在使用 Token 的时候，服务端信息存储的位置不局限于 Session 空间，而可以使用 Redis/MongoDB 等NoSQL数据库做分布式存储，这使得鉴权性能以及稳定性都有提升。

注意，这里的 Token 只是一个单纯的通行证，此方式仍然需要在服务器端进行数据存储，随着用户数量的增长，服务器的开支也会随之增大。那么思考一下，如果 Token 本身就能携带信息，那么服务器端就不用再存储数据，是不是就解决了上述服务器储存开支的问题？

## JWT

JWT（JSON Web Token) 可以算是一种规范化的 Token 身份认证方式，他规定了 Token 中携带信息的方式。

JWT 同样也是服务端在对用户身份验证之后生成 Token，然后颁发给客户端，和普通 Token 不同的是，JWT 中可以携带该 Token 相关的信息，这样服务器端就不再需要额外的存储空间了，服务端在接受到客户端请求的时候，只需要通过 Token 自身携带的信息进行有效性校验即可。

### JWT 使用

客户端通过身份验证之后从服务器端获取到的 JWT 可能是这样的：

```http
eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
.
eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ
.
dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
```

**_注意： 这里的为了方便大家看清格式，我将原本的单行文本进行了换行，实际获取到的 JWT 是没有换行的。_**

在获取到 JWT 之后，后续的请求需要将获取到的 Token 以 Authorization 为键添加到请求头中:

```http
Authorization:Bearer 你的token
```

比如 axios 默认请求头设置：

```javascript
axios.defaults.headers[&quot;Authorization&quot;] = `Bearer ${token}`
```

### JWT 是如何生成的？

实际开发中已经有很多现成的库可以帮我们处理 JWT 相关的内容，比如生成 JWT 以及验证 JWT。所以这节内容中我们不涉及具体代码，只给大家分享 JWT 的工作原理。

#### JWT 的结构

一个 JWT 中包含有三部分，中间用 `.` 隔开：

- header：使用 base64 处理过的 Token Meta。（`base64(header)`）
- payload：使用 base64 处理过的实际携带的数据。（`base64(payload)`）
- signature: 使用 HMACSHA256 从 `header` `paylaod` 提取。（`HMACSHA256(header + &apos;.&apos; + paylaod, &apos;秘钥&apos;)`）

##### Header

包含在 Header 中的 Token Meta 通常由两部分组成：令牌的类型（即 JWT），以及所使用的签名算法，如 `HMAC SHA256` 或 `RSA`。

```json
{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}
```

##### Payload

Token 的第二部分是荷载（Payload)，荷载中包含声明（claims)。

声明其实就是要在 Token 中存储的信息，比如你的 User 对象，也可以有其他一些额外的信息（这个就是 JWT 特点体现，可以自身携带信息，不再需要服务端存储）。

声明有三种类型（关于这个类型不必过多关注，对使用没有太大影响，了解即可）：

- 预设（registered）：预设就是提前定义好的声明，JWT 不强制要求添加这些声明，但是建议添加，因为可以提供一组可操作性比较强的有用信息。

```
# 大家注意这里的声明键名都是三个字母的，因为用于网络通讯， 所以 JWT 要求紧凑
iss (issuer)
exp (expiration time)
sub (subject)
aud (audience)
```

- 公开（public）：这个就随用户自己随便定义了，当然为了避免命名冲突，一般建议使用[IANA JSON Web Token Registry](https://www.iana.org/assignments/jwt/jwt.xhtml)里面的名字，或者用 URI 做为命名空间, 比如`xxxx.com_username`
- 以及私有（private）：这个其实主要是用来传输数据用的。

一段有效的荷载如下：

```json
{
  &quot;sub&quot;: &quot;1234567890&quot;,
  &quot;name&quot;: &quot;John Doe&quot;,
  &quot;admin&quot;: true
}
```

**_&lt;font color=&quot;red&quot;&gt;需要大家注意的是：虽然 JWT 可以有效的防止数据被篡改，但是 Token 对于任何人来说其实还是可读的（其实相当于明文传输），所以不要将敏感信息放在 JWT 中&lt;/font&gt;_**

##### Signature

Token 中最后一部分就是签名，签名使得服务端可以对 Token 做有效性校验（是否服务端颁发以及是否有被篡改）。

签名的算法就使用 Token Meta 中声明的算法，假设我们要使用 `HMAC SHA256` 进行签名，那么操作如下：

```javascript
HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)
```

在获取到签名字符串之后，我们将其和之前的两部分放在一起，组成最终的 JWT。

![encoded-jwt3.png](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-56-08-7eff2d69391c0683d058e0f5dc9049bb-encoded-jwt3-5de3fb.png)

### JWT 请求流程

![jwt-sequence](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-55-41-6f08165be2cc0e587243f29b5202a0fb-jwt-sequence-8a9509.png)

### JWT 优势

JWT 在现代应用开发中很受欢迎，原因有如下几点：

1. 开销小，占用资源少（因为 JWT 自身携带信息，不需要在服务端进行存储，这样减少存储开支的同时也能省略查库操作提升效率）
2. 能够很方便的进行跨域使用（比如第三方授权，或者集群中 SSO）
3. 可以使用 JWT 实现安全的数据传输（这个特性很少用，目前关注点更多的放在令牌的签名校验上）

### 使用 JWT 要注意的问题

#### Token 注销的问题

服务端不会存储 Token 相关信息，所以 Token 是否有效是由其自身决定的，这样的话服务端是无法主动让 Token 失效的。

那么问题来了，用户如何注销 Token？

最简单直接的办法就是删掉客户端存储的 Token 即可，客户端没了 Token，那么自然就没了访问权限。等等，这不就意味着我们只是删掉了那个 Token, 但是实际上 Token 还是有效的不是么？

怎么确保这个 Token 的确是失效的呢？

目前常见的方案是“黑名单策略”，即在服务器端维护一张表来存储还在有效期内但又需要让其失效的 Token，表内存储用户 `UUID` 以及注销操作的时间 `SignOutTime`，在下次请求来的时候，使用用户 `UUID` 在黑名单表内进行查询，如果找到了相应记录，且当前 Token 的签发时间在 `SignOutTime` 之前，则判定当前 Token 无效。

#### Token 自动续签问题

我们都知道 Session 采用的是滑动时间制，即当用户在指定时间内再次请求服务器，则 Session 有效时长从当前时间自动顺延规定时长，这样就能达到续签的效果。

那么不存在这种机制的 JWT 如何做续签？

在实际应用场景中，比如微信公众号，他的 Token 有效时长为 3600s, 到期之后不会自动续签，客户端需要自行重新请求服务器签发新 Token。

JWT 中会存储用户信息，所以处于安全考虑，有效期一般都会设置比较短，但是针对 C 端的应用来讲，如上微信公众号的方式就变得不太友好，用户用一会儿就得重新输入用户名密码获取新的 Token。所以出于用户体验考虑，Token 自动续签显得尤为重要。

现在常用的做法为如下：

1. 登录后，向客户端发送2个令牌（`access_token`，`refresh_token`）。
2. `access_token` 有效期设置较短，而 `refresh_token` 有效期设置较长。
3. 客户端（前端）将 `access_token` 存储在 LocalStorage 中，将 `access_token` 存储在 cookie 中。
4. 客户端将使用 `access_token` 来调用正常API。 但是，当 `access_token` 过期时，需要从本地存储中获取 `refresh_token`，然后调用身份验证服务器的 API 来获取新的 `access_token` 。
5. 身份验证服务器需要公开一个 API，该 API 接受 `refresh_token`并检查其有效性并返回新的 `access_token` 。
6. 刷新令牌过期后，注销用户不再返回新的 `access_token`。

**_注意这里的 `refresh_token` 只是另一个包含更少声明（Claims）的 JWT_**

未经允许不得转载~ thx！

</content:encoded></item><item><title><![CDATA[Headless Server 是个什么东西？]]></title><description><![CDATA[无头服务器（Headless Server），是指没有显示器、键盘、鼠标等其他外设的电脑。无头电脑一般是通过网络进行控制的。举个例子，你可以想象一下数据中心中放在服务器支架上提供 web 服务的刀片服务器，它们就是所谓的无头服务器。 "Headless" 究竟是什么意思？

”无…]]></description><link>https://wizd.dev/Headless-Server-是什么意思？/</link><guid isPermaLink="false">https://wizd.dev/Headless-Server-是什么意思？/</guid><pubDate>Tue, 10 Nov 2020 13:10:23 GMT</pubDate><content:encoded>

![HeadLess Server](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-55-10-44ff2797badb0260eb1af5ec9efbde4b-headless-server-f5065c.jpg)

无头服务器（Headless Server），是指没有显示器、键盘、鼠标等其他外设的电脑。无头电脑一般是通过网络进行控制的。举个例子，你可以想象一下数据中心中放在服务器支架上提供 web 服务的刀片服务器，它们就是所谓的无头服务器。

## &quot;Headless&quot; 究竟是什么意思？

”无头“系统指的其实就是没有本地接口的计算机系统，在这台计算机上，没有显示器（就是他的头）等其他外设来供你操作这台计算机。

这样的计算机不是提供给你坐下来像使用你的笔记本或者你的家用电脑一样去使用的，它们通常都没有显卡接口。你想操作它一般都是通过互联网进行远程操作，比如你可以通过过基于 web 的图形化控制面板或者 SSH 这样的提供命令行操作的工具进行操作，当然你也可以通过 Remote Desktop 或者 VNC 这样的图形化操作工具进行远程控制。

你可能会在很多不同的地方看到无头（Headless）这个词汇，但是他们一般都表示同一个意思。无头 Linux 指的就是没有显示器和键盘的 Linux 系统， 无头浏览器指的就是没有图形化界面的浏览器。

## 所以 Headless Server 存在到底有啥意义？

并非每个计算机系统都需要监视器，键盘和鼠标。 许多计算机都是为远程访问而设计的服务器。数据中心到处都是“机架式”计算机，将尽可能多的计算能力打包到尽可能小的空间中。 通过不将每台服务器计算机连接到单独的显示器，它们将节省空间，电力和金钱。

无头系统不仅适用于数据中心。例如，您可能选择将媒体服务器托管在你的旧计算机上，从而使您可以从局域网内的任何设备流式传输媒体。 在配置好之后，您可能会决定移除掉你媒体服务器计算机的监视器，键盘和鼠标，毕竟，您可以通过网络对其进行访问。 您可以将服务器PC放在壁橱中的某个位置并对其进行控制，而不必坐在前面，这样你就拥有了一台无头服务器。

这些系统可以远程控制和管理，而不会影响外围设备。 如果出于某种原因需要带无头服务器的显示器和键盘（可能是为了解决问题），则始终可以在需要时连接这些外围设备。

例如，Gartner估计，截至2016年7月，Google在其全球数据中心中约有250万台服务器。这些服务器将大都是无头服务器-Google也不需要250万台显示器和键盘。
</content:encoded></item><item><title><![CDATA[使用Trojan 的情况下多个 HTTPS 域名部署方案]]></title><description><![CDATA[Trojan 原理简介 最简单来讲， Trojan 是通过 HTTPS 的方式进行穿墙操作的， 也就是所有的请求， 先通过 Trojan 客户端加工之后， 以正常 HTTPS 请求的方式发往墙外服务器， 然后在 Trojan 服务端， 对请求内容进行解析后…]]></description><link>https://wizd.dev/trojan-https-多域名部署方案/</link><guid isPermaLink="false">https://wizd.dev/trojan-https-多域名部署方案/</guid><pubDate>Thu, 13 Aug 2020 16:32:59 GMT</pubDate><content:encoded>
## Trojan 原理简介

最简单来讲， Trojan 是通过 HTTPS 的方式进行穿墙操作的， 也就是所有的请求， 先通过 Trojan 客户端加工之后， 以正常 HTTPS 请求的方式发往墙外服务器， 然后在 Trojan 服务端， 对请求内容进行解析后， 将原请求转发给目标服务器，再将目标服务器返回的数据包装成正常的 HTTPS 响应包返回给 Trojan 客户端。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-23-9a16a4b0495228a521a9d199a5726835-TrojanDataFlow-a4e62d.png)

## Trojan 和 Nginx 的配合模式

由于整个穿墙操作借助的是 TLS， 所以 Trojan 需要监听 443 端口， 而 Nginx 则是在 Trojan 后面提供网页服务的。 也就是说其实 Trojan 会导致 Nginx 无法使用 HTTPS， Trojan 会独占 443 端口， 只为穿墙域名提供 HTTPS 服务， Nginx 只能使用 HTTP。 这就很蛋疼了， 为了穿墙导致其他域名全部无法使用 HTTPS， 如果这台服务器单纯就是用来扶墙的还好， 但是如果还有别的站点需要进行托管， 那就很不爽了。

我们可以通过一张图来看一下 Trojan 和 Nginx 的配合模式。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-02-f7ba184481751dd1b336a655ffdc0d1d-trojan-nginx-cff97a.png)

单看图，是不是觉得挺好啊，Trojan 这不是能识别 Trojan 请求和非 Trojan 请求么？ 那其他需要托管的站点通过浏览器访问的时候，不都应该是正常的么？ 想法是美好的，当然如果你不在乎是不是 HTTPS，现实也很美好。

## 问题是什么

Trojan 只能为一个域名配置 HTTPS，而它本身又独占了 443 端口， 就导致你的&lt;font color=&apos;red&apos;&gt;***整台服务器上就只能有一个 HTTPS 域名服务***&lt;/font&gt;, 多个 HTTPS 配置不了。

那么，如何在使用 Trojan 的时候， 部署多个 HTTPS 站点呢？

## 解决方案

在[Trojan 和 Nginx 的配合模式](#Trojan-和-Nginx-的配合模式)一节中我们知道， 所有请求先是经过 Trojan， 然后由 Trojan 进行甄别之后决定是否要交给 Nginx 进行处理。

我们把处理流程进行一下更改，其实就能是实现我们的需求了。 如图:

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-14-071491d6e3b416d08e1f717e6efeebdc-nginxinfront-a56ad6.png)

这样的话，我们就把 443 端口从 Trojan 中解放出来交还给了 Nginx。 所有请求先到达 Nginx， Nginx 中进行处理， 如果请求的是为 Trojan 配置的域名， 那么就将请求转发给 Trojan， 如果不是则由 Nginx 自行处理。

使用 Nginx `ngx_stream_ssl_preread_module` 这个模块就能满足我们的诉求。 [看这儿](https://github.com/trojan-gfw/trojan/issues/131#issuecomment-535122993)

### 具体配置

***/etc/nginx/nginx.conf***

```nginx
...
stream{
        map $ssl_preread_server_name $name {
            trojan.xxx.com trojan;
            anotherdomain.com nginx;
        }

        upstream trojan {
            server 127.0.0.1:8889;
        }

        upstream nginx {
            server 127.0.0.1:8888;
        }

        server {
            listen      443;
            listen      [::]:443;
            proxy_pass  $name;
            ssl_preread on;
        }
}
http {
    server {
        server {
        listen       8888 ssl;
        listen       [::]:8888 ssl;
        server_name  anotherdomain.com;
        ssl_certificate  xxxxxx.crt;
        ssl_certificate_key xxxxxxx.key;
        sl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ...
    }
}
...
```

***/usr/src/trojan/server.conf***

```json
{
    &quot;run_type&quot;: &quot;server&quot;,
    &quot;local_addr&quot;: &quot;0.0.0.0&quot;,
    &quot;local_port&quot;: 8889,
    &quot;remote_addr&quot;: &quot;127.0.0.1&quot;,
    &quot;remote_port&quot;: 80,

    ...
}
```

## 后续更新

这里要注意一下，可能是不同方式安装的 Nginx 版本不一致的问题，可能会导致安装之后 `ngx_stream_ssl_preread_module` 模块找不到的问题。

可以通过以下两种方式解决：
1. 通过 yum 安装 Nginx（推荐）[可以参考之前的文章](https://wizd.dev/CentOS7%E5%AE%89%E8%A3%85Nginx/)
2. 自行下载编译 Nginx 
...

还可能会遇到
```
nginx: [emerg] unknown directive &quot;stream&quot; in /etc/nginx/nginx.conf:18
```
只需要
```
yum install nginx-mod-stream.x86_64
```
</content:encoded></item><item><title><![CDATA[PGP 是怎么工作的]]></title><description><![CDATA[原文链接 http://www.pgpi.org/doc/pgpintro 但是原文网址已经无法访问了，可以通过https://web.archive.org进行访问

密码学基础

当凯撒大帝要给自己的将军们传递信息的时候， 他并不相信自己的信使…]]></description><link>https://wizd.dev/PGP-是怎么工作的/</link><guid isPermaLink="false">https://wizd.dev/PGP-是怎么工作的/</guid><pubDate>Wed, 29 Jul 2020 16:38:29 GMT</pubDate><content:encoded>
&gt; 原文链接 [http://www.pgpi.org/doc/pgpintro](http://www.pgpi.org/doc/pgpintro)
&gt; 
&gt; 但是原文网址已经无法访问了，可以通过[https://web.archive.org](https://web.archive.org/web/20161119061018/http://www.pgpi.org/doc/pgpintro)进行访问

## 密码学基础

当凯撒大帝要给自己的将军们传递信息的时候， 他并不相信自己的信使。所以他就把信中所有的字母都向后移动 3 位， A 替换成了 D，B 替换成了 E， 以此类推。 只有知道字母需要“偏移 3 位”这个规则的人，才能解密他的信息。

接下来我们开始。

## 加密和解密

无需经过任何特殊手段就能被读懂的数据被成为纯文本或者明文。隐藏明文真实内容的方法被称为 Encryption（加密）， 加密后产生的无法阅读的数据被称为 ciphertext（密文）。一般我们通过加密的方式来确保我们的信息不被不相干的人获取，哪怕是他们能够看到我们加密后的数据。 将密文转换成其对应的原本的明文的过程，我们称之为 decryption（解密）。图 1-1 展示了这个过程。
![图 1-1: 加密和解密](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-48-46-5a8acda1b1fcfba33b88f92a2cc5efb3-fig1-1-13bbc0.gif)
## 什么是密码学（cryptography）？

***Cryptography*** （密码学，这里更偏指的是加密方向的密码学，也可叫密码加密学）是一门利用数学对数据进行加密和解密的科学。密码学让我们能够存储一些敏感信息或者在不安全的网络环境（比如互联网）下进行信息传递。这样除了目标接收方之外，其他任何人都无法获取这些信息。

***Cryptography*** （密码学，这里更偏指的是加密方向的密码学）是用来加密数据的科学，而 ***Cryptanalysis*** （密码学， 这里更偏指的是分析和破解方向的密码学，也可以叫密码分析学）是一门分析和破解安全通信的科学。经典密码分析是涉及分析推理、数学工具的使用、模式的发现、耐心、决心和运气的有趣组合。密码分析员也被成为攻击者。

***Cryptology*** (密码学，总称) 包括 ***Cryptography*** (密码加密学) 和 ***Cryptanalysis***（密码分析学）。

### 强加密

&gt; 世界上有两种密码学：一种可以防止你的姐姐阅读你的文件，另外一种密码学则可以防止政府阅读你的文件。这本书是关于后者的。
&gt;
&gt; ——Bruce Schneier，《应用密码学:协议、算法和C语言的源代码》

PGP 其实也是关于后者的密码学。 就像上面讲的那样，密码加密学可以是强加密也可以是弱加密，密码的强弱程度事宜将其恢复成明文所需要的时间和资源来衡量的。强密码学可以保证在没有适当的解码工具的情况下，密文很难被破解。那到底有多难？以今天地区上所有的计算力和可用时间，即使是是一台计算机同事工作，每秒进行十亿次运算，也不可能在宇宙毁灭前破译出明文。

有人可能会想，这样的话，即使是面对特别厉害的密码分析员或密码分析技术，这种强大的加密技术仍然可以好的应对。但是谁会这么说呢？没人能证明一个在今天及其强大的加密技术，在明天的算力之下还能这么强大。不管怎么说，PGP 采用的是迄今为止最可靠的加密方式。而且，警惕和保守会比声称坚不可破更能保护你。

### 加密的原理是什么样的

加密算法是一种在加密和解密过程中使用的数学方法。加密算法结合一个密钥（一个单词、一个数字、一个词组）来加密明文。同样的明文使用不同的密钥加密出来的密文也是不一样的。加密数据的安全性取决于两个因素：加密算法的强度以及密钥的安全性。

一个加密算法，加上所有可能的密钥以及所有令其正常工作的协议组成了一个加密系统。PGP 就是一个加密系统。

## 常规加密学

常规加密学，也被称为密钥加密或者对称密钥加密，加密和解密使用的是同一个密钥。DES（数据加密标准）就是一个被联邦政府广泛使用的常规加密系统。图 1-2 展示了常规加密的过程。
![图 1-2](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-49-15-b298d05c8fddd8ce85a05d72e1733cd9-fig1-2-db3293.gif)

### 凯撒密码

常规加密非常简单的一个例子就是替换密码。替换密码将信息替换成另外一个信息。这个通常是将字母表中的字母进行偏移来实现的。典型的两个例子就是你可能从小就拥有的 [午夜船长的秘密解码指环](https://en.wikipedia.org/wiki/Secret_decoder_ring) 和 [凯撒密码](https://baike.baidu.com/item/%E6%81%BA%E6%92%92%E5%AF%86%E7%A0%81/4905284)。在这两个例子中，加密算法都是将字母表中的字母进行偏移，而偏移的位数就是对应的密钥。

举个例子，假设我们使用凯撒密码来加密 `SECRET` 这个单词，并且设置密钥为 3， 那我们把字母表进行偏移，使其从第三个字母 `D` 开始。

原本的字母表应该是 `ABCDEFGHIJKLMNOPQRSTUVWXYZ`, 把所有的字母都向前移动 3 位之后， 你会得到 `DEFGHIJKLMNOPQRSTUVWXYZABC` 这样一张字母表。那么你的 `D` 就对应原来的 `A`， `E` 对应原来的 `B`， `F` 对应原来的 `C`， 以此类推。

使用这种方式，原来的明文 `SECRET` 就会被加密成 `VHFUHW`。当你想要某个人能够读懂这段加密文本的时候，只要告诉他你的密钥 `3` 就好了。

很明显，按照今天的标准来讲，这种加密方式弱爆了。但是，大兄弟，这东西对凯撒可太有用了，而且这种方式很清晰的说明了常规加密的原理。

### 密钥管理和传统加密

常规加密有很一些好处，它很快，对于加密那些不需要传输到别的地方去的数据来讲非常有用。但是因为密钥的奋发非常困难，如果使用传统加密方式作为数据安全传输的手段，就会导致成本非常高。

回想一个你最喜欢的谍战片中的一个角色，有这么一个场景：一个人用手铐在手腕上拷这一个公文包。这个公文包里会是什么呢？总之，它不会是导弹发射密码，也不会是生化武器的分子式，也不会是一份入侵计划。而是一个用来解密信息的密钥。

使用传统加密方式进行安全通信的双方，必须在密钥上达成一致，并且需要保证密钥的安全。如果他们处在不同的地理位置，那么他们就必须找到一个能够信任的信使、或是加密电话、或是其他的安全通信媒介来保证密钥在传输过程中不会泄露。任何在传输过程中窃听或者拦截到密钥的人，都可以读取、修改、伪造所有用这个密钥加密或者认证的加密数据。

从 DES 到 午夜船长的解码指环， 传统加密方式一直存在的问题就是：如何在不被拦截的情况下将密钥传输给接收者。

## 公钥加密

公钥加密解决了传统加密存在的问题，公钥加密的概念是由 Whitfield Diffie 和 Martin Hellman 在 1975 年的时候提出来的。（有证据表明，英国特勤局早于 Whitfield Diffie 和 Martin 几年前发明了公钥加密，但是一直把它作为军事机密，也没有产出什么实际价值。[JH Ellis：安全非秘密数字加密的可能性，CESG报告， 1970年1月]）

公钥加密是一种使用一对密钥进行加密的非对称性加密方案：一个用于加密数据的公钥，和一个用于解密数据的私钥（或者叫秘密密钥）。在向全世界公开你的公钥的同时，秘密保存自己的私钥。任何拥有你公钥的人，都可以加密出只有你能够阅读的数据，哪怕这个人见都没见过。

用公钥来推导出私钥在计算上是不可行的。任何拥有公钥的人都能够对数据加密，但却不能解密，只有拥有与之匹配的私钥的人才能解密信息。

![图 1-3 公钥加密](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-49-33-42368366254274787eca7ae3e2c5d8cf-fig1-3-29e78e.gif)

公钥加密最大的好处在于，他允许之前未进行任何安全约定的人安全的交换信息。 之前需要通过安全的方式进行密钥传递的需求不复存在了， 所有的通信只涉及公钥，私钥再也不需要被传递或者分享。 Elgamal（以发明者名字命名：Taher Elgamal）， RSA（以发明者名字命名：Ron Rivest、 Adi Shamir、Leonard Adleman）， Diffie-Hellman（还是以发明者名字命名），还有电子签名算法 DSA（David Kravitz 发明），这些都是公钥加密系统的具体例子。

由于传统加密方式曾是唯一可用的信息安全传输的手段，但是昂贵的安全通道以及密钥分发费用导致只有那些能负担的起的人在用，比如政府和大型银行（或者带着解密指环的小朋友 😂）。 公钥加密是一场将强加密方式带给普罗大众的技术革命。还记得那个手腕上拷着公文箱的间谍吗？ 公钥加密让他失业了（或者这倒也让他解脱了）。

## PGP 工作原理

PGP 结合了传统加密和公钥加密的一些最好的功能， 它算是一个混合型加密系统。 当用户使用 PGP 加密明文的时候， PGP 首先对明文进行压缩。 数据压缩可以节约现代数据传输时间和数据存储空间，更重要的是，它可以加强加密强度。 大多数密码分析技术都是利用明文中发现的模式来破解密码的，压缩减少了明文中的模式，从而显著提升了密码分析的障碍。（太小的文件或者无法被压缩的文件就不压缩了）

![图 1-4 PGP 工作原理](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-49-41-8e88fca69da609db21fdcd0e897eabba-fig1-4-550778.gif)

然后 PGP 会创建一个一次性的会话密钥， 这个密钥是根据你的鼠标的随机移动和键盘按键产生的一个随机数字（所以在生成 PGP key 的时候会要求你动动鼠标动动键盘）。 然后 PGP 会用这个密钥结合一种非常安全且快速的传统加密算法对明文进行加密，加密的结果就是密文了。一旦数据被加密好了，然后这个会话密钥就会用接收方的公钥进行加密，这个公钥加密后的会话密钥就会随着密文一起发送给接收方。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-49-48-4a43c879c0d7efdc0a800f58fd777dcd-fig1-5-62ae64.gif)

两种加密方式的结合，集公钥加密的便捷和传统加密方式的速度于一身。 传统加密方式要比公钥加密快大约 1000 倍左右，而公钥加密反过来又为密钥的的分发和数据传输问题提供了解决方案。两者一起使用，在不牺牲任何安全性的同时，既提高了性能，又改善了密钥分发存在的问题。

## 密钥

密钥是与加密算法配合使用产生特定秘文的一个值。 而密钥基本上都是非常非常大的数字， 密钥的大小是用 `bit` （位）来衡量的，代表1024位密钥的数字超级无敌大。 在公钥加密中， 密钥越大， 密文也就越安全。

然而， 公钥的大小和传统加密方式中的密钥大小是没啥关联的。传统加密方式中的 80 位密钥的强度和 1024 位的公钥没啥差别。 一个 128 位的传统密钥相当于 3000 位的公钥。 同样的， 密钥越大， 安全性就越高， 但是每种加密方式所使用的算法都不尽相同，就想苹果和橘子一样。

尽管公钥和私钥在数学层面是相互关联的，但是仅凭公钥就想推导出私钥是非常困难的，不过如果能够提供充足的时间和算力，推到出私钥也不是不可能。 这就意味着，选择正确的密钥大小非常重要， 足够大的密钥能够保证安全，但是足够小的密钥又能兼顾速度。 此外， 你还需要考虑，谁会尝试去破解你的文件，他们的决心有多大， 他们又有多少时间，以及他们可能会有什么样的资源等等。

较大的密钥会在比较长的一段时间内是加密安全的。 如果你想加密的东西需要隐藏很多年，那你可能需要使用一个非常大的密钥。 当然， 没人能保证在明天的计算机硬件条件下进行破解，你的密钥能坚持多久。 曾经有一段时间，56位对称密钥被认为是非常安全的。

密钥是以加密形式存储的。 PGP 将密钥用两个文件存储在你的硬盘里，一个是公钥，另外一个是私钥。 这些文件被叫做密钥环。 在使用 PGP 的时候，通常会将接收方的公钥添加到公钥环中，你的私钥会存储到你的私钥环中。 若果你把私钥环弄丢了， 那你就没办法解密在该密钥换上加密的任何消息。

## 数字签名

公钥加密的一个主要的好处在于，它提供了一种使用数字签名的方法。 数字签名使得信息的接收者能够验证信息来源的真实性， 也能够验证信息的完整性。 因此，数字签名提供了身份验证和数据完整性验证。 数字签名还提供了不可抵赖性， 这意味着他可以防止发送方声称他实际并没有发送消息。 这些功能于密码学而言，与隐私保护一样重要，甚至更重要。

电子签名和首先签名的作用是一致的，然而手写签名特别容易伪造，在这一点上数字签名就比手写签名厉害了，因为它几乎不可能伪造。 此外，他还可以证明信息的内容和签名者的身份。

有些人更倾向于使用签名而不是做加密，比如： 你应该不太会关心是否有人会知道你往自己的银行账户里面存如了 1000 元， 但是你肯定要确定的是跟你打交道的那个人是银行出纳。

数字签名的基本方式如图 1-6 所示， 跟数据加密时使用别人的公钥进行加密信息不一样的是，数字签名的时候，你使用的是自己的私钥对数据进行加密。如果别人收到的消息能用你的公钥进行解密，那么这个消息必然是你发出去的。

![图 1-6 简单数字签名](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-53-47-6d0464a3ceac7d2846acc71f63747706-fig1-6-5f460e.gif)

### 哈希函数

上述的签名系统其实存在一些问题， 太慢了， 而且会产生大量的数据（至少会是原有信息的两倍大小）。 而对上述方案进行改进的方式，是在过程中添加一个单向的哈希函数。 一个单向的哈希函数接收可变长度的数据作为输入（比如一条任意长度的消息，甚至超过上千或上百万位），然后会产生一个固定长度的输出，比如 160 位。 哈希函数能够确保的是，如果输入的信息发生变化，哪怕是只变化一位，也会产生一个完全不一样的输出。

PGP 对用户签名的明文使用的是强加密的哈希函数， 这样就会产生一个固定长度的数据，可以理解为数据摘要（再次强调， 任何变化都会导致输出的数据摘要完全不一样）。

然后 PGP 会使用数据摘要和私钥创建最终的“签名”。 在发送数据的时候， PGP 会将签名和明文一起发送，在接收方接收到消息之后， 再次使用 PGP 对明文提取摘要信息，这样就能对签名进行验证。 PGP 可以加密明文也可以不加密， 如果一些接收方对信息不感兴趣或者他们自身无法验证签名，那么对明文签名是很有用的。

一旦使用了安全的哈希函数， 把一个人的签名从一个文档中拿到另一个文档中， 或是修改一个已经签名过的信息，都不再可能了。即使是对已经进行过签名的文档进行再小的修改都会导致数字签名验证失败。

![图 1-7 安全的数字签名](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-53-58-f10848bd340a8c94634ea9612e662471-fig1-7-7fce08.gif)

数字签名在鉴权和验证其他 PGP 用户的密钥方面发挥着重要作用。

## 数字证书

公钥加密系统存在的一个问题是， 用户必须时刻保持警惕， 确保使用的是正确的人的密钥进行加密。 在通过公共服务器自由交换密钥这种安全的环境中，中间人攻击是一个潜在的威胁。 在这种攻击中， 有人会发布带有目标收件人用户名称和 ID 的假密钥，原本要正确发送的加密数据现在就会被假密钥的所有者截获。

在一个公钥环境中，确认你加密所用的公钥属于你的目标接收人这件事至关重要， 你可以使用通过物理途径转交给你的密钥进行加密，但是问题在于，假设你需要和那些你从素未谋面的进行通信，你有怎么能够保证你拿到的密钥是正确的呢？

数字证书，或者简称为证书， 简化了确认公钥是否真正属于所谓的所有者这件事情。

证书是凭证的一种形式， 比如你的驾驶证，或者你的社保卡，再或者你的出生证明。 所有的这些，每一个上面都有一些用来识别你身份的信息，或者用来证明其他人已经确认过你的身份。 还有一些证书（如护照或者身份证），他们是非常重要的身份证明， 你不会想丢失他们， 以免有人来冒充你的身份。

数字证书其实是和物理证书功能类似的数据。 数字证书中包含公钥信息，可以帮助其他人来确认这个公钥是真实有效的。 数字证书可以用来阻止心怀不轨的人用其他的公钥来假冒别人的公钥。

一个数字证书由三部分组成：

* 一个公钥
* 一个证书信息（标识用户身份的信息，比如用户名或者用户 ID）
* 一个或多个数字签名

数字证书中的数字签名的目的是为了表明证书信息已经由某个人或者机构进行过证明。 数字签名不能证明整个证书的真实性， 它能保证的只有一件事儿， 那就是证书中的身份信息和公钥是一起的或者说是绑定的。

因此， 证书基本上算是一个公钥， 附带一种或者两种的 ID 信息， 再加上来自其他受信任的个体的印章。

![图 1-8 PGP 证书图解](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-54-05-78d456422ba570120e786a4d5085e831-fig1-8-a4a08d.gif)

### 证书颁发

证书会被用在和需要其他人进行公钥交换时。 对于希望进行安全通信的小组织来讲， 手动交换包含每个所有者公钥的存储器或者 email， 其实都是很容易的。 这个算是手动的公钥分发，但是具有一定的局限性。 除此之外， 必须提供一个具备安全性，存储和交换机制的系统，以便协同工作者、业务伙伴或者陌生人可以在有需要的时候通信。这个事情，可以通过一种只提供存储形式仓库的服务器进行，这种被称为证书服务器，也可以通过更加结构化的系统来做， 这种具备多密钥管理功能系统被称为公钥基础设 Public Key Infrastructures（PKIs）。

#### 证书服务器

证书服务器，也可以被称作密钥服务器， 是一个允许用户进行证书存储和提取的数据库。 证书服务器一般都会提供一些管理功能， 以便公司能够进行安全策略的维护（比如： 尽存储那些满足要求的密钥）。

#### 公钥基础设施（PKI）

PKI 包含证书服务器的证书存储设备，并且提供证书管理功能（颁发、撤销、存储、检索以及信任证书的能力）。PKI 的主要功能是引入了所谓的证书颁发机构（Certification Authority），或者可以叫 CA，这个机构是一个已经向他们的用户颁发了证书的人类实体、或者叫人类组织（一个人、一个组织、一个部门、一个公司或者一个社团都有可能。 CA 的角色，就像是一个政府的护照办公室）。 CA 会创建证书并使用 CA 的私钥对其进行数字签名。 因为 CA 有着创建证书的角色， 所有它是 PKI 的核心组成部分。

使用 CA 的公钥， 任何想要去验证证书真实性的人都能去验证 CA 的数字签名， 从而验证证书内容的完整性（最重要的是公钥和证书持有者的身份）。

### 证书格式

数字证书基本上算是一组表示信息，他们与公钥绑定在一起，由可信任的第三方签名，用来证明公钥的真实性。
数字证书可以是众多不同格式中的一种。

PGP 可以识别一下两种不同格式的证书：

* PGP 证书
* X.509 证书

#### PGP 证书格式

一个 PGP 证书包含但不限于如下这些信息：

* **PGP 版本号** —— 这个用来标识创建和证书关联的密钥的 PGP 的版本号
* **证书持有者的公钥** —— 密钥对的公钥部分， 还有密钥的算法： RSA、DH、DSA
* **证书持有者的信息** —— 由用户的身份信息组成，比如用户的姓名、 ID、照片等
* **证书所有者的数字签名** —— 这个也称为自签， 使用的是这个证书中包含的公钥所对应的私钥完成的签名
* **证书的有效期** —— 证书的开始和过期日期
* **证书的首选对称性加密算法** —— 表示证书拥有者希望对信息进行加密的加密算法。 支持的算法有 CAST、IDEA 或 Triple-DES。

你可以将 PGP 证书想象成是带有一个或者多个标签的公共密钥（参见图 1-9）。 在这些标签上， 你会发现密钥所有者的信息标识以及密钥所有者的签名， 这个标签能够表明密钥和信息标识是对应的。（这种特殊的签名叫做自签， 每个 PGP 证书中都包含 一个自签）

PGP 证书格式比较特别的一点是单个证书可以包含多个签名。 几个或者很多人会对“密钥-身份”对进行签名，以证明他们可以确保这个公钥绝对数据特定的拥有者。 如果你查看公共证书服务器，你可能会注意到某些证书（比如 PGP 创始人 Phil Zimmermann 的证书）， 里面就包含了很多签名。

一些 PGP 证书由一个公钥和一组标签组成， 每个标签上都使用不同的方式来标识密钥的所有者（例如： 所有者的姓名和企业邮箱账户， 所有者的昵称和家庭邮件账户， 所有者的照片， 都在同一个证书里）。 而每个标签的签名列表又可能不一样， 签名证明的是其中某一个标签是属于公钥这件事儿， 而不是证明这个密钥相关的所有标签的真实性。（请注意： 注意，在观察者严重，“真实”是相对而言的，签名是一种观点，不同的人在签署密钥前会对其真实性进行不同程度的尽职调查）

![图 1-9 一个 PGP 证书](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-54-12-86133581df82120d0e0f659a77ba29b8-fig1-9-f12ccb.gif)

#### X.509 证书格式

X.509 是另外一种非常常见的证书格式。 所有 X.509 证书均符合 ITU-T X.509 国际标准，因此，从理论上来讲， 为一个应用程序创建的 X.509证书可以被所有符合 X.509 标准的程序使用。 然而，在实践中，各家公司已经为 X.509 证书做了自己相应的扩展，并不是所有的扩展都能一起使用的。

证书要求有人进行对公钥和密钥的所有者的对应关心进行验证， 使用 PGP 证书， 所有人都可以承担验证者的角色。 而对于 X.509 证书， 验证人员始终是证书颁发季候或者 CA 指定的人员。 （请记住，PGP 证书完全支持使用 CA 验证证书的层次结构）。

X.509 证书是一组标准字段的集合， 这些字段包含关于用户或设备的信息及其对应的公钥。 X.509 标准定义了证书包含的信息，并描述了如何对其进行编码(数据格式)。 所有X.509证书都有以下数据：

* **X.509 版本号** —— 标识该证书适用的 X.509 标准版本，这会影响包含在证书中的信息。 最新版本是 3
* **证书持有者的公钥** —— 证书持有者的公钥，还有标识该密钥属于哪个密码系统的哪个算法的信息，还有一些相关的密钥参数。
* **证书编号** —— 创建证书的实体(应用程序或个人)负责为证书分配的惟一序列号，以区别于同机构颁发的其他证书。这些信息被用在许多方面， 例如， 当一个证书被撤销时，它的序列号会被放进证书撤销列表（Certificate Revocation List - CRL）中。
* **证书持有者的唯一标识** —— （或者叫Distinguished Name)。 这个名称是为了在互联网上进行区分的唯一标识。 一个 DN 会有多个子节点， 看起来会是这样：

    ```bash
    CN=Bob Allen, OU=Total Network Security Division, O=Network Associates, Inc., C=US
    ```

    通用名称（Common Name - CN）、组织单位（Organizational Unit - OU）、组织（Organization - O）和国家（Country - C）。

* **证书有效期** —— 证书的开始和过期日期
* **证书发行者的数字签名** —— 使用颁发证书的人的私钥进行的签名。
* **签名算法标识** —— 标识 CA 签名该证书时使用的签名算法

X.509 证书和 PGP 证书之间与很多不同， 但是最显著的区别如下：

* PGP 证书你可以自己创建，但是 X.509 证书你必须向 CA 申请后颁发给你。
* X.509 证书本身只支持单个名字
* X.509 证书只支持单个数字签名来证明密钥的有效性

要获得 X.509 证书，必须向 CA 请求颁发证书， 你提供你的公钥， 并且证实你拥有与之匹配的私钥，还需要提供一些关于你自己的的特定信息， 然后再对这些信息进行整体数字签名， 并且将信息打包发送给 CA。 CA 随后会进行一些调查，验证你提供的信息的准确性， 如果准确， 就会生成证书， 然后返回给你。

有没有感觉 X.509 证书就像一个标准的纸质证书一样 (类似于你在上完大学之后拿到的学位证)，证书上贴着一个公钥。上面有你的名字和一些关于你的信息，还有证书颁发者的签名。

![图 1-10 一个 X.509 证书](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-54-21-fe0f663108f568873b70d195fae8c4cd-fig1-10-e36f7d.gif)

当今 X.509 证书使用最广泛的用途是在Web浏览器中。

## 有效性和信任

在公钥系统中，每个用户都很容易受到假密钥的困扰。 有效性是指对公钥证书属于声称其所有者这件事儿的信心。 在公钥环境中， 有效性及其重要， 在这种环境中， 你必须不断的确认某个证书的真实性。

当你自己确信某个证书确实属于某个人时， 你可以在你的密钥环上对其副本进行签名， 以证明你已经检查过了这个证书， 并且已经证实这个证书的真实性。 如果你想让其他人知道你已经给这个证书盖上了自己的认证印章， 那么你就可以把签名导出到证书服务器上， 这样别人也就能看到了。

在 [PKI](#公钥基础设施（PKI）) 一节中， 我们已经说过， 一些公司会指定一个或多个证书颁发机构（CAs）来表示证书的有效性。 在使用 X.509 证书的 PKI 的组织中， 向用户颁发证书是 CA 的工作（通常需要响应用户对证书的请求）。 在使用 PGP 证书而没有 PKI 的组织中， CA 的工作是检查所有 PGP 证书的真实性， 然后对已经认证过的证书进行签名。 总的来讲， CA 的主要目的就是将公钥和证书中包含的标识信息进行绑定， 从而向第三方保证证书的有效性（已经采取了一些谨慎的措施，来确保这件事情）。

CA 是组织中验证工作的权威， 或者可以说大家都信任的人， 在一些组织中， 比如使用 PKI 的组织， 如果证书没有被受信任的 CA 进行签署， 那么这个证书就不会被视为有效。

### 有效性检查

建立有效性的手段之一是通过一些手动的处理。 有好几种方法可以完成这个操作， 你可以要求指定的接收者亲自将其公钥的副本交给你（通过物理途径）， 但是这样显然很不便，效率非常低。

另外一种方式就是手动检查证书的指纹， 就像每个人的指纹都是唯一的一样， 每个 PGP 证书的指纹也是唯一的。 指纹是用户证书的哈希值， 作为证书的属性之一。 在 PGP 中， 指纹会显示为十六进制的数字或者以一系列所谓的生物特征词的形式出现， 他们在语音学上是不同的， 用于指纹识别过程会更容易一些。

你可以通过打电话给证书的所有者（以便交流），要求他给你提供他密钥的指纹， 然后进行指纹对比，来验证证书的有效性。 这种方法只在你认识证书所有者的时候有效， 但是如果所有者你不认识怎么办？ 有些人把指纹印在名片上就是为了这个。

另外一种给证书提供有效性的方式是相信第三方已经完成了证书的验证。

例如： CA 负责确保在证书颁发之前， 他会自习检查证书， 确保公钥确实属于证书的所有者， 信任 CA 的任何人都会默认的认为有 CA 签名的任何证书都是有效的。

检查有效性的另一个方面是确保证书没有被撤销。有关更多信息，请参见[证书撤销](#证书撤销)一节。

### 建立信任

你验证证书， 你信任别人。 更具体的说， 你信任他人来验证别人的证书。 通常情况下， 除非证书所有者亲手把证书交给你， 否则你就必须通过别人的话来判断证书的有效性。

#### 元介绍者和受信赖的介绍者

在大多数情况下， 人们完全信任 CA 来确认证书的有效性。 这意味着其他所有人都依赖于 CA 来完成整个手动验证的过程。 对于一定数量的用户或者工作地点来说， 这都是可以接受的。 但是在一定的量级之后， 维持相同的验证品质对于 CA 来讲就不太可能了。 所以在这种情况下， 必须想系统添加其他验证者。

CA 也可以是一个元介绍者。 一个元介绍者不仅能赋予密钥有效性， 他还能赋予其他人信任密钥的能力。 就像一个皇帝可以把玉玺交给他信任的顾问，让他们按照他的权威行事一样。 元介绍者也能让其他人成为可信赖的介绍人， 这些受信任的介绍者可以进行密钥验证， 可以达到和元介绍者相同的效果。 但是， 他们无法创造新的可信赖的介绍者， 只有元介绍者可以这么干。


元介绍者（Meta-Introducer）和受信赖（Trusted Introducer）的介绍者都是 PGP 的术语。 在 X.509 证书环境中， 元介绍者被称为根证书颁发机构（Root CA）， 而受信赖的介绍者被称为证书颁发机构的下属。

根 CA 使用与被称为根 CA 证书的特殊证书类型相关联的私钥怼证书进行签名。 由根 CA 证书签署的任何证书都被根证书签署的其他证视为有效。 这个验证过程甚至适用于系统中其他 CA 签署的证书， 只要根 CA 证书签署了下级 CA 的证书， 则由 CA 签署的任何证书都被视为对整个体系中的所有其他证书有效。 通过对系统进行检查以查看谁签署了谁的证书的过程称为跟踪证书，或者证书链。

### 信任模型

在相对封闭的系统中， 比如一个小公司中， 追踪证书到根 CA 很容易。 但是， 用户必须经常与公司环境之外的人进行沟通， 其中就包含他们从未见过的人， 比如供应商啊、客户、客户的同事等等。 对那些未被你的 CA 进行验证的或者说信任的人， 简历信任关系是非常困难的。


公司遵循这样或那样的信任模型， 信任模型规定了用户将如何简历证书的有效性，有三种不同的模型：

* 直接信任
* 分级信任
* 信任网

#### 直接信任

直接信任是最简单的信任模型。 在这种模型中， 用户相信密钥是有效的，因为他知道密钥的来源。 所有的加密系统都以某种方式使用这种形式的信任。 比如， 在浏览器中， 根 CA 的密钥是直接被信任的， 因为它们是由制造商提供的。 如果存在任何形式的层次结构， 那都是从这些直接信任的证书扩展而来的。

在 PGP 中，自己验证密钥并且从不把另外一个证书设置为受信任的介绍者的用户使用的就是直接信任。

![图 1- 11 直接信任](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-54-30-02ff965bf090cb92e27e95f8b8c21188-fig1-11-e19699.gif)

#### 分级信任

在一个分级系统中， 存在许多“根”证书， 信任可以从这些证书中进行扩展。 这些证书可以自己对自己进行认证，也可以对在他们的链路上的认证其他证书的证书进行认证。 我们可以把它认为是一棵巨大的“信任”树， “叶子”证书的有效性是通过向上追踪来是实现的，一直向上找，直到找到一个受信任的根证书为止。

![图 1-12 分级信任](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-54-39-0eca2896c6ea9f26d215d10b10ba8a30-fig1-12-1c79e7.gif)

#### 信任网

信任网包含了其他两种模型， 但也增加了信任是在旁观者眼中的这个概念（这是现实世界的观点），和信息越多越好的概念。 因此，它是一个累积信任的模型， 一个证书可以直接受信任，或者在某个链中受信任，该链最顶层是一个直接受信任的根证书(元介绍者)，或者由某个介绍者组受信任。

也许您听说过“六度分离”（six degrees of separation）这个术语，它表明世界上任何人都可以使用六个或更少的其他人作为中介来确定与世界上任何其他人的某种联系。 这是一张介绍者的网。

这同样也是 PGP 对信任的看法。PGP 使用数字签名作为它的介绍形式。当任何用户签署另一个密钥时，他或她就成为该密钥的介绍人。随着这个过程的进行，它建立了一个信任的网络。（也就是说，只有当你认为我是一个值得信任的介绍人，你才会相信我关于别人钥匙真实性的看法。 否则，我对其他钥匙有效性的看法就没有意义了。）

存储在每个用户的公钥环上的是如下信心的指示器：

* 用户是否认为特定的密钥有效
* 用户对密钥的信任程度，密钥的所有者可以作为其他人密钥的证明者

你在你手中我的钥匙副本上，指出你是否认为我的判断很重要。 这是一个真正的声誉系统: 某些人被认为能给出好的签名，人们相信他们能证明其他密钥的有效性。

#### PGP 信任等级

对密钥的最高信任级别（隐式信任）是对自己的密钥对的信任。 PGP 假定，如果你拥有私钥，则必须信任其相关公钥的操作。 由你隐式信任的密钥签名的任何密钥均有效。

你可以为其他人的公钥分配三种信任级别：

  * 完全信任
  * 边缘信任
  * 不信任

让人困惑的是， 有效性，其实也有三个级别：

  * 有效
  * 边缘有效
  * 无效

将他人的密钥定义为受信赖的介绍者，你

  1. 从一个有效的密钥开始， 该密钥可以是
     * 由你签名的 或者是
     * 由其他受信赖的介绍者签名的
      然后
  2. 为密钥所有者设置你认定的有资格获的信任等级

例如， 假设你的密钥环上包含了 Alice 的密钥。 你已经验证了 Alice 的密钥，而且通过签名的方式进行了标记。 你知道 Alice 的品质满足完全满足验证其他人密钥的要求， 因此， 你将她的密钥标记为完全信任。 这就让 Alice 变成了一个 CA。 如果 Alice 在其他人的密钥上进行签名， 那这个人在你的密钥环上也会显示为有效。

PGP 需要一个完全受信任的签名或者两个边缘信任的签名才能认定密钥的有效性。 PGP 认为两个边缘信任等同于一个完全信任就像商人要求两种形式的ID。 你可能会认为 Alice 值得信赖，同时也认为 Bob 值得信赖。 其中任何单独一个人都有意外签署伪造密钥的风险，因此您可能不会完全信任其中任何一个， 但是，两个人一起签署相同假密钥的可能性很小。

## 证书撤销

证书只有在有效时才有用。 简单的假设一个证书永久有小是不安全的。 在大多数组织和所有的 PKI 中， 证书的有效期是有限制的。 这就限制了发生证书泄露时系统的脆弱期。

因此， 证书都是以有计划的有效期进行创建的： 有`开始日期/时间`和`结束日期/时间`。 证书在这个时间段内都可以使用。 证书过期后，就不再有效了， 因为无法确保密钥和标识信息对的真实性。 （这个证书仍然可以安全的用于重新确认在有效期内进行加密或者签名的信息， 但是新的加密任务或者签名任务就不应该信任这个证书了）

在一些情况下， 需要在证书到期前让其失效， 比如当证书持有者终止了与公司的雇佣关系或者怀疑证书对应的私钥已经泄露的时候。 这被成为证书撤销， 被撤销的证书比过期证书更可疑， 过期的证书虽然不可用， 但是不会带来和撤销证书同样的威胁。

任何签署了证书的人都可以撤销其在证书上的签名（前提是他要使用和当时签名相同的私钥）。 撤销签名表示签名者已经不再信任公钥和表示信息的对应关系， 或者证书的公钥已经被破坏了。 撤销签名和撤销证书的严重性是相同的。

在 X.509 证书中， 撤销签名实际上和撤销证书是一样的， 因为证书上唯一的签名就是时期生效的 CA 的签名。 PGP 证书提供了附加功能， 如果你觉得证书已经被破坏了， 那你可以撤销你的整个证书（ 而不仅仅是撤销上面的签名）

只有证书的所有者（对应私钥的持有者）或者被证书所有者指定为撤销者的人可以撤销 PGP 证书。 （指定撤销者是一种有用的做法， 因为丢失证书对应的私钥的密码会导致证书所有者撤销自己的证书， 但是这个只有在他能访问自己的私钥的时候能这么做） 只有证书的颁发者才能撤销 X.509 证书。

### 通知证书已经被撤销

当证书被撤销后， 一定要让证书的潜在用户知道这个证书不在有效。 对于 PGP 证书，传达证书一杯撤销最常见的方法就是将其发布到证书服务器上，以便警告其他希望于你通信的人不要使用这个证书。

在 PKI 环境中， 最常见的方式是通过 CA 发布的被称为撤销列表（CRL）的东西来实现撤销通告。 CRL 包含系统中所有未过期但是已被撤销的证书的列表。 被撤销的证书只在其过期之前保留在这个列表中， 等到过期之后会将其删除，这样可以防止列表过长。

CA 会按照一定的计划周期向用户分发 CRL，从理论上讲， 这可以防止用户在不知情的情况下使用受损的证书。 但是， 用户可能会在两次 CRL 分发时间之间有的一段时间内使用受损的证书。

## Passphrase 是什么？

大部分人都熟悉通过密码来限制对计算机系统的访问， 密码是用户键入的作为标识码的唯一字符串。

Passphrase 是加长版本的 Password， 而且理论上，Passphrase 会更安全一些。 Passphrase 通常是有多个单词组成的， 因此可以更有效的抵挡标准的字典爆破攻击。 最佳的 Passphrase 相对较长而且比较复杂， 一般是包含大小写字母、数字和标点符号的组合。

PGP 使用的就是 passphrase 对你机器上的密钥进行加密的。 你的密钥会使用你的 passphrase 的哈希值进行加密。 然后你可以使用你的 passphrase 对私钥进行解密， passphrase 对你来讲应该设置那种很难忘记的，而且要很难被别人猜到。 应该找那种已经根植于你记忆当中的内容， 而不是那种你现想的然后尝试将其记住。 因为 ***如果你忘记了你的 passphrase， 那就太不走运了***， 没了 passphrase， 你的密钥就废了， 啥事儿也干不了了。 还记得本文前面的介绍吗？ PGP 是用来防止政府查看你文件的加密技术， 当然它也会让你自己看不了你的文件， 当你决定把自己的密码改成一个笑话的时候，你得注意，你很可能会永远忘记它。

## 密钥分持

俗话说的好， 如果一个秘密被一个以上的人知道了，那它就再也不是秘密了。 将私钥进行共享也是如此， 尽管不建议这么做， 但是有时候又不得不进行私钥对共享。 比如， 公司的签名密钥是公司用来签署法律文件、敏感的人员信息或者验证新闻稿的真实性。 在这种情况下， 公司就会有很多人可以使用公司的私钥， 但是这也意味着另一件事儿， 就是任何个人都能完全代表公司行事。

在上面这种情况下， 明智的做法就是讲密钥分配给多个人， 这样一来， 超过一两个以上的人必须出示一部分密钥才能使密钥处于可用状态， 如果出示的可用密钥太少， 那么密钥整体就不可用了。

一些人则是将密钥拆分成三部分， 并且要求其中两个来构成密钥， 或者分成两部分， 而且同时需要两个来组成密钥。 如果在充足的过程中使用的是安全的网络连接， 则出示密钥的人就不需要亲自到场来组合密钥了。
</content:encoded></item><item><title><![CDATA[设计 MongoDB Schema 的 6 条经验准则：Part 3]]></title><description><![CDATA[作者：MongoDB 首席技术支持工程师 William Zola 这将是我们在 MongoDB 中建立“一对多”关系的最后一站。[[设计-MongoDB-Schema-的-6-条经验准则-Part-1]]中，我跟大家介绍了设计“一对多”关系的三种基本方式。在[[设计…]]></description><link>https://wizd.dev/设计-MongoDB-Schema-的-6-条经验准则-Part-3/</link><guid isPermaLink="false">https://wizd.dev/设计-MongoDB-Schema-的-6-条经验准则-Part-3/</guid><pubDate>Wed, 22 Jul 2020 17:45:10 GMT</pubDate><content:encoded>![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-39-37-bcdc910ae36e1e705a6de04aade00f6c-mongodb-b61c9d.jpg)

作者：MongoDB 首席技术支持工程师 William Zola

这将是我们在 MongoDB 中建立“一对多”关系的最后一站。[[设计-MongoDB-Schema-的-6-条经验准则-Part-1]]中，我跟大家介绍了设计“一对多”关系的三种基本方式。在[[设计-MongoDB-Schema-的-6-条经验准则-Part-2]]中，我对这些基本方式做了一些扩展：双向引用和非规范化数据存储。

非规范化数据存储可以让你避免使用一些应用程序级别的连接查询，但更新的时候却更复杂，性能开销更大。非规范化存储一个或多个字段只有在读取操作的频率远高于更新操作时才有意义。

## 哇，瞧瞧这些选择

好，我们先回顾一下：

* 你可以嵌入，或者从“一”那一端做引用，或者从“多”那一端做引用，或者结合这两种技术。
* 你可以将任意多个字段非规范化存储到“一”端或者“多”端。

特别是非规范化存储，给了你很多选择：如果在一个关系中有8个备选的内容做非规范化存储，那么你就有 2&lt;sup&gt;8&lt;/sup&gt;(256) 种不同的方法去做非规范化存储（也包括完全不进行非规范化存储）。在加上还有 3 种不同的引用方式，我们就可以乘以 3 ，也就是说我们有超过768中不同的关系建模方式。

你猜怎么着？ 现在，你已经陷入了“选择悖论”中。因为你有许多潜在的方式来进行建模“一对N”关系，因此如何建模，选择变得更加困难，而且难得多。

## 经验法则

这里有一些经验法则来指导你完成这些不可数(但不是无限)的选择。

* **一**：使用嵌入，除非有非常明显的原因不能这么做
* **二**：如果你需要访问一个对象本身，这就是一个把他做嵌入的理由
* **三**：数组不应该无限制的增长，如果“多”的那一边有超过几百个以上的文档，那就不要嵌入；如果在“多”的那一边有数千个文档，那就不要使用 `ObjectID` 数组引用。高基数的数组是不嵌入的强依据。
* **四**：别担心使用应用程序级别的数据连接，如果你正确的建立了索引并且使用了投影说明符，那么应用程序级别的连接其实只比关系数据库中的连接性能低一点点。
* **五**：在做非规范化存储的时候，一定要考虑读写比。一个字段如果非常频繁的被读取而又很少被更新，那么这个字段就适合被非规范化存储。如果你对一个更新非常频繁的字段做了非规范存储，那么查找和更新所有实例的性能开销其实已经抵消了非规范化存储带来的优化。
* **六**：在 MongoDB 中，数据建模的方式完全取决于特定应用程序的数据访问模式。你应该设计正确的数据结构来匹配你应用程序中对数据查询和更新的方式。

## 给你的指南

当你在 MongoDB 中进行“一对多”关系建模的时候，你有非常多的选择，所以你需要仔细的思考你的数据结构。你需要思考的主要准则如下:

* 你的一对多关系的技术是什么? 一对几个？一对很多？一对超级多？
* 你需不需要独立的访问“多”端的数据，还是说他只需要存在于父对象的上下文里？
* 对于特定字段来讲，他的读写比例是啥样的？

你做数据结构的主要选择是：

* 对于“一对几个”来讲，你可以直接用数组嵌入
* 对于“一对多个”来讲，或者在“多”端的数据必须独立的情况下，应该使用数组引用。你也可以在“多”端使用父引用，如果它能够优化你的数据访问模式。
* 对于“一对超级多”来讲，你应该在“多”端的文档中使用父引用。

一旦确定了数据的整体结构，就可以选择对数据进行非规范化存储，当然如果你选择这么做的话，不论是把“一”非规范化存储到“多”，还是把“多”非规范化存储到“一”，都可以。但是你应该只对读取频率远大于更新频率的字段进行非规范化存储，而且这个字段不要求个别严格的一致性，因为更新一个非规范化存储的字段会比较慢，而且新能开销更大，并且不是原子性的。

## 生产力和灵活性

总而言之，MongoDB 使你能够设计数据库架构以匹配应用程序的需求。 你可以在 MongoDB 中构建数据，他能轻松适应变化，并支持充分利用应用程序的性能进行所需的查询和更新。
</content:encoded></item><item><title><![CDATA[设计 MongoDB Schema 的 6 条经验准则：Part 2]]></title><description><![CDATA[作者：MongoDB 首席技术支持工程师 William Zola 这是我们[[设计-MongoDB-Schema-的-6-条经验准则-Part-1]]的第二站。在上一部分中，我们介绍了三种基本的 Schema 设计：嵌入、子引用、父引用。我们还介绍了选择这三种模式的两种因素：…]]></description><link>https://wizd.dev/设计-MongoDB-Schema-的-6-条经验准则-Part-2/</link><guid isPermaLink="false">https://wizd.dev/设计-MongoDB-Schema-的-6-条经验准则-Part-2/</guid><pubDate>Sat, 18 Jul 2020 12:16:10 GMT</pubDate><content:encoded>
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-39-52-56f9d07a30d9bfc238f9ab56db7fd345-mongodb-3e2fab.jpeg)
作者：MongoDB 首席技术支持工程师 William Zola

这是我们[[设计-MongoDB-Schema-的-6-条经验准则-Part-1]]的第二站。在上一部分中，我们介绍了三种基本的 Schema 设计：嵌入、子引用、父引用。我们还介绍了选择这三种模式的两种因素：

- **_一对多_**关系中，**_多_**的那一部分需要需要作为独立的实体存在？
- **_一对多_**关系的基数（cardinality）是什么？是一对几？还是一对很多？还是一对超级多？

有了这些基础的支撑，接下来我就可以跟大家介绍更加复杂的 Schema 设计方式，其中包括双向引用和非规范化存储。

## 中级：双向引用

如果你想更花哨一些，你可以将两种技术结合起来，在你的 Schema 中同是包含两种风格的引用，既有一对多的引用（子引用），也有多对一的引用（父引用）。

我们还是回到之前那个任务追踪系统的例子。我们有一个 `people` 集合来存储 `Person` 文档，有一个 `task` 集合来存储 `Task`，并且 `Person` 和 `task` 是一对多的关系。任务追踪系统需要追踪每一个人的所有任务，所以我们需要在 `Person` 中做一个 `Task` 的子引用。

在添加了一个对于 `Task` 文档的引用数组之后，单个的 `Person` 文档可能长这样：

```bash
db.person.findOne()
{
    _id: ObjectID(&quot;AAF1&quot;),
    name: &quot;Kate Monster&quot;,
    tasks [     // array of references to Task documents
        ObjectID(&quot;ADF9&quot;),
        ObjectID(&quot;AE02&quot;),
        ObjectID(&quot;AE73&quot;)
        // etc
    ]
}
```

另一方面，在程序里某些上下文中，我们需要展示一个任务列表（举个例子，一个多人项目中的所有任务）并且需要快速的找出每项任务的负责人。其实我们可以通过在 `Task` 文档中额外添加对 `Person` 的引用来优化这个查询效率。

```bash
db.tasks.findOne()
{
    _id: ObjectID(&quot;ADF9&quot;),
    description: &quot;Write lesson plan&quot;,
    due_date: ISODate(&quot;2020-04-01),
    owner: ObjectID(&quot;AAF1&quot;) //Reference to Person document
}
```

这种设计具有**_一对多_**的所有的有点和缺点，但是多了一些功能。在 `Task` 文档中添加一个额外的 `owner` 引用，意味着可以更加快捷和方便的找到任务的负责人，但是同时也意味着当你在重新分配任务给其他人的时候，你需要执行**两次**更新，而不是一次。
具体来讲，你将需要更新两个引用，一个是 `Person` 对 `Task` 的引用，另一个是 `Task` 对 `Person` 的引用。（对于正在阅读本文的关系专家来说——您是对的，使用这种模式设置意味着不再可能通过一次原子更新。这对于我们的任务跟踪系统来说是可以的：您需要考虑这是否适用于您的特定用例。）

## 中级：“一对多”关系中的的非规范化存储

除了对各种关系进行建模之外，你还可以在你的 `Schema` 中添加非规范化存储。在某些情况下，这个可以避免进行应用程序级别的链接查询，但是这样做的代价就是会在执行更新的时候增加复杂度。下面的例子能够很好的说明这个问题。

### “多到一”中的非规范化存储

在我们之前提到的商品部件的例子中，你可以将可替换部件的 `name` 进行非规范化存储，放到 `parts[]` 数组中。 下面是之前没有进行非规范化存储的代码，给大家参考。

```bash
&gt; db.products.findOne()
{
    name : &apos;left-handed smoke shifter&apos;,
    manufacturer : &apos;Acme Corp&apos;,
    catalog_number: 1234,
    parts : [     // array of references to Part documents
        ObjectID(&apos;AAAA&apos;),    // reference to the #4 grommet above
        ObjectID(&apos;F17C&apos;),    // reference to a different Part
        ObjectID(&apos;D2AA&apos;),
        // etc
    ]
}
```

非规范化存储意味着在需要显示商品所有部件名字的时候，不需要进行应用程序级别的连接查询，但是在你需要可替换部件的其他信息的时候，你仍然需要进行链接查询。

```bash
&gt; db.products.findOne()
{
    name : &apos;left-handed smoke shifter&apos;,
    manufacturer : &apos;Acme Corp&apos;,
    catalog_number: 1234,
    parts : [
        { id : ObjectID(&apos;AAAA&apos;), name : &apos;#4 grommet&apos; },         // Part name is denormalized
        { id: ObjectID(&apos;F17C&apos;), name : &apos;fan blade assembly&apos; },
        { id: ObjectID(&apos;D2AA&apos;), name : &apos;power switch&apos; },
        // etc
    ]
}
```

虽然这样使得我们获取部件名称更加容易，但是这会给应用程序级别的连接查询增加一些工作：

```bash
// Fetch the product document
&gt; product = db.products.findOne({catalog_number: 1234});
  // Create an array of ObjectID()s containing *just* the part numbers
&gt; part_ids = product.parts.map( function(doc) { return doc.id } );
  // Fetch all the Parts that are linked to this Product
&gt; product_parts = db.parts.find({_id: { $in : part_ids } } ).toArray() ;
```

非规范化存储可以提升对非规范化数据的查询效率，但是同样也增加了在更新数据是开销：如果你把 `Part` 的 `name` 非规范化存储到了 `Production` 文档中，那么当你进行部件 `name` 更新的时候，你就必须更新 `Product` 文档中 `parts` 数组中每一个出现当前 `name` 的位置。

只有在读取操作的比例远大于更新操作时，非规范存储才会有意义。如果非常频繁的读取数据，但是更新的频率却很低，那么这个时候为了让查询更加高效，导致更新操作变慢和复杂是值得的。但是随着更新操作相对读取操作的频率逐渐提升，非规范化存储带来的受益也会逐渐减少。

举个例子：假设部件的 `name` 很少会发生变更，但是部件的数量更新却很频繁，那这就意味着，将部件名称进行非规范化存储是有意义的，但是将数量进行非规范化存储就没啥意义了。

同样你也需要注意一点，当你拥有一个非规范化存储的字段的同时，你也失去了对这个字段进行原子更新和独立更新的能力。就想我们上面讲的`双向引用`的例子一样，如果你更新了 `Part` 文档中的部件名称，然后又更新了 `Product` 文档中的部件名称，那么在两次更新之间就有一定的时间差，而在这段时间差内，`Product` 文档中的部件名称和 `Part` 文档中的部件名称就会有差异（Part中是新值，而Product中是旧值）。

### “一到多”中的非规范化存储

你也可以将`一`的内容非规范化存储到`多`的字段中：

```bash
&gt; db.parts.findOne()
{
    _id : ObjectID(&apos;AAAA&apos;),
    partno : &apos;123-aff-456&apos;,
    name : &apos;#4 grommet&apos;,
    product_name : &apos;left-handed smoke shifter&apos;,   // Denormalized from the ‘Product’ document
    product_catalog_number: 1234,                     // Ditto
    qty: 94,
    cost: 0.94,
    price: 3.99
}
```

但是如果你将产品名称非规范化存储到了 `Part` 文档中，那么在你更新产品名称时，你同样必须更新当前产品所有相关部件中对应的产品名称。这个更新就比较耗性能了，因为你更新的是多个部件，而不是单个产品。因此，以这种方式进行非规范化存储的时候，你可一定得考虑清楚读写操作的频率比。

## 中级：“一对超级多”中的非规范化存储

你也可以非规范化存储”一对超级多的“例子，这适用于两种方式之一：你既可以把”一“那一侧的信息非规范化存储到”超级多“那一侧里面，也可以把”超级多“一侧的概括信息放到”一“那一侧。

这里有一个将数据非规范化存储到”超级多“那一侧的例子。我将会把主机的 ip 地址（从”一“那一侧）添加到单独的日志信息中：

```bash
&gt; db.logmsg.findOne()
{
    time : ISODate(&quot;&quot;2014-03-28T09:42:41.284Z&quot;.382Z&quot;),
    message : &apos;cpu is on fire!&apos;,
    ipaddr : &apos;127.66.66.66&apos;,
    host: ObjectID(&apos;AAAB&apos;)
}
```

当你查询特定的 ip 地址最近的日志消息的时候，将会变得更加容易：查询从两条变成了一条

```bash
&gt; last_5k_msg = db.logmsg.find({ipaddr : &apos;127.66.66.66&apos;}).sort({time : -1}).limit(5000).toArray()
```

事实上，如果你存储到“一”那一边的信息非常少，你完全可以将**所有**的信息全部费正规化存储到“超级多”那一边，然后将另外一个集合完全省掉。

```bash
&gt; db.logmsg.findOne()
{
    time : ISODate(&quot;&quot;2014-03-28T09:42:41.284Z&quot;.382Z&quot;),
    message : &apos;cpu is on fire!&apos;,
    ipaddr : &apos;127.66.66.66&apos;,
    hostname : &apos;goofy.example.com&apos;,
}
```

另一方面，你也可以将数据非规范化存储到“一”那一侧。假设你想将来自主机的最后 1000 条日志消息保留在 `hosts` 文档中。 你可以使用 MondoDB 2.4 中引入的 `$each` `$slice` 功能保留最后 1000 条消息，并且使其顺序不变。

```javascript
//  Get log message from monitoring system logmsg = get_log_msg();
log_message_here = logmsg.msg;
log_ip = logmsg.ipaddr;
// Get current timestamp
now = new Date()
// Find the _id for the host I’m updating
host_doc = db.hosts.findOne({ipaddr : log_ip },{_id:1});  // Don’t return the whole document
host_id = host_doc._id;
// Insert the log message, the parent reference, and the denormalized data into the ‘many’ side
db.logmsg.save({time : now, message : log_message_here, ipaddr : log_ip, host : host_id ) });
// Push the denormalized log message onto the ‘one’ side
db.hosts.update( {_id: host_id },{
    $push : {
        logmsgs : {
            $each:  [ { time : now, message : log_message_here } ],
            $sort:  { time : 1 },  // Only keep the latest ones
            $slice: -1000 }        // Only keep the latest 1000
    }
} );
```

注意，这里使用了投影规范（\{\_id: 1\}), 可以防止 MongoDB 通过网络发送整个 `hosts` 文档。通过告诉 MongoDB 只返回 `_id` 字段，我们将网络开销减少到存储这个字段所需要的几个字节（当然，要加上传输协议的开销）。

就像在“一对很多”的情况下进行非规范化存储一样，你需要考虑读取和更新的频率比例。只有当更新日志消息的次数相对于应用程序需要查看单个主机的所有消息的次数很少时，才有意义。如果你希望查看数据的频率低于更新数据的频率，那么这种特殊的费正规化存储就不是一个好主意。

## 回顾

在这篇文章里，除了最进本的嵌入、子引用、父引用之外，我们还介绍了其他的选择：

- 如果双向引用能够用来提升你 `Schema` 的性能，并且你不在乎失去了进行原子查询的能力，那么你可以使用它
- 如果你正在使用引用（无论父引用、子引用)，你可以把数据从“一”非规范化存储到“多”，也可以将数据从“多”非规范化存储到“一”

当我们考虑是否使用非规范化存储的时候，需要考虑两个因素：

- 你无法对非规范化的数据进行原子更新
- 只有当读写比例较高的时候，非规范化才有意义

下一篇文章里，我将会在这些方式的选择上，给大家提供一些一些指导建议。

</content:encoded></item><item><title><![CDATA[设计 MongoDB Schema 的 6 条经验准则：Part 1]]></title><description><![CDATA[作者：MongoDB 首席技术支持工程师 William Zola “我用SQL很长时间了, 但是 MongoDB 对我而言算是一个新东西。在 MongoDB 里面我该怎么处理___一对多___的关系呢？”这是我在 MongoDB 工作期间，用户问的最多的一个问题。

这个问题我…]]></description><link>https://wizd.dev/设计-MongoDB-Schema-的-6-条经验准则-Part-1/</link><guid isPermaLink="false">https://wizd.dev/设计-MongoDB-Schema-的-6-条经验准则-Part-1/</guid><pubDate>Fri, 17 Jul 2020 11:14:08 GMT</pubDate><content:encoded>![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-41-46-d2582e9ef5586bc819fec7cc1df972bf-mongodb-91c09c.jpeg)
作者：MongoDB 首席技术支持工程师 William Zola

“我用SQL很长时间了, 但是 MongoDB 对我而言算是一个新东西。在 MongoDB 里面我该怎么处理___一对多___的关系呢？”这是我在 MongoDB 工作期间，用户问的最多的一个问题。

这个问题我没办法用简单的一两句话就给说明白，因为不止一种方式可以做到这件事情。对于 SQL 中经常谈及的比较扁平化的___一对多___这个数据表之间的关系，MongoDB 有非常丰富而且细腻的词汇来表达它。接下来我们就一起看一下，在 MongoDB 中处理___一对多___这种关系的时候，你都有哪些选择。

由于要讲的东西太多，我会把内容分为 3 部分来向说。在第一部分中，我会给大家讲解在MongoDB中实现___一对多___关系的 3 种基本方式；在第二部分中，我会介绍更加复杂的 Schema 设计方式，包括非规范化和双向引用；在最有一部分中，我会带大家回顾所有内容，并针对在 MongoDB 中设计___一对多___关系时，你会考虑的上千种选择（真的是上千种哦），给你一些建议。

在大多数新手看来，MongoDB 中设计这种___一对多___的关系只有一种方案，那就是在父文档（parent document)中嵌入一个包含子文档（sub-document)的数组，但事实并非如此。但这只是因为你可以使用嵌入方式（embedding），并不意味着你应该使用嵌入方式（embedding）。

在设计一个 MongoDB Schema 的时候，你应该从一个你在使用 SQL 的时候从来都不会考虑的问题开始：关系（Relationship）的基数（cardinality&lt;sup&gt;注[1]&lt;/sup&gt;）是什么？换句更通俗易懂的话来讲：你需要用更准确的方式来描述你的___一对多___关系，是”一对几个”，还是“一对很多个”，还是___一对超级多___，这对你讲采用哪种方式来建立你的关系模型，有着至关重要的影响。

## 基础：一对几

举个___一对几个___这种关系的简单例子，一个人和他的地址。这是进行嵌入方式（embedding）很好的一个例子——你可以把 addresses 作为一个数组，嵌套到你的 Person 对象中:

```bash
&gt; db.person.findOne()
{
	name: &quot;岳云鹏&quot;,
	ssn: &quot;123-456-7890&quot;,
	addresses : [
     { street: &apos;史各庄东路108号&apos;, city: &apos;北京&apos;, cc: &apos;China&apos; },
     { street: &apos;王府井大街250号&apos;, city: &apos;北京&apos;, cc: &apos;China&apos; }
  ]
}
```

这种设计体现了嵌入方式（embedding）的所有优点和缺点。最大的好处在于，你不需要在做一个额外的查询来获取嵌入内容的详细信息；而最大的坏处在于，你没办法以独立的实体方式来访问嵌入到Document中的内容。

举个例子：假设您正在设计一个任务跟踪系统，那么每个人都会被分配许多任务。将任务嵌入到 Person 文档中，会使诸如“显示明天到期的所有任务”这样的查询变的非常困难，在下一篇文章中，我会介绍更适合这个用例的设计。

## 基础：一对多

举一个___一对很多个___这种关系的例子，产品的可替换部分的订单系统。每种产品可能有几百个可替换的部件，但一般不会超过几千个。这个是一个很好的引用方式用例——你可以把可替换部件的 `ObjectIDs` 作为一个数组，放到 product 文档中去。（在这个例子中为了便于阅读，我用了两个字节的 ObjectID，但是实际开发当中 ObjectID 应该是 12 个字节的）

每个可替换部件都有自己的文档。

```bash
&gt; db.parts.findOne()
{
    _id : ObjectID(&apos;AAAA&apos;),
    partno : &apos;123-aff-456&apos;,
    name : &apos;#4 grommet&apos;,
    qty: 94,
    cost: 0.94,
    price: 3.99
```

同样，每个产品都有自己的文档，其中包含对组成该产品的可替换部件的 `ObjectID` 引用数组

```bash
&gt; db.products.findOne()
{
    name : &apos;left-handed smoke shifter&apos;,
    manufacturer : &apos;Acme Corp&apos;,
    catalog_number: 1234,
    parts : [     // 可替换部件的数组引用
        ObjectID(&apos;AAAA&apos;),    // reference to the #4 grommet above
        ObjectID(&apos;F17C&apos;),    // reference to a different Part
        ObjectID(&apos;D2AA&apos;),
        // etc
    ]
```

然后，你需要使用应用程序级别的联接查询来检索特定产品的可替换零件：

```bash
// 获取指定catalog number对应的产品文档
&gt; product = db.products.findOne({catalog_number: 1234});
// 获取当前这个产品所有的可替换部件
&gt; product_parts = db.parts.find({_id: { $in : product.parts } } ).toArray() ;
```

为了使操作效率更高，你需要在 `product.catlog_number` 上创建索引。要注意，  `parts._id` 上始终会有索引，所以这个查询总是高效的。

这种引用的风格和嵌入方式有互补的优缺点。每个 Part (可替换部件)都是一个独立的 Document，因此独立的搜索和更新 Part 会变得特别容易。使用这中模式的代价在于，如果你想要获取一个商品的某个部件的详情，你需要进行二次查询。(在阅读本文 Part2 之前，可以先这么理解）

还有一个额外的好处就是，这种 Schema 设计方案下，你可以让一个 Part (可替换部件) 被多个 Product (商品) 使用。这样不需要任何额外操作的情况下，你的”一对多”的关系，就变成了“多对多”关系。

## 基础：一对超级多

一个用于收集不同机器日志消息的日志系统，应该算是一个___一对超级多___这种关系的例子。任何一个主机所产生的日志信息都足以让文档大小超过 MongoDB 限制的 16MB ，哪怕你只是把 ObjectID 存放在数组中。这是一个“父级引用”的经典用例——你有个针对主机的 Document，然后将主机的 ObjectID 存储在记录日志消息的 Document 中。

```bash
&gt; db.hosts.findOne()
{
    _id : ObjectID(&apos;AAAB&apos;),
    name : &apos;goofy.example.com&apos;,
    ipaddr : &apos;127.66.66.66&apos;
}

&gt;db.logmsg.findOne()
{
    time : ISODate(&quot;&quot;2014-03-28T09:42:41.284Z&quot;.382Z&quot;),
    message : &apos;cpu is on fire!&apos;,
    host: ObjectID(&apos;AAAB&apos;)       // 引用主机 Document
}
```

你可以使用一个应用程序级别的关联查询来查找最近的5,000条日志记录。

```bash
// 先找到指定的主机
&gt; host = db.hosts.findOne({ipaddr : &apos;127.66.66.66&apos;});  // 这里假设 ipaddr： 127.66.66.66 是唯一的
// 在找到主机对应的最近的5000条日志信息
&gt; last_5k_msg = db.logmsg.find({host: host._id}).sort({time : -1}).limit(5000).toArray()
```

## 总结

因此，尽管上面讲的东西都很基础，但是我们会发现，在设计 MonogDB Schema 的时候明显要比设计关系型的 Schema 想的更多。你需要思考的有两个因素：

* 在你的___一对多___关系中，”多“的这一方，需要被设计成单独的实体吗？
* 你设计的关系的基数（cardinality）是什么？ 一对多？一对很多？还是一对超级多？

基于这两个因素，您可以选择三种基本的___一对多___模式设计之一：

* 如果你的基数是一对几的，并且无需在父对象的上下文之外访问嵌入的对象，则将”多“的那一边嵌入到父对象中
* 如果你的基数是一对多的，或者由于其他任何原因，”多“这一边对象应该独立存在，则使用对”多“这一边的对象的引用数组
* 如果你的基数是一对超级多，请在”多“那边的对象中使用对”一“那边的引用

下篇文章中，我们将看到如何使用双向关系和非规范化来增强这些基本 Schema 的性能。

---

[1] [techopedia 中对 Cardinality 的解释](https://www.techopedia.com/definition/18/cardinality-databases)

</content:encoded></item><item><title><![CDATA[ArchLinux Arm 可用的国内软件源]]></title><description><![CDATA[今天尝试给自己的树莓派 3B+ 装了 ArchLinux，但是装好之后 pacman 安装软件各种慢，发现是软件源的问题，就尝试网上找了一些相应的国内软件源，配置好之后，又各种报错404。 *** 树莓派安装的是 Arm 版的 ArchLinux， 所以软件源也应该找相应 Arm…]]></description><link>https://wizd.dev/ArchLinux可用的国内软件源/</link><guid isPermaLink="false">https://wizd.dev/ArchLinux可用的国内软件源/</guid><pubDate>Mon, 23 Mar 2020 23:46:17 GMT</pubDate><content:encoded>
今天尝试给自己的树莓派 3B+ 装了 ArchLinux，但是装好之后 pacman 安装软件各种慢，发现是软件源的问题，就尝试网上找了一些相应的国内软件源，配置好之后，又各种报错404。

*** 树莓派安装的是 Arm 版的 ArchLinux， 所以软件源也应该找相应 Arm 版的 ***

下面是几个国内可用的 ArchLinux Arm 软件源，添加到 `/etc/pacman.d/mirrorlist` 中即可正常使用

```bash
## 清华

Server = http://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/$arch/$repo

## 中科大

Server = http://mirrors.ustc.edu.cn/archlinuxarm/$arch/$repo

## 成都电子科大

Server = http://mirrors.stuhome.net/archlinuxarm/$arch/$repo
```

在设置完软件源之后，需要执行下面的命令，初始化key

```bash
pacman-key --init
pacman-key --populate
```
</content:encoded></item><item><title><![CDATA[如何在 React 中使用节流和防抖并将他们抽象成 Hooks]]></title><description><![CDATA[Hooks 是 React 很出色的一个功能更新。它极大的简化了之前在类组件中必须拆分到各个声明周期中的逻辑。 但是，Hooks 需要一种新的思维模式，尤其是对初学者来讲。

防抖和节流

网络上有太多太多关于防抖和节流的文章了，所以我不打算再深入讨论如何编写自己的防抖和节流功能…]]></description><link>https://wizd.dev/如何在-React-中使用节流和防抖并将他们抽象成-Hooks/</link><guid isPermaLink="false">https://wizd.dev/如何在-React-中使用节流和防抖并将他们抽象成-Hooks/</guid><pubDate>Sun, 01 Dec 2019 01:24:47 GMT</pubDate><content:encoded>
Hooks 是 React 很出色的一个功能更新。它极大的简化了之前在类组件中必须拆分到各个声明周期中的逻辑。

但是，Hooks 需要一种新的思维模式，尤其是对初学者来讲。

## 防抖和节流

网络上有太多太多关于防抖和节流的文章了，所以我不打算再深入讨论如何编写自己的防抖和节流功能。方便起见，我们考虑直接使用 Lodash 中提供的 `debounce` 和 `throttle`。

这里我们带大家快速复习一下，防抖和节流两个函数都接收两个参数，一个回调函数以及一个以毫秒为单位的延迟（暂时称为 `x`）,而且这两个函数都返回另外一个具有特定功能的函数：

* `debounce`: 返回一个可以调用任意次的函数（一般是快速的连续调用），但是这个函数实际只会在最后一次调用完 `x` 毫秒后，调用回调函数。
* `throttle`: 返回一个可以调用任意次的函数（一般是快速的连续调用），但是每 `x` 毫秒间隔内最多只会调用一次回调函数。

## 案例

我们有一个迷你博客编辑器（[Github仓库地址](https://github.com/wtjs/react-debounce-throttle-hooks/)），在这个编辑器中，我们需要在用户每次输入停止1秒后将博客内容存储到数据库内。
&gt; 如果你想看最终版本的代码，直接访问 [Codesandbox](https://codesandbox.io/s/github/wtjs/react-debounce-throttle-hooks) 就可以
我们的编辑器最小版的代码应该是这样：

```javascript
import React, { useState } from &apos;react&apos;;
import debounce from &apos;lodash.debounce&apos;;

function App() {
  const [value, setValue] = useState(&quot;&quot;);
  const [dbValue, saveToDb] = useState(&quot;&quot;); // would be an API call normally

  const handleChange = (event) =&gt; {
    setValue(event.target.value);
  };

  return (
    &lt;main&gt;
      &lt;h1&gt;Blog&lt;/h1&gt;
      &lt;textarea value={value} onChange={handleChange} rows={5} cols={50} /&gt;
      &lt;section className=&quot;panels&quot;&gt;
        &lt;div&gt;
          &lt;h2&gt;这是编辑器端的内容 (Client)&lt;/h2&gt;
          {value}
        &lt;/div&gt;
        &lt;div&gt;
          &lt;h2&gt;这是存储好了的内容 (DB)&lt;/h2&gt;
          {dbValue}
        &lt;/div&gt;
      &lt;/section&gt;
    &lt;/main&gt;
  );
}
```

上面这段代码里，`saveToDb` 实际上应该是对后端 API 的调用，但是这里为了让代码保持简洁，我把数据存储在 state 中，且为了方便大家观看，我直接将其渲染到了页面上。

因为我们只想在用户停止输入 1s 后执行这个存储操作，所以这里应该使用防抖。

大家可以[在这里](https://github.com/wtjs/react-debounce-throttle-hooks/tree/starter)查看起始代码。

## 创建一个防抖函数

首先，我们需要一个防抖函数来封装对 `saveToDb` 函数的调用：

```javascript
import React, { useState } from &apos;react&apos;;
import debounce from &apos;lodash.debounce&apos;;

function App() {
  const [value, setValue] = useState(&quot;&quot;);
  const [dbValue, saveToDb] = useState(&quot;&quot;); // would be an API call normally

  const handleChange = (event) =&gt; {
    const { value: nextValue } = event.target;
    setValue(nextValue);
    // highlight-starts
    const debouncedSave = debounce(() =&gt; saveToDb(nextValue), 1000);
    debouncedSave();
    // highlight-ends
  };

  return &lt;main&gt;{/* Same as before */}&lt;/main&gt;;
}

```

但是，这样其实是不能正常工作的，大家自习观察就会发现，我们是在 `handleChange` 函数中创建的 `debouncedSave` 函数，那这就意味着，每次按键触发 `handleChange` 事件都会重新创建一个 `debouncedSave` 函数，引用不一致就会导致防抖功能失效了。

## useCallback

在我们给子组件传递回调函数的时候，`useCallback` 可以用来优化性能。但是我们可以利用他的另外一个特性，就是会对回调函数进行缓存，在依赖不发生任何变更的情况下，能保证每次调用的都是同一个。这样就能保证我们每次调用的 `debounceSave` 都是同一个了。

这样就跟我们预想的一样了：

```javascript
import React, { useState, useCallback } from &apos;react&apos;;
import debounce from &apos;lodash.debounce&apos;;

function App() {
  const [value, setValue] = useState(&quot;&quot;);
  const [dbValue, saveToDb] = useState(&quot;&quot;); // would be an API call normally

  // highlight-starts
  const debouncedSave = useCallback(
    debounce((nextValue) =&gt; saveToDb(nextValue), 1000),
    [] // will be created only once initially
  );
  // highlight-ends

  const handleChange = (event) =&gt; {
    const { value: nextValue } = event.target;
    setValue(nextValue);
    // Even though handleChange is created on each render and executed
    // it references the same debouncedSave that was created initially
    debouncedSave(nextValue);
  };

  return &lt;main&gt;{/* Same as before */}&lt;/main&gt;;
}

```

## useRef

`useRef` 可以用来创建一个可修改的对象，我们传递给 `useRef`的参数会作为初始值赋值给这个对象的 `.current` 属性。最关键的是，如果我们不去手动的更改，那么这个值会组件的生命周期内持续存在。

同样，这样也能和我们预期的一样：

```javascript
import React, { useState, useRef } from &apos;react&apos;;
import debounce from &apos;lodash.debounce&apos;;

function App() {
  const [value, setValue] = useState(&quot;&quot;);
  const [dbValue, saveToDb] = useState(&quot;&quot;); // would be an API call normally

  // This remains same across renders
  // highlight-starts
  const debouncedSave = useRef(
    debounce((nextValue) =&gt; saveToDb(nextValue), 1000)
  ).current;
  // highlight-ends

  const handleChange = (event) =&gt; {
    const { value: nextValue } = event.target;
    setValue(nextValue);
    // Even though handleChange is created on each render and executed
    // it references the same debouncedSave that was created initially
    debouncedSave(nextValue);
  };

  return &lt;main&gt;{/* Same as before */}&lt;/main&gt;;
}

```

## 封装一个自定义 Hook

上面两个方法中，我们用到了 `useCallback` 和 `useRef`，而且都能很好的帮我们实现需求。对于一次性案例来讲，这样挺好，但是如果写法能变得更简洁岂不是更棒？如果我们不使用 `useCallback` 和 `useRef` 的话，我们的代码会变得可读性更高。我们当然可以把这个逻辑抽象到一个 `useDebounce` Hook 中。

下面的代码是我们使用 `useCallback` 来实现我们的构思：

```javascript
import React, { useState, useCallback } from &quot;react&quot;;
import debounce from &quot;lodash.debounce&quot;;

function useDebounce(callback, delay) {
  const debouncedFn = useCallback(
    debounce((...args) =&gt; callback(...args), delay),
    [delay] // will recreate if delay changes
  );
  return debouncedFn;
}

function App() {
  const [value, setValue] = useState(&quot;&quot;);
  const [dbValue, saveToDb] = useState(&quot;&quot;); // would be an API call normally

  const debouncedSave = useDebounce((nextValue) =&gt; saveToDb(nextValue), 1000);

  const handleChange = (event) =&gt; {
    const { value: nextValue } = event.target;
    setValue(nextValue);
    debouncedSave(nextValue);
  };

  return &lt;main&gt;{/* Same as before */}&lt;/main&gt;;
}

```

这个代码确实能正常运行也能完成我们要的功能，但是很奇怪的，我的 TypeScript Linter 报了一个错误：

```bash
React Hook useCallback received a function whose dependencies are unknown.
Pass an inline function instead. eslint(react-hooks/exhaustive-deps)
```

但是这个代码能在 JavaScript 环境下正常运行，并且没有任何错误（使用的是 create-react-app 模板）。不管怎么样，下边给大家提供一个替代方案，使用 `useRef` 来实现的 `useDebounce` Hook:

```javascript
function useDebounce(callback, delay) {
  // Memoizing the callback because if it&apos;s an arrow function
  // it would be different on each render
  const memoizedCallback = useCallback(callback, []);
  const debouncedFn = useRef(debounce(memoizedCallback, delay));

  useEffect(() =&gt; {
    debouncedFn.current = debounce(memoizedCallback, delay);
  }, [memoizedCallback, debouncedFn, delay]);

  return debouncedFn.current;
}
```

这个代码没有上面使用 `useCallback` 实现的简洁，很有可能我那个 Linter 的错误是一个 Gug, 说不定过不了多久就能修复了。

在这篇文章里，我只是简单的介绍了防抖，但是节流也可以用同样的方式来实现。一样的，你也可以做一个自己的 `useThrottle` Hook。
</content:encoded></item><item><title><![CDATA[给新手看的 React Hooks 教程]]></title><description><![CDATA["Hooks 到底是个啥玩意儿？？？" 你是不是有这样的疑惑？在你自认为已经了解了差不多 React 所有的内容的时候，Hooks 就这么出现了。

这就是前端开发人员的日常，技术从未停止更新。

学习新东西是一件很棒的事情吗？当然是！但有的时候我们又不得不思考：”为什么要学它…]]></description><link>https://wizd.dev/给新手看的React-Hooks教程/</link><guid isPermaLink="false">https://wizd.dev/给新手看的React-Hooks教程/</guid><pubDate>Wed, 27 Nov 2019 15:24:47 GMT</pubDate><content:encoded>![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-42-11-0f76f4f01901829907f9af90ae1aa770-reacthooks-586d4b.png)
&quot;Hooks 到底是个啥玩意儿？？？&quot;

你是不是有这样的疑惑？在你自认为已经了解了差不多 React 所有的内容的时候，Hooks 就这么出现了。

这就是前端开发人员的日常，技术从未停止更新。

学习新东西是一件很棒的事情吗？当然是！但有的时候我们又不得不思考：”为什么要学它？这个新东西有啥意义？我是必须得学他吗？“。

针对 Hooks 而言，上面的这个问题答案是否定的，你不需要立马就学它。如果您一直在使用 React，并且迄今为止一直在使用基于类的组件，那么就不必急于转向 Hooks。Hooks 是可选的，可以与现有组件配合使用。我相信当你因为要使用新东西而不得不重写整个代码库，你整个人都是崩溃的。

## 在函数组件中使用状态

在使用 Hooks 之前，我们不能在函数组件中使用状态。这就意味着，如果您有一个经过精心设计和测试的函数组件，突然需要存储状态，那么你就不得不把他重构为一个类组件。

牛逼的来了，Hooks 让函数组件也能使用状态，就意味着我们不需要重构之前自己的写的代码，[可以点击这篇文章查看更多](https://scotch.io/courses/5-essential-react-concepts-to-know-before-learning-redux/presentational-and-container-component-pattern-in-react)。

## 类组件很笨重

我们不的不承认的是，类组件附带了太多的东西。constructor，binding，“this”无处不在。使用函数组件可以消除许多这种情况，能让我们的代码更容易维护。

可以在[React文档中了解更多相关内容](https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines)

## 更高的可读性

由于 Hooks 允许我们在函数组件中使用状态，因此和类组件相比，这意味同样的功能，我们写出来的代码会更好。 这也会让我们的代码更具可读性。 我们再也不用担心方法是不是绑定了 `this`，也不必记住 `this` 之间的关系等等。 我们可以专心写代码了。

## React State Hook

状态，是React生态系统的基础。接下来我将通过介绍最常见的 Hook —— `useState()` 来让大家初步了解 Hooks。

我们先来看一下具有状态的类组件。

```jsx
import React, { Component } from &apos;react&apos;;
import &apos;./styles.css&apos;;

class Counter extends Component {
	state = {
		count: this.props.initialValue,
	};

	setCount = () =&gt; {
		this.setState({ count: this.state.count + 1 });
	};

	render() {
		return (
			&lt;div&gt;
				&lt;h2&gt;This is a counter using a class&lt;/h2&gt;
				&lt;h1&gt;{this.state.count}&lt;/h1&gt;

				&lt;button onClick={this.setCount}&gt;Click to Increment&lt;/button&gt;
			&lt;/div&gt;
		);
	}
}

export default Counter;
```

有了React Hooks 之后，我们可以重写这个类组件并删除很多内容，使其更易理解

```javascript
import React, { useState } from &apos;react&apos;;

function CounterWithHooks(props) {
	const [count, setCount] = useState(props.initialValue);

	return (
		&lt;div&gt;
			&lt;h2&gt;This is a counter using hooks&lt;/h2&gt;
			&lt;h1&gt;{count}&lt;/h1&gt;
			&lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click to Increment&lt;/button&gt;
		&lt;/div&gt;
	);
}

export default CounterWithHooks;
```

代码变少了，但这到底是啥情况呢？

## React State Syntax

在上面的代码里，我们已经用到了人生中第一个 React Hook

```jsx
const [count, setCount] = useState();
```

简单来讲，这里使用了数组的结构赋值。

`useState()` 函数为我们提供了两个东西:

	* 一个保存状态值的变量，在本例中称为count;
	* 一个更改值的函数，在本例中称为setCount。

当然，你可以为这两个东西起任何你想要的名字。

```jsx
const [myCount, setCount] = useState(0);
```

而且，你也可以在你的代码中像使用正常变量/函数一样去用他们。

```jsx
function CounterWithHooks() {
	const [count, setCount] = useState();

	return (
		&lt;div&gt;
			&lt;h2&gt;This is a counter using hooks&lt;/h2&gt;
			&lt;h1&gt;{count}&lt;/h1&gt;
			&lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click to Increment&lt;/button&gt;
		&lt;/div&gt;
	);
}
```

注意最上面的的`useState` Hook。 我们声明、结构了2个东西：

* counter：是用来保存状态的
* setCounter：是用来更改计数器变量的函数

往下看代码，您会看到这一行：

```jsx
&lt;h1&gt;{count}&lt;/h1&gt;
```

这是一个使用 Hooks 变量的例子。在JSX中，我们将 `count` 变量放在 `{}` 中，然后作为JavaScript执行它，最后将 `count` 的值将展示在页面上。

我们来对照一下我们之前在类组件中使用状态的方式：

```jsx
&lt;h1&gt;{this.state.count}&lt;/h1&gt;
```

你会发现，我么再也不需要关注 `this` 的使用了，这使我们的编码工作变得更加轻松了。

比如，当你没定义 `{count}` 的时候，VS Code编辑器直接就给你报警告了，你就更早的发现错误。 但是在运行代码之前，VS Code 可不会知道 `{this.state.count}` 是不是定义了。

我们继续往下看

```jsx
&lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click to Increment&lt;/button&gt;
```

在这行代码中，我们使用 `setCount` 函数来更改 `count` 变量。

单击按钮的时侯，我们把 `count` 变量更新为1。由于状态变化，因此会触发视图重新渲染，React 会用新的 `count `值为我们更新视图。 真香！

## 那我怎么给数据一个初始值呢？

您可以通过给`useState()`传递参数来设置初始状态。 可以是一个硬编码的值：

```jsx
 const [count, setCount] = useState(0);
```

或者你也可以用 `props` 传进来的值作为初始值：

```jsx
 const [count, setCount] = useState(props.initialValue);
```

不论你的`props.initialValue`是啥，都会赋值给 `count` 作为初始值。

总结一下：`useState` 最爽的地方在于，你可以像使用正常变量、函数一样处理你的状态。

## 那如果我有多个状态数据咋办?

这是就是Hooks另外一个牛逼的地方了，在组件里，`useState`你想用多少次，就用多少次：

```jsx
 const [count, setCount] = useState(props.initialValue);
 const [title, setTitle] = useState(&quot;This is my title&quot;);
 const [age, setAge] = useState(25);
```

如你所见，我们现在有3个独立的状态对象。例如，如果我们想更新年龄，只需调用`setAge()`函数。`count`和`title`也是一样。我们不再受制于旧的笨重的类组件方式——用`setState()`来管理一个超大的状态对象.

```jsx
this.setState({ count: props.initialValue, title: &quot;This is my title&quot;, age: 25 })
```

## 那数据更新的时候，我要做一些事情怎么做？

在使用函数组件 + React Hooks 这种模式下，我们再也不用去管什么生命周期了，什么 `componentDidMount`、`componentDidUpdate`都可以统统见鬼去了。

你可能会问，那我用啥？？？别慌，兄弟！ React 给我们提供了另外一个钩子来干这事儿。

## useEffect

效果钩子 `useEffect` 是我们处理“副作用”的地方。

呃,副作用？那是啥? 

### 副作用

那我们就先偏离一下正题，讨论一下副作用到底是什么。这有助于我们理解 `useEffect()` 的作用以及为什么他很有用。

一个你看不懂的无聊的正规解释应该是：

&gt; ​	“在编程中，副作用是指在程序处理过程改变了程序范围之外的变量”

用 React 术语来说，副作用其实意味着“当组件的变量或状态因某些外部事物而改变”。 例如：

* 组件接受了一个改变组件本身状态的props

* 当组件进行接口调用并在接口返回结果是执行了某些操作（例如，更改了组件的状态）

那么为什么称之为副作用呢？ 

***我们不能确定这些代码的执行结果是什么***。 我们永远无法百分百确定我们的组件会接收到什么样的 `props `，也无法确定接口调用返回的结果数据是什么。 而且，我们无法确定这将如何影响我们的组件。

当然，我们也可以编写代码校验、处理错误等，但是我们最终还是不能确定这样的事情带来的副作用是什么。

所以可以这么说，当组件的状态因为一些外界因素改变的时候，这就可以称作副作用。



好了，我们可以回正题了。继续来看`useEffect`这个Hook。

在使用函数组件时，我们不再使用生命周期钩子函数，例如 `componentDidMount`，`componentDidUpdate`等。因此，可以这么说，`useEffect` Hook 代替了之前我们用到的React钩子函数。

让我们比较一下基于类的组件和`useEffect` Hooks的使用方式

```jsx
import React, { Component } from &apos;react&apos;;

class App extends Component {
	componentDidMount() {
		console.log(&apos;I have just mounted!&apos;);
	}

	render() {
		return &lt;div&gt;Insert JSX here&lt;/div&gt;;
	}
}
```



用了`useEffect`之后

```jsx
function App() {
	useEffect(() =&gt; {
		console.log(&apos;I have just mounted!&apos;);
	});

	return &lt;div&gt;Insert JSX here&lt;/div&gt;;
}
```

在继续往下之前，我们必须要知道一件事儿，在默认情况下，`useEffect` Hook 在每次渲染和重新渲染时都会执行。 

因此，只要组件中的状态发生变化或组件收到新的`props`时，组件都会重新渲染并导致`useEffect Hook 再次运行。

## 能不能只执行一次useEffect  (就像 componentDidMount 一样)

如果 `useEffect` Hook 在组件每次渲染时都运行，那么我们怎么才能做到 Hook 在挂载组件时仅运行一次？ 

例如，如果组件从接口获取数据，我们肯定不希望每次重新渲染组件时都去重新请求下数据吧？

`useEffect()` 钩子接受第二个参数，是一个数组，其中包含导致 `useEffect` 钩子运行的依赖项的列表。当这些依赖项更改时，它将触发 Effect Hook。如果想要只运行一次 Effect Hook，那直接给他传递一个空数组，就OK啦！！

```jsx
useEffect(() =&gt; {
	console.log(&apos;This only runs once&apos;);
}, []);
```

这就意味着 useEffect Hook 将在第一次渲染时正常运行。然而，当你的组件重新渲染时，useEffect 会想 “好吧，我已经运行了，数组中啥也没有，我没啥依赖项，谁变都跟我没关系了，所以我不必再运行了。” 然后就什么也不做了。

&gt; 总结： 空数组就意味着useEffect Hook只在挂载时运行一次



## 当有内容更新时使用effect (就像componentDidUpdate一样)

我们已经介绍了如何确保 useEffect Hook仅运行一次，但是当我们的组件收到新的 `props` 时该怎么办？ 或者我们要在状态更改时运行一些代码？ 其实Hooks 也能处理！

```jsx
 useEffect(() =&gt; {
	console.log(&quot;The name props has changed!&quot;)
 }, [props.name]);
```

请注意，这次我们如何将东西传递给useEffect数组的，`props.name`。

在这种情况下，useEffect Hook 将像往常一样在首次加载时运行。 每当您的组件从其父组件收到新的`props.name`时，都会触发useEffect Hook，并且运行其中的代码。



我们也可以使用状态变量来做同样的事情：

```jsx
const [name, setName] = useState(&quot;Chris&quot;);

 useEffect(() =&gt; {
    console.log(&quot;The name state variable has changed!&quot;);
 }, [name]);
```

每当`name`发生变化时，组件就会重新渲染 ，useEffect Hook 就会运行并输出消息。而且因为这是一个数组，我们其实可以向它添加多个东西：

```jsx
const [name, setName] = useState(&quot;Chris&quot;);

 useEffect(() =&gt; {
    console.log(&quot;Something has changed!&quot;);
 }, [name, props.name]);
```

这样，当 `name` 状态变量更改或 `props.name` 更改时，useEffect Hook 都将运行并显示控制台消息。

## 那我们能用componentWillUnmount吗？

想要在组件即将卸载时运行一个Hook，我们只需从`useEffect` Hook 返回一个函数

```jsx
useEffect(() =&gt; {
	console.log(&apos;running effect&apos;);

	return () =&gt; {
		console.log(&apos;unmounting&apos;);
	};
});
```

## 那我们可以多个不同的 Hooks 一起使用吗？

当然! 你可以在组件中使用任意数量的Hooks，并根据需要混合使用

```jsx
function App = () =&gt; {
	const [name, setName] = useState();
	const [age, setAge] = useState();

	useEffect(()=&gt;{
		console.log(&quot;component has changed&quot;);
	}, [name, age])

	return(
		&lt;div&gt;Some jsx here...&lt;div&gt;
	)
}
```

## 小结- 接下来干啥呢？

你这不已经学会React Hooks了么，Hooks允许我们使用老式的JavaScript函数来创建更简单的React组件，并减少大量代码。



接下来，手不痒痒么？当然是自己赶紧动手那Hooks做项目体验去啊！</content:encoded></item><item><title><![CDATA[深入了解Vue.js源码(#2-initMixin-part1)]]></title><description><![CDATA[构造函数中调用的  是在哪里定义的呢？正如我们所看到的，构造函数内部并未对这个  方法进行定义。 快速进行全局搜索源码可以发现  方法是在名为  的函数中添加到  上的。 initMixin

 方法被定义在  函数中。 函数在  构造函数定义之后，和其他一组函数一起立即就被调用了…]]></description><link>https://wizd.dev/深入了解Vue-js源码-2-initMixin/</link><guid isPermaLink="false">https://wizd.dev/深入了解Vue-js源码-2-initMixin/</guid><pubDate>Fri, 02 Aug 2019 16:06:08 GMT</pubDate><content:encoded>
构造函数中调用的 `this._init` 是在哪里定义的呢？正如我们所看到的，构造函数内部并未对这个 `._init` 方法进行定义。
快速进行全局搜索源码可以发现 `._init` 方法是在名为 `initMixin` 的函数中添加到 `Vue.prototype` 上的。

## initMixin

`this._init` 方法被定义在 `initMixin` 函数中。`initMixin` 函数在 `Vue` 构造函数定义之后，和其他一组函数一起立即就被调用了，而且这一组函数调用全部接收了 `Vue` 构造函数作为实参。

```javascript
  function Vue (options) {
    if (!(this instanceof Vue)
    ) {
      warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;);
    }
    this._init(options);
  }

  initMixin(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  renderMixin(Vue);
```

我们来看一下 `initMixin` 函数的定义，特别简单，接收 `Vue` 构造函数作为形参，并且为构造函数原型添加了 `_init` 方法。

```javascript
  function initMixin (Vue) {
    Vue.prototype._init = function (options) {
      [. . . .]
    };
  }
```

## `uid$3`

在顶级作用域中， `initMixin` 上面定义了一个变量 `uid$3`，这个变量被当做一个计数器，每当创建一个 `Vue` 实例的时候，都会自增，然后添加为当次创建的 `Vue` 实例的属性。

```javascript
  function initMixin (Vue) {
    Vue.prototype._init = function (options) {
      // a uid
      vm._uid = uid$3++;
      [. . . .]
    };
  }
```

## `vm` 和 `this`

在 `_init` 方法内部设置了一个 `this` 的帮助变量。通常情况下，我们会将代表当前函数上下文对象的 `this` 关键字保存在其他变量中，方便以后使用，比如 `self = this`。 这里的做法是类似的，将 `this` 保存在了一个名为 `vm` 的变量中：

```javascript
  function initMixin (Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      [. . . .]
    };
  }
```

## 性能相关

接下来，`._init`方法中，设置了性能检查相关的内容。

```javascript
function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    ...
    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) {
      startTag = &quot;vue-perf-start:&quot; + (vm._uid);
      endTag = &quot;vue-perf-end:&quot; + (vm._uid);
      mark(startTag);
    }
    ...
  }
}
```

这里声明了两个变量 `startTag` 和 `endTag`.

```javascript

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    [. . . .]
    var startTag, endTag;
    [. . . .]
  }
}
```

然后你可能会注意到这个奇怪的注释：

```javascript
/* istanbul ignore if */
```

[`Istanbul`](https://github.com/gotwarlost/istanbul) 其实是一个覆盖率测试工具，这里的注释是在告诉 `Istanbul` 忽略掉 `if` 语句。

`if` 语句首先检查的是当前环境是开发环境还是生产环境，然后判断 `config.performence` 属性是否有设置为 `true`。

```javascript
function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    [. . . .]
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) {
    }
    [. . . .]
  }
}
```

### `config` 对象

这里我们不得不去关注一下 `config` 这个对象，这个对象声明在别的地方，并且默认的 `performance` 这个属性是 `false`。

```javascript
var config = ({
  [. . . .]
    /**
   * Whether to record perf
   */
  performance: false,
  [. . . .]
})
```

就像注释标记的那样，`config.performance` 这个属性用来决定 `Vue` 是否要记录性能。

我们继续回到 `_init` 方法里面来，`if` 语句中接下来又检查了一个名为 `mark` 的变量。

```javascript
function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    [. . . .]
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) {
    }
    [. . . .]
  }
}
```

### `mark` 函数

那我们又不得不去找找看 `mark` 到底是在哪儿定义的。

```javascript
  var mark;
  var measure;

  {
    var perf = inBrowser &amp;&amp; window.performance;
    /* istanbul ignore if */
    if (
      perf &amp;&amp;
      perf.mark &amp;&amp;
      perf.measure &amp;&amp;
      perf.clearMarks &amp;&amp;
      perf.clearMeasures
    ) {
      mark = function (tag) { return perf.mark(tag); };
      measure = function (name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        // perf.clearMeasures(name)
      };
    }
  }
```

查看代码我们会发现，这个`mark`变量，只会在特定的情况下被赋值。首先呢，他会检查，我们是否在浏览器环境中，然后检查 `window.performance` 是否存在。

```javascript
  // Browser environment sniffing
  var inBrowser = typeof window !== &apos;undefined&apos;;
  [. . . .]
  {
    var perf = inBrowser &amp;&amp; window.performance;
    [. . . .]
  }
```

要知道这里在干吗，我们需要去文档查看一下 `window` 对象的 `performance` 属性。 MDN中说: 
&gt; “`window` 对象的 `performance` 属性返回一个 `Performance` 对象，可用于收集当前文档的性能信息。 它作为 `Performance Timeline API`，`High Resolution Time API`，`Navigation Timing API`，`User Timing API`和`Resource Timing API`的公开点。性能接口是`High Resolution Time API`的一部分，可以通过它来访问当前页面性能相关信息。

`mark`, `measure`, `clearMarks`, `clearMeasures` 都是 `Performance` 对象上的方法。

* `mark` 方法用给定的名字在浏览器的性能输入缓冲区创建一个时间戳。

* `measure` 方法在浏览器的性能输入缓冲区中两个指定标记(分别称为开始标记和结束标记)之间创建一个命名时间戳。

* `clearMarks` 方法用来移除浏览器的性能输入缓冲区中指定的 `mark`
  
* `clearMeasures` 方法用来移除浏览器的性能输入缓冲区中指定的 `measure`

就像Vue [API](https://vuejs.org/v2/api/#performance)中解释的那样，如果 `performance` 选项被设置为 `true`，将会在浏览器的 `devtool peformance/timeline` 面板中开启对组件初始化、编译、渲染以及组件更新的性能追踪。但是只能在`development` 模式下生效，并且受限于浏览器，只能在支持 `performance.mark` 接口的浏览器中使用。

所以，我们继续回头看一下 `mark` 变量的初始化代码：

```javascript
{
  var perf = inBrowser &amp;&amp; window.performance;
  /* istanbul ignore if */
  if (
    perf &amp;&amp;
    perf.mark &amp;&amp;
    perf.measure &amp;&amp;
    perf.clearMarks &amp;&amp;
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}
```

如果 `perf` 对象存在，并且当 `perf` 对象中存在 `mark`、 `measure`、 `clearMarks` 和 `clearMeasures` 方法，那么 Vue 就会设置好 `mark` 和 `measure` 函数。

`mark` 函数接收一个 `tag` 作为形参，并且返回一个在浏览器性能入口缓存区中用 `tag` 作为名字的时间戳。

`mark` 与 `measure` 一起，就允许我们在浏览器 `devtool perfomance/timeline` 面板中跟踪性能。

### 继续回到`_init`方法

现在我们知道了 `mark` 函数是用来做什么的，我们终于可以继续回到 `Vue.prototype._init` 方法中继续了解代码所做的事情。

下面的代码，检查了是否是开发环境，确认了性能配置选项是否被设置为 `true`, 还确认了 `mark` 函数是否存在。如果上述三个检查都通过了，Vue 会设置两个变量 `startTag` 和 `endTag`, 然后使用 `startTag` 作为形参调用 `mark` 函数。

```javascript
function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) {
      startTag = &quot;vue-perf-start:&quot; + (vm._uid);
      endTag = &quot;vue-perf-end:&quot; + (vm._uid);
      mark(startTag);
    }
    [. . . .]
  }
}
```</content:encoded></item><item><title><![CDATA[前端技能路线图-2019]]></title><link>https://wizd.dev/前端技能路线图-2019/</link><guid isPermaLink="false">https://wizd.dev/前端技能路线图-2019/</guid><pubDate>Thu, 01 Aug 2019 16:46:53 GMT</pubDate><content:encoded>
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-45-17-baf35efa23d97c194857daf2274e66f3-%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E8%B7%AF%E7%BA%BF%E5%9B%BE-5d8784.png)

</content:encoded></item><item><title><![CDATA[LeetCode刷题系列-两数之和]]></title><description><![CDATA[题目 给定一个整数数组  和一个目标值 ，请你在该数组中找出和为目标值的那  整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例
答案

本题要求其实算是比较简单…]]></description><link>https://wizd.dev/LeetCode刷题系列-两数之和/</link><guid isPermaLink="false">https://wizd.dev/LeetCode刷题系列-两数之和/</guid><pubDate>Tue, 23 Jul 2019 20:14:49 GMT</pubDate><content:encoded>
## 题目

&gt; 给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那 `两个` 整数，并返回他们的数组下标。
&gt; 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

## 示例

```markdown
给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
```

## 答案

本题要求其实算是比较简单，只需要我们找出数组中任意两个相加之和等于目标数值的元素的下标即可。
而且题目说我们可以假设输入只会对应一个答案，也就是说不会出现多组数据相加都能得出目标数值的情况，我们只需要找一组，大大降低了难度。

### 方案一： 双层for循环

最简单的方案则是双层for循环，进行遍历判断，但是这种方案时间复杂度相对来说比较高 `O(n^2)`

```javascript
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    for(var i = 0; i &lt; nums.length; i ++){
        for(var j = nums.length - 1; j &gt; i; j --){
            if(nums[i] + nums[j] == target){
                return [i, j];
            }
        }
    }
    retrun []
};
```

### 方案二： hashmap

相比上面的双层for循环，这个方法的时间复杂度会比较低 `O(n)`

```javascript
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    let hashMap = {};
    for(var i = 0; i &lt; nums.length; i ++){
        if(hashMap.hasOwnProperty(target - nums[i])){
            return [i, hashMap[target-nums[i]]];
        }
        hashMap[nums[i]] = i;
    }
};
```
</content:encoded></item><item><title><![CDATA[深入了解Vue.js源码(#1-Vue构造函数)]]></title><description><![CDATA[本系列文章详细介绍了Vue.js源代码，对其中的JavaScript代码进行了详细的说明。 并且尝试将概念分解为JavaScript初学者可以理解的水平。 Vue 构造函数

Vue 实例是深入了解 Vue.js 源代码的最合适的切入点。 正如 Vue.js 指南所解释的那样…]]></description><link>https://wizd.dev/深入了解Vue-js源码-1/</link><guid isPermaLink="false">https://wizd.dev/深入了解Vue-js源码-1/</guid><pubDate>Tue, 07 May 2019 18:31:02 GMT</pubDate><content:encoded>
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-42-38-5f75fb98c1e274b008e1820cfe81599d-vue-constructor-fdc04a.png)

本系列文章详细介绍了Vue.js源代码，对其中的JavaScript代码进行了详细的说明。 并且尝试将概念分解为JavaScript初学者可以理解的水平。

## Vue 构造函数

 Vue 实例是深入了解 Vue.js 源代码的最合适的切入点。 正如 Vue.js 指南所解释的那样，“每个 Vue 应用程序都是通过使用 Vue 构造函数创建一个新的 Vue 实例来开始的。”



在 Vue.js 源代码中，创建新的 Vue 实例是通过使用 Vue 对象构造函数来实现的：

```javascript
function Vue (options) {
  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;
    !(this instanceof Vue)
  ) {
    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;);
  }
  this._init(options);
}
```

我们可以将对象构造函数理解为用于创建的模板。而对象构造函数通常按约定以大写字母开头：

```javascript
// Vue 构造函数的声明
function Vue (options) {
	// 构造函数函数体
}
```

我们一般使用 `new` 关键字调用对象构造函数。 例如，您可以按如下方式调用Vue构造函数：

```javascript
var vm = new Vue({
  // options
})
```

调用对象构造函数会返回一个新对象，并将函数内部的 `this` 关键字设置为最终返回的对象。

Vue 构造函数会接收一个参数：`options`。

```javascript
function Vue (options) {
	[. . . .]
}
```

Vue 对象构造函数中会使用 `if` 语句来判断当前环境是否为生产环境：

```javascript
if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;
    !(this instanceof Vue)
   ) {
  warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;);
}
```

如果当前的环境为生产环境，则 `if` 语句中的 `&amp;&amp;` 短路运算会返回 `false`, 并且后续的表达式`!(this instanceof Vue)`将不会被执行。

```javascript
process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;
```

如果您在开发环境中，则构造函数中会检查 `this` 是否为 Vue 的实例。

```javascript
!(this instanceof Vue)
```

如果您在开发环境中并且 `this` 不是 Vue 的实例，则构造函数中会调用 `warn` 函数并传递一个字符串作为参数，通知开发人员应该使用 `new`关键字将 Vue 作为函数构造函数调用。



我们将在另一篇文章中查看 `warn` 函数的实现细节。 如果您仔细观察，会发现传递给 `warn` 函数的参数使用到了单引号和反引号：

```javascript
warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;);
```

在单引号中间使用反引号，可以防止单引号的引用过早结束。

最后，Vue函数构造函数调用 `this._init` 方法，并将构造函数函数被调用时接收到的 `options`参数作为实参传递给该方法：

```javascript
function Vue (options) {
  [....]
  this._init(options);
}
```

但是请大家思考一个问题， 这个我们调用的 `this._init` 是在哪里定义的呢？正如我们所看到的，构造函数内部并未对这个 `._init` 方法进行定义。

快速进行全局搜索源码可以发现 `._init` 方法是在名为 `initMixin` 的函数中添加到 `Vue.prototype` 上的。

下一篇文章，我将带领大家一起探究 `initMixin` 方法究竟做了什么事情。
</content:encoded></item><item><title><![CDATA[CentOS使用yum安装MySQL]]></title><description><![CDATA[CentOS中默认没有MySQL的源，直接使用 会报错。 下面记录使用安装的详细步骤：

第一步：下载并安装源

yum-repo-mysql，这个网址中可以找到yum的MySQL源。

下载：
安装
第二步： 安装MySQL
第三步： 启动MySQL
第四步： 找到默认密码…]]></description><link>https://wizd.dev/CentOS使用yum安装MySQL/</link><guid isPermaLink="false">https://wizd.dev/CentOS使用yum安装MySQL/</guid><pubDate>Tue, 07 May 2019 18:03:57 GMT</pubDate><content:encoded>
CentOS中默认没有MySQL的`yum`源，直接使用`yum install mysql-community-server` 会报错。

下面记录使用`yum`安装`MySQL`的详细步骤：

## 第一步：下载并安装`MySQL`源
[yum-repo-mysql](https://dev.mysql.com/downloads/repo/yum/)，这个网址中可以找到yum的MySQL源。

### 下载：
```bash
wget https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm
```
### 安装
```bash
sudo yum localinstall mysql80-community-release-el7-2.noarch.rpm
```
## 第二步： 安装MySQL
```bash
sudo yum install mysql-community-server -y
```
## 第三步： 启动MySQL
```bash
systemctl start msyqld
```
## 第四步： 找到默认密码
MySQL安装完毕之后会自动设置一个默认密码，我们需要找到默认密码

```bash
grep &apos;temporary password&apos; /var/log/mysqld.log
```
![获取临时密码](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-44-43-da1c6d37edca4c602896f45b0d640436-temppass-071067.png)

## 第五步：连接到MySQL数据库，修改密码

这里连接需要用到上一步我们找到的数据库的默认密码。
```bash
mysql -uroot -p
```

连接成功之后，首先修改密码：
```bash
ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root123&apos;;
```

如果密码过于简单，比如我上面的密码，就很简单，会提示如下的错误：
![密码安全策略错误提示](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-44-54-de4733f62ba63683ed5f5e81e90b386f-passplicy-4ae126.png)

这里网上有很多教程，让设置如下两个变量（**你先往下看，别着急去执行这两条命令**）：
```bash
set global validate_password.policy=0;
set global validate_password.length=1;
```
这两项设置就是降低密码复杂度要求并且最小长度改成1的，但是如果是初次安装，默认密码还没有进行更改，这个操作是执行不了的，会有报错：`&apos;validate_password_policy&apos; 变量不存在`

所以首先，我们就需要先修改一个系统能接受的密码：（如：Fuck_66fuck）
```bash
ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Fuck_66fuck&apos;;
```
再去修改上面两个变量，然后重新设置一个简单的密码。
```bash
set global validate_password_policy=0;
set global validate_password_length=1;
```

上面这步可能会出错(出错信息如下)：
![设置变量错误提示](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-45-02-1b6535acccae5d289c55f8d5113d1479-errorinfo-5ec88c.png)

出错原因，是因为少密码校验的插件，给他装上就好了
```
install plugin validate_password soname &apos;validate_password.so&apos;;
```

这里还需要在注意一个问题，如果装的MySQL版本是8以上的话，上面那两个变量的名字就发生变化了，改的时候换成：
```
set global validate_password.policy=0;
set global validate_password.length=1;
```

最后再修改一个简单的密码：
```bash
ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;
```

## 大功告成啦！
其他后续设置，以后用空我再补上来。</content:encoded></item><item><title><![CDATA[CentOS部署Gogs-搭建私有Git服务器]]></title><description><![CDATA[一般公司都需要有自己的私有源代码托管服务，而SVN这种东西又不太好用，应该算是已经过时了吧（我自己瞎BB一下就好，求大家别打脸）。 GitHub挺好用的，但是服务器再国外，而且创建私有库是需要软妹币的。 GitLab也可以用来部署私有Git服务器，后续如果有机会我再发一篇教程出来…]]></description><link>https://wizd.dev/CentOS部署Gogs-搭建私有Git服务器/</link><guid isPermaLink="false">https://wizd.dev/CentOS部署Gogs-搭建私有Git服务器/</guid><pubDate>Tue, 12 Mar 2019 23:00:23 GMT</pubDate><content:encoded>

一般公司都需要有自己的私有源代码托管服务，而SVN这种东西又不太好用，应该算是已经过时了吧（我自己瞎BB一下就好，求大家别打脸）。
GitHub挺好用的，但是服务器再国外，而且创建私有库是需要软妹币的。
GitLab也可以用来部署私有Git服务器，后续如果有机会我再发一篇教程出来。

今天呢，简单的介绍一款极易搭建的自助 Git 服务: [Gogs](https://github.com/gogs/gogs)的安装和使用

## 第一步：准备依赖环境
* [安装和配置MySQL](https://github.com/a-gg/a-gg.github.io/issues/2)
* 创建用户及用户组`git`
```bash
groupadd git
useradd -g git git
```
* 安装git，这个简单`yum groupinstall &quot;Development tools&quot;`

## 第二步：下载Gogs解压二进制包
下载地址:[https://gogs.io/docs/installation/install_from_binary.html](https://gogs.io/docs/installation/install_from_binary.html)
```bash
wget https://dl.gogs.io/0.11.86/gogs_0.11.86_linux_amd64.tar.gz
```
解压：
```bash
tar -xvf gogs_0.11.86_linux_amd64.tar.gz
```

## 第三步：添加Gogs到系统服务
在gogs文件夹下面，已经提供了相应的模板文件`gogs/scripts/systemd/gogs.service`

我们需要将其复制到`/etc/systemd/system`目录下：
```bash
cp scripts/systemd/gogs.service /etc/systemd/system;
```

修改内容
```bash
vi /etc/systemd/system/gogs.service;
```
修改数据库，因为我们选择使用的MySQL所以将`After`修改成MySQL
```
After=mysqld.service
```

注释掉`Restart=always`(这一步是可选的，因为我自己在安装完成之后启动报错了，所以进行了如下的修改，如果你安装启动没问题，那么下面这一步，你可以不做)：
```
#Restart=always
```

注意看配置文件里的这个配置项：`ExecStart=/home/git/gogs/gogs web`
所以，我们需要把自己下载的gogs文件夹移动到git目录下，或者直接将这里路径改成自己需要的路径
```bash
mv gogs /home/git
```

激活服务：
```bash
systemctl enable gogs
```

## 创建数据库
在Gogs文件夹内也提供了相应的创建数据库的文件`mysqls.sql`，直接使用即可
```bash
mysql -uroot -p &lt; scripts/mysql.sql
```

## 启动Gogs
```bash
systemctl start gogs
```

## 访问并进行设置安装
启动成功之后，可以使用[域名:3000](http://域名:3000)

成功打开页面之后，需要进行简单的设置，即可使用。

## 相关配置
在使用Gogs之后我们需要进行简单的配置
配置文件路径为： `custom/conf/app.ini`

打开你就基本能看懂什么是什么了。
这里面要改的：
```ini
APP_NAME = Gogs
RUN_USER = git
RUN_MODE = prod

[database]
DB_TYPE  = mysql
HOST     = 127.0.0.1:3306
NAME     = gogs
USER     = root
PASSWD   = 123456
SSL_MODE = disable
PATH     = data/gogs.db

[repository]
ROOT = /home/git/gogs-repositories

[server]
DOMAIN           = localhost  这要改，改成自己域名
HTTP_PORT        = 3000
ROOT_URL         = http://localhost:3000  这里也要改成自己域名
DISABLE_SSH      = false
SSH_PORT         = 22  在启用ssh的时候，这个端口一般都需要更改，否则gogs服务无法启动
START_SSH_SERVER = false  这里要改成true, 否则ssh链接无法使用
OFFLINE_MODE     = false

[mailer]
ENABLED = false

[service]
REGISTER_EMAIL_CONFIRM = false
ENABLE_NOTIFY_MAIL     = false
DISABLE_REGISTRATION   = false
ENABLE_CAPTCHA         = true
REQUIRE_SIGNIN_VIEW    = false

[picture]
DISABLE_GRAVATAR        = false
ENABLE_FEDERATED_AVATAR = false

[session]
PROVIDER = file

[log]
MODE      = file
LEVEL     = Info
ROOT_PATH = /home/git/gogs/log

[security]
INSTALL_LOCK = true
SECRET_KEY   = xxxx

```</content:encoded></item><item><title><![CDATA[Kali Linux可用软件源汇总]]></title><description><![CDATA[是开发的基于 Debian 的 Linux 发行版。它的目标就是为了简单：在一个实用的工具包里尽可能多的包含渗透和审计工具。Kali 实现了这个目标。大多数做安全测试的开源工具都被囊括在内。 Kali Linux可用软件源汇总

复制如下内容到即可。]]></description><link>https://wizd.dev/Kali Linux可用软件源汇总/</link><guid isPermaLink="false">https://wizd.dev/Kali Linux可用软件源汇总/</guid><pubDate>Sun, 24 Feb 2019 01:11:47 GMT</pubDate><content:encoded>
`Kali`是`Offensive Security公司`开发的基于 Debian 的 Linux 发行版。它的目标就是为了简单：在一个实用的工具包里尽可能多的包含渗透和审计工具。Kali 实现了这个目标。大多数做安全测试的开源工具都被囊括在内。

## Kali Linux可用软件源汇总

复制如下内容到`/etc/apt/sources.list`即可。

```bash
#中科大
deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib
deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib

#阿里云
deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib
deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib

#清华大学
deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free
deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free

#浙大
deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free
deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free

#东软大学
deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib
deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib

#官方源
deb http://http.kali.org/kali kali-rolling main non-free contrib
deb-src http://http.kali.org/kali kali-rolling main non-free contrib
```
</content:encoded></item><item><title><![CDATA[终端特殊字符实现清屏和颜色控制等操作]]></title><description><![CDATA[在使用node.js编写命令行工具的时候，想要写一个命令行的工具条，然后需要对当前行进行清除操作，在反复查阅资料后发现，在终端内进行清屏等操作可以利用向终端输出特殊字符来实现。 颜色控制

以node.js为例，在终端中输出有颜色的文字的方式如下：

下表为常用颜色值对应的字符集…]]></description><link>https://wizd.dev/终端特殊字符实现清屏和颜色控制等操作/</link><guid isPermaLink="false">https://wizd.dev/终端特殊字符实现清屏和颜色控制等操作/</guid><pubDate>Thu, 25 Oct 2018 18:15:11 GMT</pubDate><content:encoded>
# 终端特殊字符实现清屏和颜色控制等操作

在使用node.js编写命令行工具的时候，想要写一个命令行的工具条，然后需要对当前行进行清除操作，在反复查阅资料后发现，在终端内进行清屏等操作可以利用向终端输出特殊字符来实现。

## 颜色控制

以node.js为例，在终端中输出有颜色的文字的方式如下：

```javascript
// 此行代码将在控制台输出黄色的Hello World.
// 行首的 \033[1;33m 是将后续输出文字的颜色修改为黄色
// 行尾的 \033[0m 是在输出完之后讲文字颜色回复正常，以免影响后面的内容
process.stdout.write(&quot;\033[1;33m Hello World. \033[0m \n&quot;)
```

下表为常用颜色值对应的字符集合

|颜色值|对应的字符|颜色值|对应的字符|颜色值|对应的字符|
|--|--|--|--|--|--|
|none         |`\033[0m`|  black        |`\033[0;30m`|  dark_gray    |`\033[1;30m`|  
|blue         |`\033[0;34m`|  light_blue   |`\033[1;34m`|  green        |`\033[0;32m`|  
|light_green -|`\033[1;32m`|  cyan         |`\033[0;36m`|  light_cyan   |`\033[1;36m`|  
|red          |`\033[0;31m`|  light_red    |`\033[1;31m`|  purple       |`\033[0;35m`|  
|light_purple |`\033[1;35m`|  brown        |`\033[0;33m`|  yellow       |`\033[1;33m`|  
|light_gray   |`\033[0;37m`|  white        |`\033[1;37m`|||

## 特殊效果设置

|代码|对应格式|代码|对应格式|
|--|--|--|--|
|`\033[0m `| 关闭所有属性 | `\033[1m `|  设置高亮度 |   
|`\03[4m  `| 下划线    | `\033[5m `|  闪烁    |
|`\033[7m `|  反显    | `\033[8m `|  消隐    |
|`\033[30m`   --   `\033[37m` |  设置前景色 |  | 
|`\033[40m`  --   `\033[47m`|   设置背景色 ||

前景色和背景色的取值范围表：

|前景|背景|颜色|
|--|--|--|
|30|40| 黑色|
|31|41| 紅色|
|32|42| 綠色|
|33|43| 黃色|
|34|44| 藍色|
|35|45| 紫紅色|
|36|46| 青藍色|
|37|47| 白色|

## 清屏等操作

在终端中进行清屏等操作，可以直接向终端输出如下的特殊代码即可。

```javascript
// 下面这行代码即可实现清屏效果
process.stdout.write(&apos;\033[2J&apos;)

// 下面这行代码可以将光标置于屏幕的左上角
process.stdout.write(&apos;\033[0;0f&apos;);

// 如果要清除当前行内容则可以将光标移动到指定的行首，然后清除当前行内容即可
process.stdout.write(&apos;\033[0;0f&apos;);
process.stdout.write(&apos;\033[K&apos;);

// 由于我要实现的是一个进度条效果，所以代码如下，用到了保存和恢复光标位置
setInterval(function() {
  process.stdout.write(&quot;\033[K&quot;); // 清除当前行内容
  process.stdout.write(&quot;\033[s&quot;); // 保存光标位置
  process.stdout.write(thisProgressBar.update(count++, 100)); // 更新进度条信息
  process.stdout.write(&quot;\033[u&quot;); // 恢复光标位r
}, 1000);
```

|字符|功能|字符|功能|
|--|--|--|--|
|`\033[nA`|光标上移n行|`\03[nB`| 光标下移n行|
|`\033[nC`| 光标右移n行|`\033[nD`| 光标左移n行|
|`\033[y;xH`|设置光标位置|`\033[2J`| 清屏|
|`\033[K`| 清除从光标到行尾的内容|`\033[s`| 保存光标位置|
|`\033[u`| 恢复光标位置|`\033[?25l`| 隐藏光标|
|\33[?25h`| 显示光标|||
</content:encoded></item><item><title><![CDATA[ES6常用内容介绍]]></title><description><![CDATA[变量声明- let、const let

ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。

特点：

1 块级作用域（ES6） 2 先声明再使用 3 不允许重复声明
const
const声明一个只…]]></description><link>https://wizd.dev/ES6常用内容介绍/</link><guid isPermaLink="false">https://wizd.dev/ES6常用内容介绍/</guid><pubDate>Mon, 22 Jan 2018 23:00:23 GMT</pubDate><content:encoded>

## 变量声明- let、const

### let

- ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。

- `let`特点：
  - 1 块级作用域（ES6）
  - 2 先声明再使用
  - 3 不允许重复声明

```javascript
/* 基本使用 */
let num = 2

{
  let num = 9
}
console.log(num)
```

### const

- const声明一个**只读的常量**。一旦声明，常量的值就不能改变。
- const的作用域与let命令相同：只在声明所在的块级作用域内有效

```javascript
const PI = 3.1415
console.log(PI) // 3.1415

// 修改 常量的值 会报错
PI = 3 // TypeError: Assignment to constant variable.

// 可以修改对象中属性的值
const user = { name: &apos;rose&apos; }
user.name = &apos;jack&apos;
```

## 字符串模板

- 说明：代替原始的字符串拼接

```javascript
const num = 1

// ${} 中可以使用JS表达式
let dv = `&lt;div&gt;${num}&lt;/div&gt;`
```

## 箭头函数

- [ES6箭头函数](http://es6.ruanyifeng.com/#docs/function)
- 注意 1：函数体内的this对象，就是定义时所在的对象（一般是外层函数中的this）
- 注意 2：无法使用arguments，没有arguments对象
- 注意 3：不能当作构造函数，不能使用new创建对象
- 注意：**不要在Vue的选项属性或回调上使用箭头函数**
  - 比如：`created: () =&gt; console.log(this.a)` 或 `vm.$watch(&apos;a&apos;, newValue =&gt; this.myMethod())`

```javascript
/* 语法： */
var fn = arg =&gt; arg

// 上面的箭头函数等同于：
var fn = function (arg) {
  return arg
}

var fn = () =&gt; {
  console.log(&apos;随机内容&apos;)
}
// 等同于：
var fn = function () {
  console.log(&apos;随机内容&apos;)
}
```

## rest参数

- ES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了
- 说明：rest 参数的类型是：数组
- 注意：rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错

```javascript
function add(...values) {
  var sum = 0
  values.forEach(function(val) {
    sum += val
  })
  return sum
}

add(2, 5, 3) // 10


// 报错
function f(a, ...b, c) {
  // ...
}
```

## 解构赋值

- [ES6解构](http://es6.ruanyifeng.com/#docs/destructuring)
- ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。

```javascript
// 对象解构
var { foo, bar } = { foo: &quot;aaa&quot;, bar: &quot;bbb&quot; }
foo // &quot;aaa&quot;
bar // &quot;bbb&quot;

// 数组解构
var [a, b, c] = [1, 2, 3]

// 函数参数的解构赋值
function foo({x, y}) {
  console.log(x, y)
}

foo({x: 1, y: 2}) // 1 2
```

## 对象简化语法

- 对象中的属性和方法，都可以使用简化语法

```javascript
/* 属性的简化语法： */
var foo = &apos;bar&apos;
var baz = {foo}

// 等同于
var baz = {foo: foo}


/* 方法的简化语法： */
var o = {
  method() {
    return &quot;Hello!&quot;
  }
}
// 等同于
var o = {
  method: function() {
    return &quot;Hello!&quot;
  }
}
```

### 属性名表达式

- ES6 允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内。

```javascript
var propKey = &apos;foo&apos;
var methodKey = &apos;bar&apos;

var obj = {
  [propKey]: true,
  [&apos;a&apos; + &apos;bc&apos;]: 123,
  [methodKey]() {
    return &apos;hi&apos;
  }
}
```

## class关键字

- ES6以前，JS是没有class概念的，而是通过构造函数+原型的方式来实现的
- 注意：ES6中的class仅仅是一个语法糖，并不是真正的类，与Java等服务端语言中的类是有区别的
- [ES6 - 文档](http://es6.ruanyifeng.com/#docs/class)

```javascript
class Person {
  constructor() {
    // 实例属性
    this.name = &apos;jack&apos;
  }

  // 实例方法
  say() {}

  // 静态方法
  static coding() {}
}
// 静态属性
Person.age = 0

console.log(Person.age)
```

- 类继承：
  - 1 如果子类提供了 constructor，那么，必须要调用`super()`
  - 2 子类添加属性，必须在 super() 调用后面

```javascript
// 类继承：
class Chinese extends Person {
  constructor(name, gender, weight) {
    super(name, gender)

    this.weight = weight
  }
}

const ch = new Chinese(&apos;小明&apos;, &apos;男&apos;, 130)
```

### 静态属性和实例属性

- 静态属性：直接通过类名访问
- 实例属性：通过实例对象访问

## ES6模块化 - import和export

- [导入和导出](http://blog.csdn.net/DeepLies/article/details/52916221?locationNum=13&amp;fps=1)
- `import`：导入模块
- `export`：导出模块

- 注意1：`export default` 每个模块只能使用一次
- 注意2：`export` 每个模块可以使用多次
- 注意3：一个模块可以导出多个内容，`export default` 和 `export` 可以一起使用

```javascript
// main.js
// 导入 default 内容，可自定义导入名称
// import num from &apos;./a.js&apos;
import num1 from &apos;./a.js&apos;

// a.js
const num = 123
export default num
```

```javascript
// main.js
// 导入 export内容
// 注意：导入非default模块内容（str、fn），必须与 导出名称 相同，或者通过 as 修改
// 注意：必须使用花括号
import { str, fn } from &apos;./b&apos;

// 加载并修改变量名
// import { str as str1, fn } from &apos;./b&apos;
// 整体加载
// import * as bModule from &apos;./b&apos;

// b.js
export const str = &apos;abc&apos;
export function fn() {}
```

```javascript
// main.js
import { str, fn } from &apos;./b&apos;

// b.js
const str = &apos;abc&apos;
function fn() {}
// 一次性导出
export { str, fn }
```

## 数组扩展运算符

- 扩展运算符（spread）是三个点（...）。作用：将一个数组转为用逗号分隔的参数序列

```javascript
var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]
console.log(...arr)

// 上面这句代码相当于：
console.log(arr[0], arr[1], arr[2]);
```

## 对象扩展运算符

- 注意：该语法不是真正的ES规范，需要使用`stage-2`解析

```javascript
var obj = {name: &apos;jack&apos;, age: 19}
var o = {...obj, gender: &apos;male&apos;}
// o =&gt; {name: &apos;jack&apos;, age: 19, gender: &apos;male&apos;}
```

## Promise 异步编程

- [ES6 - Promise](http://es6.ruanyifeng.com/#docs/promise)
- Promise是一种对尚未返回的数据的一种承诺
- `promise`：承诺、保证

### 介绍

```markup
Promise 是异步编程的一种解决方案，比传统的解决方案`回调函数和事件`更合理和更强大
Promise 将异步操作以同步操作（链式编程）的流程表达出来，避免了层层嵌套的回调函数（回调地狱的问题）
```

- 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。

- Promise对象代表一个异步操作，有三种状态：**pending（进行中）**、**fulfilled（已成功）**和**rejected（已失败）**
  - 状态改变 1：pending -&gt; fufilled
  - 状态改变 2：pending -&gt; rejected
  - **一旦状态改变，就不会再变**

### 基本使用

```javascript
// Promise 是一个构造函数
// 通过 new 创建Promise的实例对象
var promise = new Promise(function(resolve, reject) {
  // ... some code

  if (/* 异步操作成功 */) {
    resolve(value)
  } else {
    reject(error)
  }
})
```

### then 和 catch

- `then()`： 用于指定异步操作成功时的回调函数
- `catch()`：用于指定发生错误时的回调函数
- 说明：`then()`方法可以有多个，按照先后顺序执行，通过回调函数返回值传递数据给下一个then

```javascript
let promise = new Promise(function(resolve, reject) {
  console.log(&apos;1 Promise&apos;);
  // 异步操作
  setTimeout(resolve, 1000, &apos;done&apos;);
});

promise.then(function() {
  console.log(&apos;3 resolved.&apos;);
});

console.log(&apos;2 Hi!&apos;);
```

- 异步读取图片示例：

```javascript
const loadImageAsync = function(url) {
  return new Promise(function(resolve, reject) {
    const image = new Image()
    image.src = url

    // 图片加载成功
    image.onload = function() {
      resolve(image)
    }

    // 图片加载失败
    image.onerror = function() {
      reject(new Error(&apos;Could not load image at &apos; + url))
    }
  })
}

// 推荐方式：
loadImageAsync(&apos;url&apos;)
  // 成功处理
  .then(function(value) {})
  // 错误处理
  .catch(function(err) {})

// 其他方式：
loadImageAsync(&apos;url&apos;)
  .then(function(value) {
    // 成功，value 获取到 图片对象（image）
  }, function(error) {
    // 失败，error 获取到 错误信息
  });
```

### all 和 race

```javascript
// 所有请求发送成功：
const p = Promise.all([
  axios(&apos;http://vue.studyit.io/api/getlunbo&apos;),
  axios(&apos;http://vue.studyit.io/api/getnewslist&apos;)
])

p.then(function (res) {
  // res 是 all() 方法中所有异步操作的结果
  console.log(&apos;两个异步请求完成：&apos;, res);
})

// 哪个请求先发送成功：
const p = Promise.race([
  axios(&apos;http://vue.studyit.io/api/getlunbo&apos;),
  axios(&apos;http://vue.studyit.io/api/getnewslist&apos;)
])

p.then(function (res) {
  // res 是 race() 方法中先完成的异步操作的结果：
  console.log(&apos;一个异步请求完成：&apos;, res);
})
```</content:encoded></item><item><title><![CDATA[CentOS终端中文乱码的解决方案]]></title><description><![CDATA[在使用ssh连接CentOS的时候，发现终端中出现中文乱码的问题，记录一下解决方案 问题描述

当ssh连接后，终端中显示如下：

解决方案

编辑文件，加入语言设置即可

添加如下内容]]></description><link>https://wizd.dev/CentOS终端中文乱码的解决方案/</link><guid isPermaLink="false">https://wizd.dev/CentOS终端中文乱码的解决方案/</guid><pubDate>Thu, 06 Apr 2017 11:47:15 GMT</pubDate><content:encoded>
# CentOS终端中文乱码的解决方案

在使用ssh连接CentOS的时候，发现终端中出现中文乱码的问题，记录一下解决方案

## 问题描述

当ssh连接后，终端中显示如下：

```bash
-bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory
```

## 解决方案

编辑`/etc/enviroment`文件，加入语言设置即可

```bash
vi /etc/environment
```

添加如下内容

```bash
LANG=en_US.utf-8
LC_ALL=en_US.utf-8
```</content:encoded></item><item><title><![CDATA[CentOS7安装Nginx]]></title><description><![CDATA[Step One-添加Nginx源 命令行中输入如下命令，添加Nginx源

Step Two-安装Nginx
Step Three-启动Nginx
Step Four-配置防火墙规则

如果使用的是防火墙

如果是用的是iptables则手动添加端口规则]]></description><link>https://wizd.dev/CentOS7安装Nginx/</link><guid isPermaLink="false">https://wizd.dev/CentOS7安装Nginx/</guid><pubDate>Thu, 22 Dec 2016 23:00:23 GMT</pubDate><content:encoded>
# CentOS7安装Nginx

## Step One-添加Nginx源

命令行中输入如下命令，添加Nginx源

```bash
sudo yum install epel-release
```

## Step Two-安装Nginx

```bash
sudo yum install nginx
```

## Step Three-启动Nginx

```bash
sudo systemctl start nginx
```

## Step Four-配置防火墙规则

如果使用的是防火墙

```bash
sudo firewall-cmd --permanent --zone=public --add-service=http 
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload
```

如果是用的是iptables则手动添加端口规则</content:encoded></item><item><title><![CDATA[CentOS安装Node.js]]></title><description><![CDATA[第一种方式 yum自带源中没有Node.js,所以首先要获取Node.js资源：

获取完成后，执行如下代码

安装完成之后使用如下指令测试安装是否成功

第二种方式

使用已经编译好的源码

去Node.js官方网站直接下载即可

由于是.xz格式的文件…]]></description><link>https://wizd.dev/CentOS安装Node-js/</link><guid isPermaLink="false">https://wizd.dev/CentOS安装Node-js/</guid><pubDate>Tue, 22 Nov 2016 23:00:23 GMT</pubDate><content:encoded>
## 第一种方式

yum自带源中没有Node.js,所以首先要获取Node.js资源：

```bash
# 4.x
curl --silent --location https://rpm.nodesource.com/setup_4.x | bash -
# 5.x
curl --silent --location https://rpm.nodesource.com/setup_5.x | bash -
# 0.10
curl --silent --location https://rpm.nodesource.com/setup | bash -
```

获取完成后，执行如下代码

```bash
yum install -y nodejs
```

安装完成之后使用如下指令测试安装是否成功

```bash
node -v
```

## 第二种方式

使用已经编译好的源码

去Node.js官方网站直接下载即可

```bash
wget https://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz
```

由于是.xz格式的文件，需要用如下命令将其转换为tar可以处理的格式

```bash
xz -d node-v6.9.1-linux-x64.tar.xz
```

再使用`tar`对其进行解压

```bash
tar -xvf node-v6.9.1-linux-x64.tar
```

紧接着，可以修改一下文件夹名称，或者不修改也行，然后将文件夹放在合适的位置（随意）

```bash
mv node-v6.9.1-linux-x64 node
```

然后去修改`/etc/profile`,新增如下内容

```bash
export NODE_HOME=你的文件路径/node
export PATH=$NODE_HOME/bin:$PATH
```

然后重新登录就可以测试了

```bash
node -v
```

## 第三种方式

使用源码进行编译安装，首先要去官网下载源码

```bash
wget https://nodejs.org/dist/v6.9.1/node-v6.9.1.tar.gz
```

然后解压

```bash
tar -zxvf node-v6.9.1.tar.gz
```

紧接着，安装必要的编译软件：

* gcc
* gcc-c++
* python

这里要注意 gcc 好像要求是4.8以上的，如果不是可能报错

```bash
sudo yum install gcc gcc-c++
```

然后直接编译安装就好了

```bash
./configure
make &amp;&amp; make install
```
</content:encoded></item><item><title><![CDATA[JavaScript深拷贝实现]]></title><description><![CDATA[在实际开发当中，我们经常会遇到要对对象进行深拷贝的情况。而且深拷贝这个问题在面试过程中也经常会遇到，下面就对本人在学习过程中的收获，做以简单的总结。 什么是浅拷贝，什么是深拷贝？
什么是浅拷贝

关于浅拷贝的概念，我在网上看到一种说法，直接上代码。

但是我个人认为…]]></description><link>https://wizd.dev/JavaScript深拷贝实现/</link><guid isPermaLink="false">https://wizd.dev/JavaScript深拷贝实现/</guid><pubDate>Sat, 08 Oct 2016 19:02:29 GMT</pubDate><content:encoded>
在实际开发当中，我们经常会遇到要对对象进行深拷贝的情况。而且深拷贝这个问题在面试过程中也经常会遇到，下面就对本人在学习过程中的收获，做以简单的总结。

## 什么是浅拷贝，什么是深拷贝？
### 什么是浅拷贝
关于浅拷贝的概念，我在网上看到一种说法，直接上代码。
```javascript
var person = {name: &quot;Jason&quot;, age: 18, car: {brand: &quot;Ferrari&quot;, type: &quot;430&quot;}};
var person1 = person; 		//他们认为这是浅拷贝
```
但是我个人认为，上面这个根本不涉及拷贝，只是一个简单的引用赋值。以我的理解，浅拷贝应该是不考虑对象的引用类型的属性，只对当前对象的所有成员进行拷贝，代码如下：
```javascript
function copy(obj){
	var objCopy = {};
	for(var key in obj){
		objCopy[key] = obj[key];
	}
	return objCopy;
}

var person = {name: &quot;Jason&quot;, age: 18, car: {brand: &quot;Ferrari&quot;, type: &quot;430&quot;}};
var personCopy = copy(person);
```
上面这段代码中，`person`对象拥有两个基本类型的属性`name`和`age`，一个引用类型的属性`car`，当使用如上方法进行拷贝的时候，`name`和`age`属性会被正常的拷贝，但是`car`属性，只会进行引用的拷贝，这样会导致拷贝出来的对象`personCopy`和`person`会共用一个`car`对象。这样就是所谓的浅拷贝。

### 什么是深拷贝

深拷贝的就是在拷贝的时候，需要将当前要拷贝的对象内的所有引用类型的属性进行完整的拷贝，也就是说拷贝出来的对象和原对象之间没有任何数据是共享的，所有的东西都是自己独占的一份。

## 如何实现深拷贝
### 实现深拷贝需要考虑的问题
实现深拷贝需要考虑如下几个因素：
* 传入的对象是使用对象字面量`{}`创建的对象还是由构造函数生成的对象
* 如果对象是由构造函数创建出来的，那么是否要拷贝原型链上的属性
* 如果要拷贝原型链上的属性，那么如果原型链上存在多个同名的属性，保留哪个
* 处理循环引用的问题

### 第三方库实现深拷贝

#### jQuery的$.extend()
我们可以通过`$.extend()`方法来完成深复制。值得庆幸的是，我们在`jQuery`中可以通过添加一个参数来实现递归`extend`。调用`$.extend(true, {}, ...)`就可以实现深复制，参考下面的例子:
```javascript
var x = {
    a: 1,
    b: { f: { g: 1 } },
    c: [ 1, 2, 3 ]
};

var y = $.extend({}, x),          //shallow copy
    z = $.extend(true, {}, x);    //deep copy

y.b.f === x.b.f       // true
z.b.f === x.b.f       // false
```

但是jQuery的这个`$.extend()`方法，有弊端，什么弊端呢？我们看下面的例子：
```javascript
var objA = {};
var objB = {};

objA.b = objB;
objB.a = objA;

$.extend(true,{},a);

//这个时候就出现异常了
//Uncaught RangeError: Maximum call stack size exceeded(…)
```
也就是说，jQuery中的`$.extend()`并没有处理循环引用的问题。

### 使用JSON对象实现深拷贝
使用`JSON`全局对象的`parse`和`stringify`方法来实现深复制也算是一个简单讨巧的方法。
```javascript
function jsonClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
var clone = jsonClone({ a:1 });
```

然而使用这种方法会有一些隐藏的坑，它能正确处理的对象只有 `Number`, `String`, `Boolean`, `Array`, 扁平对象，即那些能够被 json 直接表示的数据结构。


### 自己造轮子
下面我们给出一个简单的解决方案，当然这个方案是参考别人的方式来实现的。希望对大家有用。

```javascript
var clone = (function() {
	//这个方法用来获取对象的类型 返回值为字符串类型 &quot;Object RegExp Date Array...&quot;
	var classof = function(o) {
		if (o === null) {
			return &quot;null&quot;;
		}
		if (o === undefined) {
			return &quot;undefined&quot;;
		}
		// 这里的Object.prototype.toString很可能用的就是Object.prototype.constructor.name
		// 这里使用Object.prototype.toString来生成类型字符串
		var className = Object.prototype.toString.call(o).slice(8, -1);
		return className;
	};

	//这里这个变量我们用来存储已经保存过的属性，目的在于处理循环引用的问题
	var references = null;

	//遇到不同类型的对象的处理方式
	var handlers = {
		//正则表达式的处理
		&apos;RegExp&apos;: function(reg) {
			var flags = &apos;&apos;;
			flags += reg.global ? &apos;g&apos; : &apos;&apos;;
			flags += reg.multiline ? &apos;m&apos; : &apos;&apos;;
			flags += reg.ignoreCase ? &apos;i&apos; : &apos;&apos;;
			return new RegExp(reg.source, flags);
		},
		//时间对象处理
		&apos;Date&apos;: function(date) {
			return new Date(+date);
		},
		//数组处理 第二个参数为是否做浅拷贝
		&apos;Array&apos;: function(arr, shallow) {
			var newArr = [],
			i;
			for (i = 0; i &lt; arr.length; i++) {
				if (shallow) {
					newArr[i] = arr[i];
				} else {
					//这里我们通过reference数组来处理循环引用问题
					if (references.indexOf(arr[i]) !== -1) {
						continue;
					}
					var handler = handlers[classof(arr[i])];
					if (handler) {
						references.push(arr[i]);
						newArr[i] = handler(arr[i], false);
					} else {
						newArr[i] = arr[i];
					}
				}
			}
			return newArr;
		},
		//正常对象的处理 第二个参数为是否做浅拷贝
		&apos;Object&apos;: function(obj, shallow) {
			var newObj = {}, prop, handler;
			for (prop in obj) {
				//关于原型中属性的处理太过复杂，我们这里暂时不做处理
				//所以只对对象本身的属性做拷贝
				if (obj.hasOwnProperty(prop)) {
					if (shallow) {
						newObj[prop] = obj[prop];
					} else {
						//这里还是处理循环引用的问题
						if (references.indexOf(obj[prop]) !== -1) {
							continue;
						}
						
						handler = handlers[classof(obj[prop])];
						//如果没有对应的处理方式，那么就直接复制
						if (handler) {
							references.push(obj[prop]);
							newObj[prop] = handler(obj[prop], false);
						} else {
							newObj[prop] = obj[prop];
						}
					}
				}
			}
			return newObj;
		}
	};

	return function(obj, shallow) {
		//首先重置我们用来处理循环引用的这个变量
		references = [];
		//我们默认处理为浅拷贝
		shallow = shallow === undefined ? true : false;
		var handler = handlers[classof(obj)];
		return handler ? handler(obj, shallow) : obj;
	};
}());

(function() {
	//下面是一些测试代码
	var date = new Date();
	var reg = /hello word/gi;
	var obj = {
		prop: &apos;this ia a string&apos;,
		arr: [1, 2, 3],
		o: {
			wow: &apos;aha&apos;
		}
	};
	var refer1 = {
		arr: [1, 2, 3]
	};
	var refer2 = {
		refer: refer1
	};
	refer1.refer = refer2;

	var cloneDate = clone(date, false);
	var cloneReg = clone(reg, false);
	var cloneObj = clone(obj, false);
	alert((date !== cloneDate) &amp;&amp; (date.valueOf() === cloneDate.valueOf()));
	alert((cloneReg !== reg) &amp;&amp; (reg.toString() === cloneReg.toString()));
	alert((obj !== cloneObj) &amp;&amp; (obj.arr !== cloneObj.arr) &amp;&amp; (obj.o !== cloneObj.o) &amp;&amp; (JSON.stringify(obj) === JSON.stringify(cloneObj)));

	clone(refer2, false);
	alert(&quot;I&apos;m not dead yet!&quot;);
	// Output:
	// true
	// true
	// true
	// I&apos;m not dead yet!
}());
```
</content:encoded></item><item><title><![CDATA[CentOS 7 Shadowsocks 安装]]></title><description><![CDATA[架设VPN服务器真不是件容易的事儿，之前尝试了，满心欢喜的搭建好之后发现被墙了，那个失落感。。。后来又不断的爬帖子，找到了使用混淆的招，但是经过尝试之后，还是不行。 之前咨询VPS客服的时候告诉我，服务器只支持，难住我了，一度都要放弃了。后来在网上看到有关于的相关内容…]]></description><link>https://wizd.dev/CentOS-7-Shadowsocks-安装/</link><guid isPermaLink="false">https://wizd.dev/CentOS-7-Shadowsocks-安装/</guid><pubDate>Thu, 29 Sep 2016 22:53:05 GMT</pubDate><content:encoded>
架设VPN服务器真不是件容易的事儿，之前尝试了`OpenVPN`，满心欢喜的搭建好之后发现被墙了，那个失落感。。。后来又不断的爬帖子，找到了使用`Obfsproxy`混淆`OpenVPN`的招，但是经过尝试之后，还是不行。

之前咨询VPS客服的时候告诉我，服务器只支持`OpenVPN`，难住我了，一度都要放弃了。后来在网上看到有关于`obfs4`的相关内容，也不想去看了，心累。但后来询问客服，又得到一个好消息，就是`ShadowSocks`是支持的，今天动手，尝试了一番，算是小有成果。

## ShadowSocks简介

ShadowSocks是基于`Socks5`,使用Python,C++,C#等语言开发的，用于保护网络流量、加密资料传输的工具。

注意ShadowSocks不是VPN，它只是网络代理，不能用作匿名通信，他的宗旨不在于提供完善的通信安全机制，而是为了协助用户突破某些网络环境的封锁。

## 安装步骤

在CentOS下，安装ShadowSocks的方法有好多种。

### 第一种
通过github,[https://github.com/shadowsocks/shadowsocks-libev](https://github.com/shadowsocks/shadowsocks-libev)

首先安装所需的库
```bash
sudo yum install gcc autoconf libtool automake make zlib-devel openssl-devel asciidoc xmlto
```
clone git库
```bash
git clone https://github.com/shadowsocks/shadowsocks-libev.git
```

编译安装
```bash
cd shadowsocks-libev
./configure &amp;&amp; make
sudo make install
```

### 第二种

直接通过`yum`安装
```bash
yum install shadowsocks-libev
```

### 第三种

一键脚本安装
```bash
cd /tmp
wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh
chmod +x shadowsocks-libev.sh
./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log
```

## 配置

ShadowSocks配置文件所在位置为：
```bash
/etc/shadowsocks-libev/config.json
```
配置文件格式为：
```json
{
    &quot;server&quot;:[&quot;[::0]&quot;,&quot;0.0.0.0&quot;],
    &quot;server_port&quot;:your_server_port,
    &quot;local_address&quot;:&quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;your_password&quot;,
    &quot;timeout&quot;:600,
    &quot;method&quot;:&quot;aes-256-cfb&quot;
}
```

## 启动命令
```bash
service shadowsocks start   # 启动
service shadowsocks stop    # 停止
service shadowsocks restart # 重启
```

如果是使用git库自己编译安装的，可能会没法使用上面的命令进行启动。具体原因还在调查当中。哈哈哈，不过如果出现了不能使用的情况，可以先用`ss-server`凑合。

也可以通过如下方式自己新建启动脚本文件:

新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：
```bash
[Unit]
Description=Shadowsocks

[Service]
TimeoutStartSec=0
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks-libev/config.json

[Install]
WantedBy=multi-user.target
```

执行以下命令启动ShadowSocks服务:
```bash
$ systemctl enable shadowsocks
$ systemctl start shadowsocks
```
为了检查ShadowSocks服务是否已经成功启动，可以执行如下命令来查看服务的状态：
```bash
systemctl status shadowsocks -l
```
</content:encoded></item><item><title><![CDATA[VPS架设OpenVPN服务器]]></title><description><![CDATA[由于GFW如神一般的存在，使用局域网的我们不得不尝试去做一些事情，让自己接触外面的世界。 外面的世界很精彩，里面的世界很无奈。 由于前几天把所有东西从香港VPS搬到了Tokyo VPS，之前在windows下架设的VPN也就不能再用了。

这次架设VPN是在CentOS系统下…]]></description><link>https://wizd.dev/VPS架设OpenVPN服务器/</link><guid isPermaLink="false">https://wizd.dev/VPS架设OpenVPN服务器/</guid><pubDate>Tue, 20 Sep 2016 17:27:32 GMT</pubDate><content:encoded>
由于GFW如神一般的存在，使用局域网的我们不得不尝试去做一些事情，让自己接触外面的世界。
外面的世界很精彩，里面的世界很无奈。

由于前几天把所有东西从香港VPS搬到了Tokyo VPS，之前在windows下架设的VPN也就不能再用了。

这次架设VPN是在CentOS系统下，过程各种曲折。下面就把最简洁的方法奉上。

## 安装脚本获取

github简直无所不能，所以我在上面发现了一个安装OpenVPN的脚本，简直不要太方便
[GitHub飞机票](https://github.com/Nyr/openvpn-install)

```bash
#直接执行如下代码，获取执行一步完成
wget https://git.io/vpn -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh
```

配置什么的大家应该完全可以看懂。。。一路往下就ok了

## 问题处理
安装完成之后，可能会出现vpn可以连接，但是却无法上网的情况。

究其根源是路由转发的问题：

脚本中应该是多添加了一条`iptables nat`规则,那么我们把`iptables`的转发规则中的`-o eth0`那条去掉，只保留一条，即：
```bash
iptables -t nat -A POSTROUTING -s 10.8.0.0/24  -j MASQUERADE
```
然后
```bash
service iptables save
service iptables restart
```

## 悲剧收尾
就在千辛万苦的把所有的东西都搞定之后，VPN刚连上，google秒开，但是。。。
GFW实在太强了，连接建立好没3秒马上就能给你掐了,什么东西都ping不通了。。。 大写的服了，真服！

这个问题还没解决，有大神解决了的，给指点下迷津。。。

</content:encoded></item><item><title><![CDATA[JavaScript预解析]]></title><description><![CDATA[JavaScript是解释型的语言，但是他并不是真的在运行的时候逐句的往下解析执行。 我们来看下面这个例子：

在上面这段代码中，函数func的调用是在其声明之前，如果说JavaScript代码真的是逐句的解析执行，那么在第一句调用的时候就会出错，然而事实并非如此…]]></description><link>https://wizd.dev/JavaScript预解析/</link><guid isPermaLink="false">https://wizd.dev/JavaScript预解析/</guid><pubDate>Mon, 19 Sep 2016 17:31:28 GMT</pubDate><content:encoded>JavaScript是解释型的语言，但是他并不是真的在运行的时候逐句的往下解析执行。

我们来看下面这个例子：

```javascript
func();

function func(){
    alert(&quot;Funciton has been called&quot;);
}
```
在上面这段代码中，函数func的调用是在其声明之前，如果说JavaScript代码真的是逐句的解析执行，那么在第一句调用的时候就会出错，然而事实并非如此，上面的代码可以正常执行，并且alert出来`Function has been called`。

**所以，可以得出结论，JavaScript并非仅在运行时简简单单的逐句解析执行！**

## JavaScript 预解析
JavaScript引擎在对JavaScript代码进行解释执行之前，会对JavaScript代码进行预解析，在预解析阶段，会将以关键字`var`和`function`开头的语句块提前进行处理。

*关键问题是怎么处理呢？*

当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。

重新来看上面的那段代码
```javascript
func();

function func(){
    alert(&quot;Funciton has been called&quot;);
}
```
由于JavaScript的预解析机制，上面的代码就等效于：
```javascript
function func(){
    alert(&quot;Funciton has been called&quot;);
}

func();
```
看完函数声明的提升，再来看一个变量声明提升的例子：
```javascript
alert(a);
var a = 1;
```
由于JavaScript的预解析机制，上面这段代码，alert出来的值是`undefined`，如果没有预解析，代码应该会直接报错`a is not defined`，而不是输出值。

Wait a minute, 不是说要提前的吗？那不是应该alert出来1，为什么是`undefined`?

那么在这里有必要说一下`声明`、`定义`、`初始化`的区别。其实这几个概念是C系语言的人应该都比较了解的。

| 行为 | 说明 |
|--|--|
|声明|告诉编译器/解析器有这个变量存在,这个行为是不分配内存空间的,在JavaScript中，声明一个变量的操作为：`var a;`|
|定义|为变量分配内存空间，在C语言中，一般声明就包含了定义，比如：`int a;`,但是在JavaScript中，`var a;`这种形式就只是声明了。|
|初始化|在定义变量之后，系统为变量分配的空间内存储的值是不确定的，所以需要对这个空间进行初始化，以确保程序的安全性和确定性|
|赋值|赋值就是变量在分配空间之后的某个时间里，对变量的值进行的刷新操作（修改存储空间内的数据)|

所以我们说的提升，是**声明**的提升。

那么再回过头看，上面的代码就等效于：
```javascript
var a; //这里是声明
alert(a);//变量声明之后并未有初始化和赋值操作，所以这里是 undefined
a = 1;
```

## 复杂点的情况分析
通过上一小节的内容，我们对变量、函数声明提升已经有了一个最基本的理解。那么接下来，我们就来分析一些略复杂的情况。

### 函数同名
观察下面这段代码:
```javascript
func1();
function func1(){
    console.log(&apos;This is func1&apos;);
}

func1();
function func1(){
    console.log(&apos;This is last func1&apos;);
}
```
输出结果为：
```bash
This is last func1
This is last func1
```
原因分析：由于预解析机制，`func1`的声明会被提升，提升之后的代码为：
```javascript
function func1(){
    console.log(&apos;This is func1&apos;);
}
function func1(){
    console.log(&apos;This is last func1&apos;);
}
func1();
func1();
```
同名的函数，后面的会覆盖前面的，所以两次输出结果都是`This is last func1`。

### 变量和函数同名
```javascript
alert(foo); 
function foo(){}
var foo = 2;
```
当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为
```javascript
function foo(){}
```
我们还是来吧预解析之后的代码展现出来:
```javascript
function foo(){};
alert(foo);
foo = 2;
```
再来看一种
```javascript
var num = 1;
function num () {
    alert( num );
}
num();
```
代码执行结果为：
```
Uncaught TypeError: num is not a function
```
直接上预解析后的代码：
```javascript
function num(){
    alert(num);
}
num = 1;
num();
```

## 预解析是分作用域的
声明提升并不是将所有的声明都提升到window对象下面，提升原则是提升到变量运行的环境(作用域)中去。

```javascript
function showMsg() 
{ 
    var msg = &apos;This is message&apos;; 
} 
alert(msg); // msg未定义
```

还是直接把预解析之后的代码写出来：
```javascript
function showMsg() 
{ 
    var msg;
    msg = &apos;This is message&apos;; 
} 
alert(msg); // msg未定义
```

## 预解析是分段的
分段，其实就分script标签的
```markup
&lt;script&gt;
func();  // 输出 AA2;
function func(){
    console.log(&apos;AA1&apos;);
}

function func(){
    console.log(&apos;AA2&apos;);
}
&lt;/script&gt;


&lt;script&gt;
function func(){
    console.log(&apos;AA3&apos;);
}
&lt;/script&gt;

```
在上面代码中，第一个script标签中的两个`func`进行了提升，第二个`func`覆盖了第一个`func`，但是第二个script标签中的`func`并没有覆盖上面的第二个`func`。所以说预解析是分段的。

tip:但是要注意，分段只是单纯的针对函数，变量并不会分段预解析。

## 函数表达式并不会被提升
```javascript
func();
var func = function(){
    alert(&quot;我被提升了&quot;);
};
```
这里会直接报错，`func is not a function`，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下：
```javascript
var func;
func();
func = function(){
    alert(&quot;我被提升了&quot;);
}
```

## 条件式函数声明
```javascript
console.log(typeof func);
if(true){
    function(){
        return 1;
    }
}
console.log(typeof func);
```
上面这段代码，就是所谓的条件式函数声明，这段代码在Gecko引擎中打印`&quot;undefined&quot;`、`&quot;function&quot;`；而在其他浏览器中则打印`&quot;function&quot;`、`&quot;function&quot;`。

原因在于Gecko加入了ECMAScript以外的一个feature：条件式函数声明。
&gt;Conditionally created functions Functions can be conditionally declared, that is, a function declaration can be nested within an if statement.


&gt;Note: Although this kind of function looks like a function declaration, it is actually an expression (or statement), since it is nested within another statement. See differences between function declarations and function expressions.

Note中的文字说明，条件式函数声明的处理和函数表达式的处理方式一样，所以条件式函数声明没有声明提升的特性。


</content:encoded></item><item><title><![CDATA[CentOS7 iptables配置]]></title><description><![CDATA[CentOS7使用的防火墙默认为firewalle,本篇文章主要讲述如何在CentOS7中安装和使用iptables防火墙。 安装iptable iptable-service

禁用/停止自带的firewalld服务

设置现有规则

其他规则设定

保存规则设定

开启ipt…]]></description><link>https://wizd.dev/CentOS7-iptables配置/</link><guid isPermaLink="false">https://wizd.dev/CentOS7-iptables配置/</guid><pubDate>Sun, 18 Sep 2016 17:49:39 GMT</pubDate><content:encoded>
CentOS7使用的防火墙默认为firewalle,本篇文章主要讲述如何在CentOS7中安装和使用iptables防火墙。

安装iptable iptable-service

```bash
#先检查是否安装了iptables
service iptables status
#安装iptables
yum install -y iptables
#升级iptables
yum update iptables 
#安装iptables-services
yum install iptables-services
```
禁用/停止自带的firewalld服务

```bash
#停止firewalld服务
systemctl stop firewalld
#禁用firewalld服务
systemctl mask firewalld
```

设置现有规则

```bash
#查看iptables现有规则
iptables -L -n
#先允许所有,不然有可能会杯具
iptables -P INPUT ACCEPT
#清空所有默认规则
iptables -F
#清空所有自定义规则
iptables -X
#所有计数器归0
iptables -Z
#允许来自于lo接口的数据包(本地访问)
iptables -A INPUT -i lo -j ACCEPT
#开放22端口
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
#开放21端口(FTP)
iptables -A INPUT -p tcp --dport 21 -j ACCEPT
#开放80端口(HTTP)
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
#开放443端口(HTTPS)
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
#允许ping
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT
#允许接受本机请求之后的返回数据 RELATED,是为FTP设置的
iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT
#其他入站一律丢弃
iptables -P INPUT DROP
#所有出站一律绿灯
iptables -P OUTPUT ACCEPT
#所有转发一律丢弃
iptables -P FORWARD DROP
```
其他规则设定

```bash
#如果要添加内网ip信任（接受其所有TCP请求）
iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT
#过滤所有非以上规则的请求
iptables -P INPUT DROP
#要封停一个IP，使用下面这条命令：
iptables -I INPUT -s ***.***.***.*** -j DROP
#要解封一个IP，使用下面这条命令:
iptables -D INPUT -s ***.***.***.*** -j DROP
```
保存规则设定

```bash
#保存上述规则
service iptables save
```
开启iptables服务 

```bash
#注册iptables服务
#相当于以前的chkconfig iptables on
systemctl enable iptables.service
#开启服务
systemctl start iptables.service
#查看状态
systemctl status iptables.service
```

解决vsftpd在iptables开启后,无法使用被动模式的问题

1.首先在/etc/sysconfig/iptables-config中修改或者添加以下内容

```bash
#添加以下内容,注意顺序不能调换
IPTABLES_MODULES=&quot;ip_conntrack_ftp&quot;
IPTABLES_MODULES=&quot;ip_nat_ftp&quot;
```
2.重新设置iptables设置

```bash
iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT
```

**以下为完整设置脚本**
```bash
#!/bin/sh
iptables -P INPUT ACCEPT
iptables -F
iptables -X
iptables -Z
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 21 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD DROP
service iptables save
systemctl restart iptables.service
```

##如何删除单条规则？
```bash
#先使用行号显示所有规则
iptables -t nat -L -n --line-numbers
#找到要删除的规则，确认前面的行号，使用下面的命令进行删除
iptables -t nat -D PREROUTING 行号
```

##如何删除多条规则？
```bash
#将所有的iptables规则导出到iptableRules文件
iptables-save &gt; iptablesRules
#打开该文件，将你不想要的所有规则都删掉，改完记得保存
#保存完之后使用该文件重新配置iptables
iptables-restore &lt; iptablesRules
```
</content:encoded></item><item><title><![CDATA[Block机制详解]]></title><description><![CDATA[Block机制详解 我们知道在使用中，内部能够读取外部局部变量的值。但我们需要改变这个变量的值时，我们需要给它附加上修饰符。

另外一个比较多的使用场景是，为了避免某些情况下Block循环引用的问题，我们也可以给相应对象加上修饰符。

为什么不使用就不能在内部修改外部的局部变量？

我…]]></description><link>https://wizd.dev/Block机制详解/</link><guid isPermaLink="false">https://wizd.dev/Block机制详解/</guid><pubDate>Mon, 06 Apr 2015 11:47:15 GMT</pubDate><content:encoded>## Block机制详解

我们知道在`Block`使用中，`Block`内部能够读取外部局部变量的值。但我们需要改变这个变量的值时，我们需要给它附加上`__block`修饰符。

`__block`另外一个比较多的使用场景是，为了避免某些情况下Block循环引用的问题，我们也可以给相应对象加上`__block`修饰符。

为什么不使用`__block`就不能在`Block`内部修改外部的局部变量？

我们把以下代码通过 clang -rewrite-objc 源代码文件名重写：

```objc
int main(int argc, const char * argv[]) {
    @autoreleasepool {
      int val = 10;
      void (^block)(void) = ^{
        NSLog(@&quot;%d&quot;, val);
      };
      block();
    }
  return 0;
}
```

可得到如下代码：

```objc
struct __Block_byref_val_0 {
   void *__isa;
   __Block_byref_val_0 *__forwarding;
   int __flags;
   int __size;
   NSInteger val;
};
struct __main_block_impl_0 {
    struct __block_impl impl;
    struct __main_block_desc_0* Desc;
    __Block_byref_val_0 *val; // by ref
    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_val_0 *_val, int flags=0) : val(_val-&gt;__forwarding) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
    }
};
static void __main_block_func_0 (struct __main_block_impl_0 *__cself) {
  __Block_byref_val_0 *val = __cself-&gt;val; // bound by ref
  (val-&gt;__forwarding-&gt;val) = 1;
}
static void __main_block_copy_0 (struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {
  _Block_object_assign((void*)&amp;dst-&gt;val, (void*)src-&gt;val, 8/*BLOCK_FIELD_IS_BYREF*/);
}
static void __main_block_dispose_0 (struct __main_block_impl_0*src)   {
  _Block_object_dispose((void*)src-&gt;val, 8/*BLOCK_FIELD_IS_BYREF*/);
}
static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);
  void (*dispose)(struct __main_block_impl_0*);
} 
__main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};
int main(int argc, const char * argv[]) {
  {   
    __AtAutoreleasePool __autoreleasepool; 
    __attribute__((__blocks__(byref))) __Block_byref_val_0 val = {(void*)0,(__Block_byref_val_0 *)&amp;val, 0, sizeof(__Block_byref_val_0), 0};
    void (*block)(void) = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, 570425344);
    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);
    NSLog((NSString *)&amp;__NSConstantStringImpl__val_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_d7fc4b_mi_0, (val.__forwarding-&gt;val));
  }
  return 0;
}
```

我们发现由`__block`修饰的变量变成了一个`__Block_byref_val_0`结构体类型的实例。该结构体的声明如下：

```objc
struct __Block_byref_val_0 {
   void *__isa;
   __Block_byref_val_0 *__forwarding;
   int __flags;
   int __size;
   NSInteger val;
};
```

注意到这个结构体中包含了该实例本身的引用`__forwarding`。
我们从上述被转化的代码中可以看出 Block 本身也一样被转换成了`__main_block_impl_0`结构体实例，该实例持有`__Block_byref_val_0`结构体实例的指针。
我们再看一下赋值和执行部分代码被转化后的结果：

```objc
static void __main_block_func_0 (struct __main_block_impl_0 *__cself) {
  __Block_byref_val_0 *val = __cself-&gt;val; // bound by ref
  (val-&gt;__forwarding-&gt;val) = 1;
}
((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);
```

我们从`__cself`找到`__Block_byref_val_0`结构体实例，然后通过该实例的`__forwarding`访问成员变量`val`。成员变量`val`是该实例自身持有的变量，指向的是原来的局部变量。

上面部分我们展示了`__block`变量在Block查看和修改的过程，那么问题来了：
当block作为回调执行时，局部变量`val`已经出栈了，这个时候代码为什么还能正常工作呢?
我们为什么是通过成员变量`__forwarding`而不是直接去访问结构体中我们需要修改的变量呢? `__forwarding`被设计出来的原因又是什么呢？

**存储域**
通过上面的描述我们知道Block和`__block`变量实质就是一个相应结构体的实例。

我们在上述转换过的代码中可以发现`__main_block_impl_0`结构体构造函数中， `isa`指向的是`_NSConcreteStackBlock`。

Block还有另外两个与之相似的类:
`_NSConcreteStackBlock`保存在栈中的block，出栈时会被销毁
`_NSConcreteGlobalBlock`全局的静态block，不会访问任何外部变量
`_NSConcreteMallocBlock`保存在堆中的block，当引用计数为0时会被销毁

上述示例代码中，Block是被设为`_NSConcreteStackBlock`，在栈上生成。

当我们把Block作为全局变量使用时，对应生成的Block将被设为`_NSConcreteGlobalBlock`，如:

```objc
void (^block)(void) = ^{NSLog(@&quot;This is a Global Block&quot;);};
int main(int argc, const char * argv[]) {
  @autoreleasepool {
    block();
  }
  return 0;
}
```

该代码转换后的代码中，Block结构体的成员变量isa的初始化如下:

```objc
impl.isa = &amp;_NSConcreteGlobalBlock;
```

**那么_NSConcreteMallocBlock在什么时候被使用呢？**

分配在全局变量上的Block，在变量作用域外也可以通过指针安全的访问。但分配在栈上的Block，如果它所属的变量作用域结束，该Block就被废弃。同样地，`__block`变量也分配在栈上，当超过该变量的作用域时，该`__block`变量也会被废弃。  

这个时候_NSConcreteMallocBlock就登场了，Blocks提供了将Block和`__block`变量从栈上复制到堆上的方法来解决这个问题。将分配到栈上的Block复制到堆上，这样但栈上的Block超过它原本作用域时，堆上的Block还可以继续存在。 

复制到堆上的Block，它的结构体成员变量`isa`将变为:

```objc
impl.isa = &amp;_NSConcreteMallocBlock;
```

而`_block`变量中结构体成员`__forwarding`就在此时保证了从栈上复制到堆上能够正确访问`__block`变量。在这种情况下，只要栈上的`_block`变量的成员变量`__forwarding`指向堆上的实例，我们就能够正确访问。  

我们一般可以使用copy方法手动将 Block 或者`__block`变量从栈复制到堆上。比如我们把Block做为类的属性访问时，我们一般把该属性设为copy。有些情况下我们可以不用手动复制,比如Cocoa框架中使用含有`usingBlock`方法名的方法时，或者GCD的API中传递Block时。  

当一个Block被复制到堆上时，与之相关的`__block`变量也会被复制到堆上，此时堆上的Block持有相应堆上的`__block`变量。当堆上的`__block`变量没有持有者时，它才会被废弃。(这里的思考方式和objc引用计数内存管理完全相同。)
而在栈上的`__block`变量被复制到堆上之后，会将成员变量`__forwarding`的值替换为堆上的`__block`变量的地址。这个时候我们可以通过以下代码访问:

```objc
val.__forwarding-&gt;val
```

**`__block`变量和循环引用问题**
`__block`修饰符可以指定任何类型的局部变量，上面的转换代码中，有如下代码:

```objc
static void __main_block_copy_0 (struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {
  _Block_object_assign((void*)&amp;dst-&gt;val, (void*)src-&gt;val, 8/*BLOCK_FIELD_IS_BYREF*/);
}
static void __main_block_dispose_0 (struct __main_block_impl_0*src)   {
  _Block_object_dispose((void*)src-&gt;val, 8/*BLOCK_FIELD_IS_BYREF*/);
}
```

当Block从栈复制到堆时，会使用`_Block_object_assign`函数持有该变量(相当于`retain`)。当堆上的Block被废弃时，会使用`_Block_object_dispose`函数释放该变量(相当于`release`)。

由上文描述可知，我们可以使用下述代码解除Block循环引用的问题:

```objc
void(^block)(void) = ^{
  tmp = nil;
};
block();
```

通过执行block方法，`nil`被赋值到`_block`变量`tmp`中。这个时候`_block`变量对`self`的强引用失效，从而避免循环引用的问题。使用`__block`变量的优点是:
通过`__block`变量可以控制对象的生命周期
在不能使用`__weak`修饰符的环境中，我们可以避免使用`__unsafe_unretained`修饰符
在执行Block时可动态地决定是否将nil或者其它对象赋值给`__block`变量
但是这种方法有一个明显的缺点就是，我们必须去执行Block才能够解除循环引用问题，否则就会出现问题。
</content:encoded></item><item><title><![CDATA[JavaScript URL ANSI编码EnCode DeCode实现]]></title><description><![CDATA[在开发中经常会遇到需要进行URLEnCode和URLDeCode的状况，在类似于PHP、.NET、Python的一些web开发语言中对URL En/DeCode都有很好的实现。 JavaScript中也可以通过 encodeURI, encodeURIComponent…]]></description><link>https://wizd.dev/JavaScript-URL-ANSI编码EnCode-DeCode实现/</link><guid isPermaLink="false">https://wizd.dev/JavaScript-URL-ANSI编码EnCode-DeCode实现/</guid><pubDate>Thu, 08 Jan 2015 00:29:49 GMT</pubDate><content:encoded>在开发中经常会遇到需要进行URLEnCode和URLDeCode的状况，在类似于PHP、.NET、Python的一些web开发语言中对URL En/DeCode都有很好的实现。
JavaScript中也可以通过 encodeURI, encodeURIComponent 实现UTF-8编码的 URL En/DeCode。
今天我们尝试用JavaScript来实现ANSI编码的URL En/DeCode这两个方法。
```javascript
function UnicodeChr() {
	return &apos;00A4,00A7,00A8,00B0,00B1,00B7,00D7,00E0,00E1,00E8,00E9,00EA,00EC,00ED,00F2,00F3,00F7,00F9,00FA,00FC,0101,0113,011B,012B,014D,016B,01CE,01D0,01D2,01D4,01D6,01D8,01DA,01DC,02C7,02C9,0391,0392,0393,0394,0395,0396,0397,0398,0399,039A,039B,039C,039D,039E,039F,03A0,03A1,03A3,03A4,03A5,03A6,03A7,03A8,03A9,03B1,03B2,03B3,03B4,03B5,03B6,03B7,03B8,03B9,03BA,03BB,03BC,03BD,03BE,03BF,03C0,03C1,03C3,03C4,03C5,03C6,03C7,03C8,03C9,0401,0410,0411,0412,0413,0414,0415,0416,0417,0418,0419,041A,041B,041C,041D,041E,041F,0420,0421,0422,0423,0424,0425,0426,0427,0428,0429,042A,042B,042C,042D,042E,042F,0430,0431,0432,0433,0434,0435,0436,0437,0438,0439,043A,043B,043C,043D,043E,043F,0440,0441,0442,0443,0444,0445,0446,0447,0448,0449,044A,044B,044C,044D,044E,044F,0451,2014,2016,2018,2019,201C,201D,2026,2030,2032,2033,203B,2103,2116,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,216A,216B,2190,2191,2192,2193,2208,220F,2211,221A,221D,221E,2220,2225,2227,2228,2229,222A,222B,222E,2234,2235,2236,2237,223D,2248,224C,2260,2261,2264,2265,226E,226F,2299,22A5,2312,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2474,2475,2476,2477,2478,2479,247A,247B,247C,247D,247E,247F,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,248A,248B,248C,248D,248E,248F,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,249A,249B,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,250A,250B,250C,250D,250E,250F,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,251A,251B,251C,251D,251E,251F,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,252A,252B,252C,252D,252E,252F,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,253A,253B,253C,253D,253E,253F,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,254A,254B,25A0,25A1,25B2,25B3,25C6,25C7,25CB,25CE,25CF,2605,2606,2640,2642,3000,3001,3002,3003,3005,3008,3009,300A,300B,300C,300D,300E,300F,3010,3011,3013,3014,3015,3016,3017,3041,3042,3043,3044,3045,3046,3047,3048,3049,304A,304B,304C,304D,304E,304F,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,305A,305B,305C,305D,305E,305F,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,306A,306B,306C,306D,306E,306F,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,307A,307B,307C,307D,307E,307F,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,308A,308B,308C,308D,308E,308F,3090,3091,3092,3093,30A1,30A2,30A3,30A4,30A5,30A6,30A7,30A8,30A9,30AA,30AB,30AC,30AD,30AE,30AF,30B0,30B1,30B2,30B3,30B4,30B5,30B6,30B7,30B8,30B9,30BA,30BB,30BC,30BD,30BE,30BF,30C0,30C1,30C2,30C3,30C4,30C5,30C6,30C7,30C8,30C9,30CA,30CB,30CC,30CD,30CE,30CF,30D0,30D1,30D2,30D3,30D4,30D5,30D6,30D7,30D8,30D9,30DA,30DB,30DC,30DD,30DE,30DF,30E0,30E1,30E2,30E3,30E4,30E5,30E6,30E7,30E8,30E9,30EA,30EB,30EC,30ED,30EE,30EF,30F0,30F1,30F2,30F3,30F4,30F5,30F6,3105,3106,3107,3108,3109,310A,310B,310C,310D,310E,310F,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,311A,311B,311C,311D,311E,311F,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,4E00,4E01,4E03,4E07,4E08,4E09,4E0A,4E0B,4E0C,4E0D,4E0E,4E10,4E11,4E13,4E14,4E15,4E16,4E18,4E19,4E1A,4E1B,4E1C,4E1D,4E1E,4E22,4E24,4E25,4E27,4E28,4E2A,4E2B,4E2C,4E2D,4E30,4E32,4E34,4E36,4E38,4E39,4E3A,4E3B,4E3D,4E3E,4E3F,4E43,4E45,4E47,4E48,4E49,4E4B,4E4C,4E4D,4E4E,4E4F,4E50,4E52,4E53,4E54,4E56,4E58,4E59,4E5C,4E5D,4E5E,4E5F,4E60,4E61,4E66,4E69,4E70,4E71,4E73,4E7E,4E86,4E88,4E89,4E8B,4E8C,4E8D,4E8E,4E8F,4E91,4E92,4E93,4E94,4E95,4E98,4E9A,4E9B,4E9F,4EA0,4EA1,4EA2,4EA4,4EA5,4EA6,4EA7,4EA8,4EA9,4EAB,4EAC,4EAD,4EAE,4EB2,4EB3,4EB5,4EBA,4EBB,4EBF,4EC0,4EC1,4EC2,4EC3,4EC4,4EC5,4EC6,4EC7,4EC9,4ECA,4ECB,4ECD,4ECE,4ED1,4ED3,4ED4,4ED5,4ED6,4ED7,4ED8,4ED9,4EDD,4EDE,4EDF,4EE1,4EE3,4EE4,4EE5,4EE8,4EEA,4EEB,4EEC,4EF0,4EF2,4EF3,4EF5,4EF6,4EF7,4EFB,4EFD,4EFF,4F01,4F09,4F0A,4F0D,4F0E,4F0F,4F10,4F11,4F17,4F18,4F19,4F1A,4F1B,4F1E,4F1F,4F20,4F22,4F24,4F25,4F26,4F27,4F2A,4F2B,4F2F,4F30,4F32,4F34,4F36,4F38,4F3A,4F3C,4F3D,4F43,4F46,4F4D,4F4E,4F4F,4F50,4F51,4F53,4F55,4F57,4F58,4F59,4F5A,4F5B,4F5C,4F5D,4F5E,4F5F,4F60,4F63,4F64,4F65,4F67,4F69,4F6C,4F6F,4F70,4F73,4F74,4F76,4F7B,4F7C,4F7E,4F7F,4F83,4F84,4F88,4F89,4F8B,4F8D,4F8F,4F91,4F94,4F97,4F9B,4F9D,4FA0,4FA3,4FA5,4FA6,4FA7,4FA8,4FA9,4FAA,4FAC,4FAE,4FAF,4FB5,4FBF,4FC3,4FC4,4FC5,4FCA,4FCE,4FCF,4FD0,4FD1,4FD7,4FD8,4FDA,4FDC,4FDD,4FDE,4FDF,4FE1,4FE3,4FE6,4FE8,4FE9,4FEA,4FED,4FEE,4FEF,4FF1,4FF3,4FF8,4FFA,4FFE,500C,500D,500F,5012,5014,5018,5019,501A,501C,501F,5021,5025,5026,5028,5029,502A,502C,502D,502E,503A,503C,503E,5043,5047,5048,504C,504E,504F,5055,505A,505C,5065,506C,5076,5077,507B,507E,507F,5080,5085,5088,508D,50A3,50A5,50A7,50A8,50A9,50AC,50B2,50BA,50BB,50CF,50D6,50DA,50E6,50E7,50EC,50ED,50EE,50F3,50F5,50FB,5106,5107,510B,5112,5121,513F,5140,5141,5143,5144,5145,5146,5148,5149,514B,514D,5151,5154,5155,5156,515A,515C,5162,5165,5168,516B,516C,516D,516E,5170,5171,5173,5174,5175,5176,5177,5178,5179,517B,517C,517D,5180,5181,5182,5185,5188,5189,518C,518D,5192,5195,5196,5197,5199,519B,519C,51A0,51A2,51A4,51A5,51AB,51AC,51AF,51B0,51B1,51B2,51B3,51B5,51B6,51B7,51BB,51BC,51BD,51C0,51C4,51C6,51C7,51C9,51CB,51CC,51CF,51D1,51DB,51DD,51E0,51E1,51E4,51EB,51ED,51EF,51F0,51F3,51F5,51F6,51F8,51F9,51FA,51FB,51FC,51FD,51FF,5200,5201,5202,5203,5206,5207,5208,520A,520D,520E,5211,5212,5216,5217,5218,5219,521A,521B,521D,5220,5224,5228,5229,522B,522D,522E,5230,5233,5236,5237,5238,5239,523A,523B,523D,523F,5240,5241,5242,5243,524A,524C,524D,5250,5251,5254,5256,525C,525E,5261,5265,5267,5269,526A,526F,5272,527D,527F,5281,5282,5288,5290,5293,529B,529D,529E,529F,52A0,52A1,52A2,52A3,52A8,52A9,52AA,52AB,52AC,52AD,52B1,52B2,52B3,52BE,52BF,52C3,52C7,52C9,52CB,52D0,52D2,52D6,52D8,52DF,52E4,52F0,52F9,52FA,52FE,52FF,5300,5305,5306,5308,530D,530F,5310,5315,5316,5317,5319,531A,531D,5320,5321,5323,5326,532A,532E,5339,533A,533B,533E,533F,5341,5343,5345,5347,5348,5349,534A,534E,534F,5351,5352,5353,5355,5356,5357,535A,535C,535E,535F,5360,5361,5362,5363,5364,5366,5367,5369,536B,536E,536F,5370,5371,5373,5374,5375,5377,5378,537A,537F,5382,5384,5385,5386,5389,538B,538C,538D,5395,5398,539A,539D,539F,53A2,53A3,53A5,53A6,53A8,53A9,53AE,53B6,53BB,53BF,53C1,53C2,53C8,53C9,53CA,53CB,53CC,53CD,53D1,53D4,53D6,53D7,53D8,53D9,53DB,53DF,53E0,53E3,53E4,53E5,53E6,53E8,53E9,53EA,53EB,53EC,53ED,53EE,53EF,53F0,53F1,53F2,53F3,53F5,53F6,53F7,53F8,53F9,53FB,53FC,53FD,5401,5403,5404,5406,5408,5409,540A,540C,540D,540E,540F,5410,5411,5412,5413,5415,5416,5417,541B,541D,541E,541F,5420,5421,5423,5426,5427,5428,5429,542B,542C,542D,542E,542F,5431,5432,5434,5435,5438,5439,543B,543C,543E,5440,5443,5446,5448,544A,544B,5450,5452,5453,5454,5455,5456,5457,5458,5459,545B,545C,5462,5464,5466,5468,5471,5472,5473,5475,5476,5477,5478,547B,547C,547D,5480,5482,5484,5486,548B,548C,548E,548F,5490,5492,5494,5495,5496,5499,549A,549B,549D,54A3,54A4,54A6,54A7,54A8,54A9,54AA,54AB,54AC,54AD,54AF,54B1,54B3,54B4,54B8,54BB,54BD,54BF,54C0,54C1,54C2,54C4,54C6,54C7,54C8,54C9,54CC,54CD,54CE,54CF,54D0,54D1,54D2,54D3,54D4,54D5,54D7,54D9,54DA,54DC,54DD,54DE,54DF,54E5,54E6,54E7,54E8,54E9,54EA,54ED,54EE,54F2,54F3,54FA,54FC,54FD,54FF,5501,5506,5507,5509,550F,5510,5511,5514,551B,5520,5522,5523,5524,5527,552A,552C,552E,552F,5530,5531,5533,5537,553C,553E,553F,5541,5543,5544,5546,5549,554A,5550,5555,5556,555C,5561,5564,5565,5566,5567,556A,556C,556D,556E,5575,5576,5577,5578,557B,557C,557E,5580,5581,5582,5583,5584,5587,5588,5589,558A,558B,558F,5591,5594,5598,5599,559C,559D,559F,55A7,55B1,55B3,55B5,55B7,55B9,55BB,55BD,55BE,55C4,55C5,55C9,55CC,55CD,55D1,55D2,55D3,55D4,55D6,55DC,55DD,55DF,55E1,55E3,55E4,55E5,55E6,55E8,55EA,55EB,55EC,55EF,55F2,55F3,55F5,55F7,55FD,55FE,5600,5601,5608,5609,560C,560E,560F,5618,561B,561E,561F,5623,5624,5627,562C,562D,5631,5632,5634,5636,5639,563B,563F,564C,564D,564E,5654,5657,5658,5659,565C,5662,5664,5668,5669,566A,566B,566C,5671,5676,567B,567C,5685,5686,568E,568F,5693,56A3,56AF,56B7,56BC,56CA,56D4,56D7,56DA,56DB,56DD,56DE,56DF,56E0,56E1,56E2,56E4,56EB,56ED,56F0,56F1,56F4,56F5,56F9,56FA,56FD,56FE,56FF,5703,5704,5706,5708,5709,570A,571C,571F,5723,5728,5729,572A,572C,572D,572E,572F,5730,5733,5739,573A,573B,573E,5740,5742,5747,574A,574C,574D,574E,574F,5750,5751,5757,575A,575B,575C,575D,575E,575F,5760,5761,5764,5766,5768,5769,576A,576B,576D,576F,5773,5776,5777,577B,577C,5782,5783,5784,5785,5786,578B,578C,5792,5793,579B,57A0,57A1,57A2,57A3,57A4,57A6,57A7,57A9,57AB,57AD,57AE,57B2,57B4,57B8,57C2,57C3,57CB,57CE,57CF,57D2,57D4,57D5,57D8,57D9,57DA,57DD,57DF,57E0,57E4,57ED,57EF,57F4,57F8,57F9,57FA,57FD,5800,5802,5806,5807,580B,580D,5811,5815,5819,581E,5820,5821,5824,582A,5830,5835,5844,584C,584D,5851,5854,5858,585E,5865,586B,586C,587E,5880,5881,5883,5885,5889,5892,5893,5899,589A,589E,589F,58A8,58A9,58BC,58C1,58C5,58D1,58D5,58E4,58EB,58EC,58EE,58F0,58F3,58F6,58F9,5902,5904,5907,590D,590F,5914,5915,5916,5919,591A,591C,591F,5924,5925,5927,5929,592A,592B,592D,592E,592F,5931,5934,5937,5938,5939,593A,593C,5941,5942,5944,5947,5948,5949,594B,594E,594F,5951,5954,5955,5956,5957,5958,595A,5960,5962,5965,5973,5974,5976,5978,5979,597D,5981,5982,5983,5984,5986,5987,5988,598A,598D,5992,5993,5996,5997,5999,599E,59A3,59A4,59A5,59A8,59A9,59AA,59AB,59AE,59AF,59B2,59B9,59BB,59BE,59C6,59CA,59CB,59D0,59D1,59D2,59D3,59D4,59D7,59D8,59DA,59DC,59DD,59E3,59E5,59E8,59EC,59F9,59FB,59FF,5A01,5A03,5A04,5A05,5A06,5A07,5A08,5A09,5A0C,5A11,5A13,5A18,5A1C,5A1F,5A20,5A23,5A25,5A29,5A31,5A32,5A34,5A36,5A3C,5A40,5A46,5A49,5A4A,5A55,5A5A,5A62,5A67,5A6A,5A74,5A75,5A76,5A77,5A7A,5A7F,5A92,5A9A,5A9B,5AAA,5AB2,5AB3,5AB5,5AB8,5ABE,5AC1,5AC2,5AC9,5ACC,5AD2,5AD4,5AD6,5AD8,5ADC,5AE0,5AE1,5AE3,5AE6,5AE9,5AEB,5AF1,5B09,5B16,5B17,5B32,5B34,5B37,5B40,5B50,5B51,5B53,5B54,5B55,5B57,5B58,5B59,5B5A,5B5B,5B5C,5B5D,5B5F,5B62,5B63,5B64,5B65,5B66,5B69,5B6A,5B6C,5B70,5B71,5B73,5B75,5B7A,5B7D,5B80,5B81,5B83,5B84,5B85,5B87,5B88,5B89,5B8B,5B8C,5B8F,5B93,5B95,5B97,5B98,5B99,5B9A,5B9B,5B9C,5B9D,5B9E,5BA0,5BA1,5BA2,5BA3,5BA4,5BA5,5BA6,5BAA,5BAB,5BB0,5BB3,5BB4,5BB5,5BB6,5BB8,5BB9,5BBD,5BBE,5BBF,5BC2,5BC4,5BC5,5BC6,5BC7,5BCC,5BD0,5BD2,5BD3,5BDD,5BDE,5BDF,5BE1,5BE4,5BE5,5BE8,5BEE,5BF0,5BF8,5BF9,5BFA,5BFB,5BFC,5BFF,5C01,5C04,5C06,5C09,5C0A,5C0F,5C11,5C14,5C15,5C16,5C18,5C1A,5C1C,5C1D,5C22,5C24,5C25,5C27,5C2C,5C31,5C34,5C38,5C39,5C3A,5C3B,5C3C,5C3D,5C3E,5C3F,5C40,5C41,5C42,5C45,5C48,5C49,5C4A,5C4B,5C4E,5C4F,5C50,5C51,5C55,5C59,5C5E,5C60,5C61,5C63,5C65,5C66,5C6E,5C6F,5C71,5C79,5C7A,5C7F,5C81,5C82,5C88,5C8C,5C8D,5C90,5C91,5C94,5C96,5C97,5C98,5C99,5C9A,5C9B,5C9C,5CA2,5CA3,5CA9,5CAB,5CAC,5CAD,5CB1,5CB3,5CB5,5CB7,5CB8,5CBD,5CBF,5CC1,5CC4,5CCB,5CD2,5CD9,5CE1,5CE4,5CE5,5CE6,5CE8,5CEA,5CED,5CF0,5CFB,5D02,5D03,5D06,5D07,5D0E,5D14,5D16,5D1B,5D1E,5D24,5D26,5D27,5D29,5D2D,5D2E,5D34,5D3D,5D3E,5D47,5D4A,5D4B,5D4C,5D58,5D5B,5D5D,5D69,5D6B,5D6C,5D6F,5D74,5D82,5D99,5D9D,5DB7,5DC5,5DCD,5DDB,5DDD,5DDE,5DE1,5DE2,5DE5,5DE6,5DE7,5DE8,5DE9,5DEB,5DEE,5DEF,5DF1,5DF2,5DF3,5DF4,5DF7,5DFD,5DFE,5E01,5E02,5E03,5E05,5E06,5E08,5E0C,5E0F,5E10,5E11,5E14,5E15,5E16,5E18,5E19,5E1A,5E1B,5E1C,5E1D,5E26,5E27,5E2D,5E2E,5E31,5E37,5E38,5E3B,5E3C,5E3D,5E42,5E44,5E45,5E4C,5E54,5E55,5E5B,5E5E,5E61,5E62,5E72,5E73,5E74,5E76,5E78,5E7A,5E7B,5E7C,5E7D,5E7F,5E80,5E84,5E86,5E87,5E8A,5E8B,5E8F,5E90,5E91,5E93,5E94,5E95,5E96,5E97,5E99,5E9A,5E9C,5E9E,5E9F,5EA0,5EA5,5EA6,5EA7,5EAD,5EB3,5EB5,5EB6,5EB7,5EB8,5EB9,5EBE,5EC9,5ECA,5ED1,5ED2,5ED3,5ED6,5EDB,5EE8,5EEA,5EF4,5EF6,5EF7,5EFA,5EFE,5EFF,5F00,5F01,5F02,5F03,5F04,5F08,5F0A,5F0B,5F0F,5F11,5F13,5F15,5F17,5F18,5F1B,5F1F,5F20,5F25,5F26,5F27,5F29,5F2A,5F2D,5F2F,5F31,5F39,5F3A,5F3C,5F40,5F50,5F52,5F53,5F55,5F56,5F57,5F58,5F5D,5F61,5F62,5F64,5F66,5F69,5F6A,5F6C,5F6D,5F70,5F71,5F73,5F77,5F79,5F7B,5F7C,5F80,5F81,5F82,5F84,5F85,5F87,5F88,5F89,5F8A,5F8B,5F8C,5F90,5F92,5F95,5F97,5F98,5F99,5F9C,5FA1,5FA8,5FAA,5FAD,5FAE,5FB5,5FB7,5FBC,5FBD,5FC3,5FC4,5FC5,5FC6,5FC9,5FCC,5FCD,5FCF,5FD0,5FD1,5FD2,5FD6,5FD7,5FD8,5FD9,5FDD,5FE0,5FE1,5FE4,5FE7,5FEA,5FEB,5FED,5FEE,5FF1,5FF5,5FF8,5FFB,5FFD,5FFE,5FFF,6000,6001,6002,6003,6004,6005,6006,600A,600D,600E,600F,6012,6014,6015,6016,6019,601B,601C,601D,6020,6021,6025,6026,6027,6028,6029,602A,602B,602F,6035,603B,603C,603F,6041,6042,6043,604B,604D,6050,6052,6055,6059,605A,605D,6062,6063,6064,6067,6068,6069,606A,606B,606C,606D,606F,6070,6073,6076,6078,6079,607A,607B,607C,607D,607F,6083,6084,6089,608C,608D,6092,6094,6096,609A,609B,609D,609F,60A0,60A3,60A6,60A8,60AB,60AC,60AD,60AF,60B1,60B2,60B4,60B8,60BB,60BC,60C5,60C6,60CA,60CB,60D1,60D5,60D8,60DA,60DC,60DD,60DF,60E0,60E6,60E7,60E8,60E9,60EB,60EC,60ED,60EE,60EF,60F0,60F3,60F4,60F6,60F9,60FA,6100,6101,6106,6108,6109,610D,610E,610F,6115,611A,611F,6120,6123,6124,6126,6127,612B,613F,6148,614A,614C,614E,6151,6155,615D,6162,6167,6168,6170,6175,6177,618B,618E,6194,619D,61A7,61A8,61A9,61AC,61B7,61BE,61C2,61C8,61CA,61CB,61D1,61D2,61D4,61E6,61F5,61FF,6206,6208,620A,620B,620C,620D,620E,620F,6210,6211,6212,6215,6216,6217,6218,621A,621B,621F,6221,6222,6224,6225,622A,622C,622E,6233,6234,6237,623D,623E,623F,6240,6241,6243,6247,6248,6249,624B,624C,624D,624E,6251,6252,6253,6254,6258,625B,6263,6266,6267,6269,626A,626B,626C,626D,626E,626F,6270,6273,6276,6279,627C,627E,627F,6280,6284,6289,628A,6291,6292,6293,6295,6296,6297,6298,629A,629B,629F,62A0,62A1,62A2,62A4,62A5,62A8,62AB,62AC,62B1,62B5,62B9,62BB,62BC,62BD,62BF,62C2,62C4,62C5,62C6,62C7,62C8,62C9,62CA,62CC,62CD,62CE,62D0,62D2,62D3,62D4,62D6,62D7,62D8,62D9,62DA,62DB,62DC,62DF,62E2,62E3,62E5,62E6,62E7,62E8,62E9,62EC,62ED,62EE,62EF,62F1,62F3,62F4,62F6,62F7,62FC,62FD,62FE,62FF,6301,6302,6307,6308,6309,630E,6311,6316,631A,631B,631D,631E,631F,6320,6321,6322,6323,6324,6325,6328,632A,632B,632F,6332,6339,633A,633D,6342,6343,6345,6346,6349,634B,634C,634D,634E,634F,6350,6355,635E,635F,6361,6362,6363,6367,6369,636D,636E,6371,6376,6377,637A,637B,6380,6382,6387,6388,6389,638A,638C,638E,638F,6390,6392,6396,6398,63A0,63A2,63A3,63A5,63A7,63A8,63A9,63AA,63AC,63AD,63AE,63B0,63B3,63B4,63B7,63B8,63BA,63BC,63BE,63C4,63C6,63C9,63CD,63CE,63CF,63D0,63D2,63D6,63DE,63E0,63E1,63E3,63E9,63EA,63ED,63F2,63F4,63F6,63F8,63FD,63FF,6400,6401,6402,6405,640B,640C,640F,6410,6413,6414,641B,641C,641E,6420,6421,6426,642A,642C,642D,6434,643A,643D,643F,6441,6444,6445,6446,6447,6448,644A,6452,6454,6458,645E,6467,6469,646D,6478,6479,647A,6482,6484,6485,6487,6491,6492,6495,6496,6499,649E,64A4,64A9,64AC,64AD,64AE,64B0,64B5,64B7,64B8,64BA,64BC,64C0,64C2,64C5,64CD,64CE,64D0,64D2,64D7,64D8,64DE,64E2,64E4,64E6,6500,6509,6512,6518,6525,652B,652E,652F,6534,6535,6536,6538,6539,653B,653E,653F,6545,6548,6549,654C,654F,6551,6555,6556,6559,655B,655D,655E,6562,6563,6566,656B,656C,6570,6572,6574,6577,6587,658B,658C,6590,6591,6593,6597,6599,659B,659C,659F,65A1,65A4,65A5,65A7,65A9,65AB,65AD,65AF,65B0,65B9,65BC,65BD,65C1,65C3,65C4,65C5,65C6,65CB,65CC,65CE,65CF,65D2,65D6,65D7,65E0,65E2,65E5,65E6,65E7,65E8,65E9,65EC,65ED,65EE,65EF,65F0,65F1,65F6,65F7,65FA,6600,6602,6603,6606,660A,660C,660E,660F,6613,6614,6615,6619,661D,661F,6620,6625,6627,6628,662D,662F,6631,6634,6635,6636,663C,663E,6641,6643,664B,664C,664F,6652,6653,6654,6655,6656,6657,665A,665F,6661,6664,6666,6668,666E,666F,6670,6674,6676,6677,667A,667E,6682,6684,6687,668C,6691,6696,6697,669D,66A7,66A8,66AE,66B4,66B9,66BE,66D9,66DB,66DC,66DD,66E6,66E9,66F0,66F2,66F3,66F4,66F7,66F9,66FC,66FE,66FF,6700,6708,6709,670A,670B,670D,6710,6714,6715,6717,671B,671D,671F,6726,6728,672A,672B,672C,672D,672F,6731,6734,6735,673A,673D,6740,6742,6743,6746,6748,6749,674C,674E,674F,6750,6751,6753,6756,675C,675E,675F,6760,6761,6765,6768,6769,676A,676D,676F,6770,6772,6773,6775,6777,677C,677E,677F,6781,6784,6787,6789,678B,6790,6795,6797,6798,679A,679C,679D,679E,67A2,67A3,67A5,67A7,67A8,67AA,67AB,67AD,67AF,67B0,67B3,67B5,67B6,67B7,67B8,67C1,67C3,67C4,67CF,67D0,67D1,67D2,67D3,67D4,67D8,67D9,67DA,67DC,67DD,67DE,67E0,67E2,67E5,67E9,67EC,67EF,67F0,67F1,67F3,67F4,67FD,67FF,6800,6805,6807,6808,6809,680A,680B,680C,680E,680F,6811,6813,6816,6817,681D,6821,6829,682A,6832,6833,6837,6838,6839,683C,683D,683E,6840,6841,6842,6843,6844,6845,6846,6848,6849,684A,684C,684E,6850,6851,6853,6854,6855,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,686B,6874,6876,6877,6881,6883,6885,6886,688F,6893,6897,68A2,68A6,68A7,68A8,68AD,68AF,68B0,68B3,68B5,68C0,68C2,68C9,68CB,68CD,68D2,68D5,68D8,68DA,68E0,68E3,68EE,68F0,68F1,68F5,68F9,68FA,68FC,6901,6905,690B,690D,690E,6910,6912,691F,6920,6924,692D,6930,6934,6939,693D,693F,6942,6954,6957,695A,695D,695E,6960,6963,6966,696B,696E,6971,6977,6978,6979,697C,6980,6982,6984,6986,6987,6988,6989,698D,6994,6995,6998,699B,699C,69A7,69A8,69AB,69AD,69B1,69B4,69B7,69BB,69C1,69CA,69CC,69CE,69D0,69D4,69DB,69DF,69E0,69ED,69F2,69FD,69FF,6A0A,6A17,6A18,6A1F,6A21,6A28,6A2A,6A2F,6A31,6A35,6A3D,6A3E,6A44,6A47,6A50,6A58,6A59,6A5B,6A61,6A65,6A71,6A79,6A7C,6A80,6A84,6A8E,6A90,6A91,6A97,6AA0,6AA9,6AAB,6AAC,6B20,6B21,6B22,6B23,6B24,6B27,6B32,6B37,6B39,6B3A,6B3E,6B43,6B46,6B47,6B49,6B4C,6B59,6B62,6B63,6B64,6B65,6B66,6B67,6B6A,6B79,6B7B,6B7C,6B81,6B82,6B83,6B84,6B86,6B87,6B89,6B8A,6B8B,6B8D,6B92,6B93,6B96,6B9A,6B9B,6BA1,6BAA,6BB3,6BB4,6BB5,6BB7,6BBF,6BC1,6BC2,6BC5,6BCB,6BCD,6BCF,6BD2,6BD3,6BD4,6BD5,6BD6,6BD7,6BD9,6BDB,6BE1,6BEA,6BEB,6BEF,6BF3,6BF5,6BF9,6BFD,6C05,6C06,6C07,6C0D,6C0F,6C10,6C11,6C13,6C14,6C15,6C16,6C18,6C19,6C1A,6C1B,6C1F,6C21,6C22,6C24,6C26,6C27,6C28,6C29,6C2A,6C2E,6C2F,6C30,6C32,6C34,6C35,6C38,6C3D,6C40,6C41,6C42,6C46,6C47,6C49,6C4A,6C50,6C54,6C55,6C57,6C5B,6C5C,6C5D,6C5E,6C5F,6C60,6C61,6C64,6C68,6C69,6C6A,6C70,6C72,6C74,6C76,6C79,6C7D,6C7E,6C81,6C82,6C83,6C85,6C86,6C88,6C89,6C8C,6C8F,6C90,6C93,6C94,6C99,6C9B,6C9F,6CA1,6CA3,6CA4,6CA5,6CA6,6CA7,6CA9,6CAA,6CAB,6CAD,6CAE,6CB1,6CB2,6CB3,6CB8,6CB9,6CBB,6CBC,6CBD,6CBE,6CBF,6CC4,6CC5,6CC9,6CCA,6CCC,6CD0,6CD3,6CD4,6CD5,6CD6,6CD7,6CDB,6CDE,6CE0,6CE1,6CE2,6CE3,6CE5,6CE8,6CEA,6CEB,6CEE,6CEF,6CF0,6CF1,6CF3,6CF5,6CF6,6CF7,6CF8,6CFA,6CFB,6CFC,6CFD,6CFE,6D01,6D04,6D07,6D0B,6D0C,6D0E,6D12,6D17,6D19,6D1A,6D1B,6D1E,6D25,6D27,6D2A,6D2B,6D2E,6D31,6D32,6D33,6D35,6D39,6D3B,6D3C,6D3D,6D3E,6D41,6D43,6D45,6D46,6D47,6D48,6D4A,6D4B,6D4D,6D4E,6D4F,6D51,6D52,6D53,6D54,6D59,6D5A,6D5C,6D5E,6D60,6D63,6D66,6D69,6D6A,6D6E,6D6F,6D74,6D77,6D78,6D7C,6D82,6D85,6D88,6D89,6D8C,6D8E,6D91,6D93,6D94,6D95,6D9B,6D9D,6D9E,6D9F,6DA0,6DA1,6DA3,6DA4,6DA6,6DA7,6DA8,6DA9,6DAA,6DAB,6DAE,6DAF,6DB2,6DB5,6DB8,6DBF,6DC0,6DC4,6DC5,6DC6,6DC7,6DCB,6DCC,6DD1,6DD6,6DD8,6DD9,6DDD,6DDE,6DE0,6DE1,6DE4,6DE6,6DEB,6DEC,6DEE,6DF1,6DF3,6DF7,6DF9,6DFB,6DFC,6E05,6E0A,6E0C,6E0D,6E0E,6E10,6E11,6E14,6E16,6E17,6E1A,6E1D,6E20,6E21,6E23,6E24,6E25,6E29,6E2B,6E2D,6E2F,6E32,6E34,6E38,6E3A,6E43,6E44,6E4D,6E4E,6E53,6E54,6E56,6E58,6E5B,6E5F,6E6B,6E6E,6E7E,6E7F,6E83,6E85,6E86,6E89,6E8F,6E90,6E98,6E9C,6E9F,6EA2,6EA5,6EA7,6EAA,6EAF,6EB1,6EB2,6EB4,6EB6,6EB7,6EBA,6EBB,6EBD,6EC1,6EC2,6EC7,6ECB,6ECF,6ED1,6ED3,6ED4,6ED5,6ED7,6EDA,6EDE,6EDF,6EE0,6EE1,6EE2,6EE4,6EE5,6EE6,6EE8,6EE9,6EF4,6EF9,6F02,6F06,6F09,6F0F,6F13,6F14,6F15,6F20,6F24,6F29,6F2A,6F2B,6F2D,6F2F,6F31,6F33,6F36,6F3E,6F46,6F47,6F4B,6F4D,6F58,6F5C,6F5E,6F62,6F66,6F6D,6F6E,6F72,6F74,6F78,6F7A,6F7C,6F84,6F88,6F89,6F8C,6F8D,6F8E,6F9C,6FA1,6FA7,6FB3,6FB6,6FB9,6FC0,6FC2,6FC9,6FD1,6FD2,6FDE,6FE0,6FE1,6FEE,6FEF,7011,701A,701B,7023,7035,7039,704C,704F,705E,706B,706C,706D,706F,7070,7075,7076,7078,707C,707E,707F,7080,7085,7089,708A,708E,7092,7094,7095,7096,7099,709C,709D,70AB,70AC,70AD,70AE,70AF,70B1,70B3,70B7,70B8,70B9,70BB,70BC,70BD,70C0,70C1,70C2,70C3,70C8,70CA,70D8,70D9,70DB,70DF,70E4,70E6,70E7,70E8,70E9,70EB,70EC,70ED,70EF,70F7,70F9,70FD,7109,710A,7110,7113,7115,7116,7118,7119,711A,7126,712F,7130,7131,7136,7145,714A,714C,714E,715C,715E,7164,7166,7167,7168,716E,7172,7173,7178,717A,717D,7184,718A,718F,7194,7198,7199,719F,71A0,71A8,71AC,71B3,71B5,71B9,71C3,71CE,71D4,71D5,71E0,71E5,71E7,71EE,71F9,7206,721D,7228,722A,722C,7230,7231,7235,7236,7237,7238,7239,723B,723D,723F,7247,7248,724C,724D,7252,7256,7259,725B,725D,725F,7261,7262,7266,7267,7269,726E,726F,7272,7275,7279,727A,727E,727F,7280,7281,7284,728A,728B,728D,728F,7292,729F,72AC,72AD,72AF,72B0,72B4,72B6,72B7,72B8,72B9,72C1,72C2,72C3,72C4,72C8,72CD,72CE,72D0,72D2,72D7,72D9,72DE,72E0,72E1,72E8,72E9,72EC,72ED,72EE,72EF,72F0,72F1,72F2,72F3,72F4,72F7,72F8,72FA,72FB,72FC,7301,7303,730A,730E,7313,7315,7316,7317,731B,731C,731D,731E,7321,7322,7325,7329,732A,732B,732C,732E,7331,7334,7337,7338,7339,733E,733F,734D,7350,7352,7357,7360,736C,736D,736F,737E,7384,7387,7389,738B,738E,7391,7396,739B,739F,73A2,73A9,73AB,73AE,73AF,73B0,73B2,73B3,73B7,73BA,73BB,73C0,73C2,73C8,73C9,73CA,73CD,73CF,73D0,73D1,73D9,73DE,73E0,73E5,73E7,73E9,73ED,73F2,7403,7405,7406,7409,740A,740F,7410,741A,741B,7422,7425,7426,7428,742A,742C,742E,7430,7433,7434,7435,7436,743C,7441,7455,7457,7459,745A,745B,745C,745E,745F,746D,7470,7476,7477,747E,7480,7481,7483,7487,748B,748E,7490,749C,749E,74A7,74A8,74A9,74BA,74D2,74DC,74DE,74E0,74E2,74E3,74E4,74E6,74EE,74EF,74F4,74F6,74F7,74FF,7504,750D,750F,7511,7513,7518,7519,751A,751C,751F,7525,7528,7529,752B,752C,752D,752F,7530,7531,7532,7533,7535,7537,7538,753A,753B,753E,7540,7545,7548,754B,754C,754E,754F,7554,7559,755A,755B,755C,7565,7566,756A,7572,7574,7578,7579,757F,7583,7586,758B,758F,7591,7592,7594,7596,7597,7599,759A,759D,759F,75A0,75A1,75A3,75A4,75A5,75AB,75AC,75AE,75AF,75B0,75B1,75B2,75B3,75B4,75B5,75B8,75B9,75BC,75BD,75BE,75C2,75C3,75C4,75C5,75C7,75C8,75C9,75CA,75CD,75D2,75D4,75D5,75D6,75D8,75DB,75DE,75E2,75E3,75E4,75E6,75E7,75E8,75EA,75EB,75F0,75F1,75F4,75F9,75FC,75FF,7600,7601,7603,7605,760A,760C,7610,7615,7617,7618,7619,761B,761F,7620,7622,7624,7625,7626,7629,762A,762B,762D,7630,7633,7634,7635,7638,763C,763E,763F,7640,7643,764C,764D,7654,7656,765C,765E,7663,766B,766F,7678,767B,767D,767E,7682,7684,7686,7687,7688,768B,768E,7691,7693,7696,7699,76A4,76AE,76B1,76B2,76B4,76BF,76C2,76C5,76C6,76C8,76CA,76CD,76CE,76CF,76D0,76D1,76D2,76D4,76D6,76D7,76D8,76DB,76DF,76E5,76EE,76EF,76F1,76F2,76F4,76F8,76F9,76FC,76FE,7701,7704,7707,7708,7709,770B,770D,7719,771A,771F,7720,7722,7726,7728,7729,772D,772F,7735,7736,7737,7738,773A,773C,7740,7741,7743,7747,7750,7751,775A,775B,7761,7762,7763,7765,7766,7768,776B,776C,7779,777D,777E,777F,7780,7784,7785,778C,778D,778E,7791,7792,779F,77A0,77A2,77A5,77A7,77A9,77AA,77AC,77B0,77B3,77B5,77BB,77BD,77BF,77CD,77D7,77DB,77DC,77E2,77E3,77E5,77E7,77E9,77EB,77EC,77ED,77EE,77F3,77F6,77F8,77FD,77FE,77FF,7800,7801,7802,7809,780C,780D,7811,7812,7814,7816,7817,7818,781A,781C,781D,781F,7823,7825,7826,7827,7829,782C,782D,7830,7834,7837,7838,7839,783A,783B,783C,783E,7840,7845,7847,784C,784E,7850,7852,7855,7856,7857,785D,786A,786B,786C,786D,786E,7877,787C,7887,7889,788C,788D,788E,7891,7893,7897,7898,789A,789B,789C,789F,78A1,78A3,78A5,78A7,78B0,78B1,78B2,78B3,78B4,78B9,78BE,78C1,78C5,78C9,78CA,78CB,78D0,78D4,78D5,78D9,78E8,78EC,78F2,78F4,78F7,78FA,7901,7905,7913,791E,7924,7934,793A,793B,793C,793E,7940,7941,7946,7948,7949,7953,7956,7957,795A,795B,795C,795D,795E,795F,7960,7962,7965,7967,7968,796D,796F,7977,7978,797A,7980,7981,7984,7985,798A,798F,799A,79A7,79B3,79B9,79BA,79BB,79BD,79BE,79C0,79C1,79C3,79C6,79C9,79CB,79CD,79D1,79D2,79D5,79D8,79DF,79E3,79E4,79E6,79E7,79E9,79EB,79ED,79EF,79F0,79F8,79FB,79FD,7A00,7A02,7A03,7A06,7A0B,7A0D,7A0E,7A14,7A17,7A1A,7A1E,7A20,7A23,7A33,7A37,7A39,7A3B,7A3C,7A3D,7A3F,7A46,7A51,7A57,7A70,7A74,7A76,7A77,7A78,7A79,7A7A,7A7F,7A80,7A81,7A83,7A84,7A86,7A88,7A8D,7A91,7A92,7A95,7A96,7A97,7A98,7A9C,7A9D,7A9F,7AA0,7AA5,7AA6,7AA8,7AAC,7AAD,7AB3,7ABF,7ACB,7AD6,7AD9,7ADE,7ADF,7AE0,7AE3,7AE5,7AE6,7AED,7AEF,7AF9,7AFA,7AFD,7AFF,7B03,7B04,7B06,7B08,7B0A,7B0B,7B0F,7B11,7B14,7B15,7B19,7B1B,7B1E,7B20,7B24,7B25,7B26,7B28,7B2A,7B2B,7B2C,7B2E,7B31,7B33,7B38,7B3A,7B3C,7B3E,7B45,7B47,7B49,7B4B,7B4C,7B4F,7B50,7B51,7B52,7B54,7B56,7B58,7B5A,7B5B,7B5D,7B60,7B62,7B6E,7B71,7B72,7B75,7B77,7B79,7B7B,7B7E,7B80,7B85,7B8D,7B90,7B94,7B95,7B97,7B9C,7B9D,7BA1,7BA2,7BA6,7BA7,7BA8,7BA9,7BAA,7BAB,7BAC,7BAD,7BB1,7BB4,7BB8,7BC1,7BC6,7BC7,7BCC,7BD1,7BD3,7BD9,7BDA,7BDD,7BE1,7BE5,7BE6,7BEA,7BEE,7BF1,7BF7,7BFC,7BFE,7C07,7C0B,7C0C,7C0F,7C16,7C1F,7C26,7C27,7C2A,7C38,7C3F,7C40,7C41,7C4D,7C73,7C74,7C7B,7C7C,7C7D,7C89,7C91,7C92,7C95,7C97,7C98,7C9C,7C9D,7C9E,7C9F,7CA2,7CA4,7CA5,7CAA,7CAE,7CB1,7CB2,7CB3,7CB9,7CBC,7CBD,7CBE,7CC1,7CC5,7CC7,7CC8,7CCA,7CCC,7CCD,7CD5,7CD6,7CD7,7CD9,7CDC,7CDF,7CE0,7CE8,7CEF,7CF8,7CFB,7D0A,7D20,7D22,7D27,7D2B,7D2F,7D6E,7D77,7DA6,7DAE,7E3B,7E41,7E47,7E82,7E9B,7E9F,7EA0,7EA1,7EA2,7EA3,7EA4,7EA5,7EA6,7EA7,7EA8,7EA9,7EAA,7EAB,7EAC,7EAD,7EAF,7EB0,7EB1,7EB2,7EB3,7EB5,7EB6,7EB7,7EB8,7EB9,7EBA,7EBD,7EBE,7EBF,7EC0,7EC1,7EC2,7EC3,7EC4,7EC5,7EC6,7EC7,7EC8,7EC9,7ECA,7ECB,7ECC,7ECD,7ECE,7ECF,7ED0,7ED1,7ED2,7ED3,7ED4,7ED5,7ED7,7ED8,7ED9,7EDA,7EDB,7EDC,7EDD,7EDE,7EDF,7EE0,7EE1,7EE2,7EE3,7EE5,7EE6,7EE7,7EE8,7EE9,7EEA,7EEB,7EED,7EEE,7EEF,7EF0,7EF1,7EF2,7EF3,7EF4,7EF5,7EF6,7EF7,7EF8,7EFA,7EFB,7EFC,7EFD,7EFE,7EFF,7F00,7F01,7F02,7F03,7F04,7F05,7F06,7F07,7F08,7F09,7F0B,7F0C,7F0D,7F0E,7F0F,7F11,7F12,7F13,7F14,7F15,7F16,7F17,7F18,7F19,7F1A,7F1B,7F1C,7F1D,7F1F,7F20,7F21,7F22,7F23,7F24,7F25,7F26,7F27,7F28,7F29,7F2A,7F2B,7F2C,7F2D,7F2E,7F2F,7F30,7F31,7F32,7F33,7F34,7F35,7F36,7F38,7F3A,7F42,7F44,7F45,7F50,7F51,7F54,7F55,7F57,7F58,7F5A,7F5F,7F61,7F62,7F68,7F69,7F6A,7F6E,7F71,7F72,7F74,7F79,7F7E,7F81,7F8A,7F8C,7F8E,7F94,7F9A,7F9D,7F9E,7F9F,7FA1,7FA4,7FA7,7FAF,7FB0,7FB2,7FB8,7FB9,7FBC,7FBD,7FBF,7FC1,7FC5,7FCA,7FCC,7FCE,7FD4,7FD5,7FD8,7FDF,7FE0,7FE1,7FE5,7FE6,7FE9,7FEE,7FF0,7FF1,7FF3,7FFB,7FFC,8000,8001,8003,8004,8005,8006,800B,800C,800D,8010,8012,8014,8015,8016,8017,8018,8019,801C,8020,8022,8025,8026,8027,8028,8029,802A,8031,8033,8035,8036,8037,8038,803B,803D,803F,8042,8043,8046,804A,804B,804C,804D,8052,8054,8058,805A,8069,806A,8071,807F,8080,8083,8084,8086,8087,8089,808B,808C,8093,8096,8098,809A,809B,809C,809D,809F,80A0,80A1,80A2,80A4,80A5,80A9,80AA,80AB,80AD,80AE,80AF,80B1,80B2,80B4,80B7,80BA,80BC,80BD,80BE,80BF,80C0,80C1,80C2,80C3,80C4,80C6,80CC,80CD,80CE,80D6,80D7,80D9,80DA,80DB,80DC,80DD,80DE,80E1,80E4,80E5,80E7,80E8,80E9,80EA,80EB,80EC,80ED,80EF,80F0,80F1,80F2,80F3,80F4,80F6,80F8,80FA,80FC,80FD,8102,8106,8109,810A,810D,810E,810F,8110,8111,8112,8113,8114,8116,8118,811A,811E,812C,812F,8131,8132,8136,8138,813E,8146,8148,814A,814B,814C,8150,8151,8153,8154,8155,8159,815A,8160,8165,8167,8169,816D,816E,8170,8171,8174,8179,817A,817B,817C,817D,817E,817F,8180,8182,8188,818A,818F,8191,8198,819B,819C,819D,81A3,81A6,81A8,81AA,81B3,81BA,81BB,81C0,81C1,81C2,81C3,81C6,81CA,81CC,81E3,81E7,81EA,81EC,81ED,81F3,81F4,81FB,81FC,81FE,8200,8201,8202,8204,8205,8206,820C,820D,8210,8212,8214,821B,821C,821E,821F,8221,8222,8223,8228,822A,822B,822C,822D,822F,8230,8231,8233,8234,8235,8236,8237,8238,8239,823B,823E,8244,8247,8249,824B,824F,8258,825A,825F,8268,826E,826F,8270,8272,8273,8274,8279,827A,827D,827E,827F,8282,8284,8288,828A,828B,828D,828E,828F,8291,8292,8297,8298,8299,829C,829D,829F,82A1,82A4,82A5,82A6,82A8,82A9,82AA,82AB,82AC,82AD,82AE,82AF,82B0,82B1,82B3,82B4,82B7,82B8,82B9,82BD,82BE,82C1,82C4,82C7,82C8,82CA,82CB,82CC,82CD,82CE,82CF,82D1,82D2,82D3,82D4,82D5,82D7,82D8,82DB,82DC,82DE,82DF,82E0,82E1,82E3,82E4,82E5,82E6,82EB,82EF,82F1,82F4,82F7,82F9,82FB,8301,8302,8303,8304,8305,8306,8307,8308,8309,830C,830E,830F,8311,8314,8315,8317,831A,831B,831C,8327,8328,832B,832C,832D,832F,8331,8333,8334,8335,8336,8338,8339,833A,833C,8340,8343,8346,8347,8349,834F,8350,8351,8352,8354,835A,835B,835C,835E,835F,8360,8361,8363,8364,8365,8366,8367,8368,8369,836A,836B,836C,836D,836E,836F,8377,8378,837B,837C,837D,8385,8386,8389,838E,8392,8393,8398,839B,839C,839E,83A0,83A8,83A9,83AA,83AB,83B0,83B1,83B2,83B3,83B4,83B6,83B7,83B8,83B9,83BA,83BC,83BD,83C0,83C1,83C5,83C7,83CA,83CC,83CF,83D4,83D6,83D8,83DC,83DD,83DF,83E0,83E1,83E5,83E9,83EA,83F0,83F1,83F2,83F8,83F9,83FD,8401,8403,8404,8406,840B,840C,840D,840E,840F,8411,8418,841C,841D,8424,8425,8426,8427,8428,8431,8438,843C,843D,8446,8451,8457,8459,845A,845B,845C,8461,8463,8469,846B,846C,846D,8471,8473,8475,8476,8478,847A,8482,8487,8488,8489,848B,848C,848E,8497,8499,849C,84A1,84AF,84B2,84B4,84B8,84B9,84BA,84BD,84BF,84C1,84C4,84C9,84CA,84CD,84D0,84D1,84D3,84D6,84DD,84DF,84E0,84E3,84E5,84E6,84EC,84F0,84FC,84FF,850C,8511,8513,8517,851A,851F,8521,852B,852C,8537,8538,8539,853A,853B,853C,853D,8543,8548,8549,854A,8556,8559,855E,8564,8568,8572,8574,8579,857A,857B,857E,8584,8585,8587,858F,859B,859C,85A4,85A8,85AA,85AE,85AF,85B0,85B7,85B9,85C1,85C9,85CF,85D0,85D3,85D5,85DC,85E4,85E9,85FB,85FF,8605,8611,8616,8627,8629,8638,863C,864D,864E,864F,8650,8651,8654,865A,865E,8662,866B,866C,866E,8671,8679,867A,867B,867C,867D,867E,867F,8680,8681,8682,868A,868B,868C,868D,8693,8695,869C,869D,86A3,86A4,86A7,86A8,86A9,86AA,86AC,86AF,86B0,86B1,86B4,86B5,86B6,86BA,86C0,86C4,86C6,86C7,86C9,86CA,86CB,86CE,86CF,86D0,86D1,86D4,86D8,86D9,86DB,86DE,86DF,86E4,86E9,86ED,86EE,86F0,86F1,86F2,86F3,86F4,86F8,86F9,86FE,8700,8702,8703,8707,8708,8709,870A,870D,8712,8713,8715,8717,8718,871A,871C,871E,8721,8722,8723,8725,8729,872E,8731,8734,8737,873B,873E,873F,8747,8748,8749,874C,874E,8753,8757,8759,8760,8763,8764,8765,876E,8770,8774,8776,877B,877C,877D,877E,8782,8783,8785,8788,878B,878D,8793,8797,879F,87A8,87AB,87AC,87AD,87AF,87B3,87B5,87BA,87BD,87C0,87C6,87CA,87CB,87D1,87D2,87D3,87DB,87E0,87E5,87EA,87EE,87F9,87FE,8803,880A,8813,8815,8816,881B,8821,8822,8832,8839,883C,8840,8844,8845,884C,884D,8854,8857,8859,8861,8862,8863,8864,8865,8868,8869,886B,886C,886E,8870,8872,8877,887D,887E,887F,8881,8882,8884,8885,8888,888B,888D,8892,8896,889C,88A2,88A4,88AB,88AD,88B1,88B7,88BC,88C1,88C2,88C5,88C6,88C9,88CE,88D2,88D4,88D5,88D8,88D9,88DF,88E2,88E3,88E4,88E5,88E8,88F0,88F1,88F3,88F4,88F8,88F9,88FC,88FE,8902,890A,8910,8912,8913,8919,891A,891B,8921,8925,892A,892B,8930,8934,8936,8941,8944,895E,895F,8966,897B,897F,8981,8983,8986,89C1,89C2,89C4,89C5,89C6,89C7,89C8,89C9,89CA,89CB,89CC,89CE,89CF,89D0,89D1,89D2,89D6,89DA,89DC,89DE,89E3,89E5,89E6,89EB,89EF,89F3,8A00,8A07,8A3E,8A48,8A79,8A89,8A8A,8A93,8B07,8B26,8B66,8B6C,8BA0,8BA1,8BA2,8BA3,8BA4,8BA5,8BA6,8BA7,8BA8,8BA9,8BAA,8BAB,8BAD,8BAE,8BAF,8BB0,8BB2,8BB3,8BB4,8BB5,8BB6,8BB7,8BB8,8BB9,8BBA,8BBC,8BBD,8BBE,8BBF,8BC0,8BC1,8BC2,8BC3,8BC4,8BC5,8BC6,8BC8,8BC9,8BCA,8BCB,8BCC,8BCD,8BCE,8BCF,8BD1,8BD2,8BD3,8BD4,8BD5,8BD6,8BD7,8BD8,8BD9,8BDA,8BDB,8BDC,8BDD,8BDE,8BDF,8BE0,8BE1,8BE2,8BE3,8BE4,8BE5,8BE6,8BE7,8BE8,8BE9,8BEB,8BEC,8BED,8BEE,8BEF,8BF0,8BF1,8BF2,8BF3,8BF4,8BF5,8BF6,8BF7,8BF8,8BF9,8BFA,8BFB,8BFC,8BFD,8BFE,8BFF,8C00,8C01,8C02,8C03,8C04,8C05,8C06,8C07,8C08,8C0A,8C0B,8C0C,8C0D,8C0E,8C0F,8C10,8C11,8C12,8C13,8C14,8C15,8C16,8C17,8C18,8C19,8C1A,8C1B,8C1C,8C1D,8C1F,8C20,8C21,8C22,8C23,8C24,8C25,8C26,8C27,8C28,8C29,8C2A,8C2B,8C2C,8C2D,8C2E,8C2F,8C30,8C31,8C32,8C33,8C34,8C35,8C36,8C37,8C41,8C46,8C47,8C49,8C4C,8C55,8C5A,8C61,8C62,8C6A,8C6B,8C73,8C78,8C79,8C7A,8C82,8C85,8C89,8C8A,8C8C,8C94,8C98,8D1D,8D1E,8D1F,8D21,8D22,8D23,8D24,8D25,8D26,8D27,8D28,8D29,8D2A,8D2B,8D2C,8D2D,8D2E,8D2F,8D30,8D31,8D32,8D33,8D34,8D35,8D36,8D37,8D38,8D39,8D3A,8D3B,8D3C,8D3D,8D3E,8D3F,8D40,8D41,8D42,8D43,8D44,8D45,8D46,8D47,8D48,8D49,8D4A,8D4B,8D4C,8D4D,8D4E,8D4F,8D50,8D53,8D54,8D55,8D56,8D58,8D59,8D5A,8D5B,8D5C,8D5D,8D5E,8D60,8D61,8D62,8D63,8D64,8D66,8D67,8D6B,8D6D,8D70,8D73,8D74,8D75,8D76,8D77,8D81,8D84,8D85,8D8A,8D8B,8D91,8D94,8D9F,8DA3,8DB1,8DB3,8DB4,8DB5,8DB8,8DBA,8DBC,8DBE,8DBF,8DC3,8DC4,8DC6,8DCB,8DCC,8DCE,8DCF,8DD1,8DD6,8DD7,8DDA,8DDB,8DDD,8DDE,8DDF,8DE3,8DE4,8DE8,8DEA,8DEB,8DEC,8DEF,8DF3,8DF5,8DF7,8DF8,8DF9,8DFA,8DFB,8DFD,8E05,8E09,8E0A,8E0C,8E0F,8E14,8E1D,8E1E,8E1F,8E22,8E23,8E29,8E2A,8E2C,8E2E,8E2F,8E31,8E35,8E39,8E3A,8E3D,8E40,8E41,8E42,8E44,8E47,8E48,8E49,8E4A,8E4B,8E51,8E52,8E59,8E66,8E69,8E6C,8E6D,8E6F,8E70,8E72,8E74,8E76,8E7C,8E7F,8E81,8E85,8E87,8E8F,8E90,8E94,8E9C,8E9E,8EAB,8EAC,8EAF,8EB2,8EBA,8ECE,8F66,8F67,8F68,8F69,8F6B,8F6C,8F6D,8F6E,8F6F,8F70,8F71,8F72,8F73,8F74,8F75,8F76,8F77,8F78,8F79,8F7A,8F7B,8F7C,8F7D,8F7E,8F7F,8F81,8F82,8F83,8F84,8F85,8F86,8F87,8F88,8F89,8F8A,8F8B,8F8D,8F8E,8F8F,8F90,8F91,8F93,8F94,8F95,8F96,8F97,8F98,8F99,8F9A,8F9B,8F9C,8F9E,8F9F,8FA3,8FA8,8FA9,8FAB,8FB0,8FB1,8FB6,8FB9,8FBD,8FBE,8FC1,8FC2,8FC4,8FC5,8FC7,8FC8,8FCE,8FD0,8FD1,8FD3,8FD4,8FD5,8FD8,8FD9,8FDB,8FDC,8FDD,8FDE,8FDF,8FE2,8FE4,8FE5,8FE6,8FE8,8FE9,8FEA,8FEB,8FED,8FEE,8FF0,8FF3,8FF7,8FF8,8FF9,8FFD,9000,9001,9002,9003,9004,9005,9006,9009,900A,900B,900D,900F,9010,9011,9012,9014,9016,9017,901A,901B,901D,901E,901F,9020,9021,9022,9026,902D,902E,902F,9035,9036,9038,903B,903C,903E,9041,9042,9044,9047,904D,904F,9050,9051,9052,9053,9057,9058,905B,9062,9063,9065,9068,906D,906E,9074,9075,907D,907F,9080,9082,9083,9088,908B,9091,9093,9095,9097,9099,909B,909D,90A1,90A2,90A3,90A6,90AA,90AC,90AE,90AF,90B0,90B1,90B3,90B4,90B5,90B6,90B8,90B9,90BA,90BB,90BE,90C1,90C4,90C5,90C7,90CA,90CE,90CF,90D0,90D1,90D3,90D7,90DB,90DC,90DD,90E1,90E2,90E6,90E7,90E8,90EB,90ED,90EF,90F4,90F8,90FD,90FE,9102,9104,9119,911E,9122,9123,912F,9131,9139,9143,9146,9149,914A,914B,914C,914D,914E,914F,9150,9152,9157,915A,915D,915E,9161,9162,9163,9164,9165,9169,916A,916C,916E,916F,9170,9171,9172,9174,9175,9176,9177,9178,9179,917D,917E,917F,9185,9187,9189,918B,918C,918D,9190,9191,9192,919A,919B,91A2,91A3,91AA,91AD,91AE,91AF,91B4,91B5,91BA,91C7,91C9,91CA,91CC,91CD,91CE,91CF,91D1,91DC,9274,928E,92AE,92C8,933E,936A,938F,93CA,93D6,943E,946B,9485,9486,9487,9488,9489,948A,948B,948C,948D,948E,948F,9490,9492,9493,9494,9495,9497,9499,949A,949B,949C,949D,949E,949F,94A0,94A1,94A2,94A3,94A4,94A5,94A6,94A7,94A8,94A9,94AA,94AB,94AC,94AD,94AE,94AF,94B0,94B1,94B2,94B3,94B4,94B5,94B6,94B7,94B8,94B9,94BA,94BB,94BC,94BD,94BE,94BF,94C0,94C1,94C2,94C3,94C4,94C5,94C6,94C8,94C9,94CA,94CB,94CC,94CD,94CE,94D0,94D1,94D2,94D5,94D6,94D7,94D8,94D9,94DB,94DC,94DD,94DE,94DF,94E0,94E1,94E2,94E3,94E4,94E5,94E7,94E8,94E9,94EA,94EB,94EC,94ED,94EE,94EF,94F0,94F1,94F2,94F3,94F4,94F5,94F6,94F7,94F8,94F9,94FA,94FC,94FD,94FE,94FF,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,950A,950B,950C,950D,950E,950F,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,951A,951B,951D,951E,951F,9521,9522,9523,9524,9525,9526,9528,9529,952A,952B,952C,952D,952E,952F,9530,9531,9532,9534,9535,9536,9537,9538,9539,953A,953B,953C,953E,953F,9540,9541,9542,9544,9545,9546,9547,9549,954A,954C,954D,954E,954F,9550,9551,9552,9553,9554,9556,9557,9558,9559,955B,955C,955D,955E,955F,9561,9562,9563,9564,9565,9566,9567,9568,9569,956A,956B,956C,956D,956F,9570,9571,9572,9573,9576,957F,95E8,95E9,95EA,95EB,95ED,95EE,95EF,95F0,95F1,95F2,95F3,95F4,95F5,95F6,95F7,95F8,95F9,95FA,95FB,95FC,95FD,95FE,9600,9601,9602,9603,9604,9605,9606,9608,9609,960A,960B,960C,960D,960E,960F,9610,9611,9612,9614,9615,9616,9617,9619,961A,961C,961D,961F,9621,9622,962A,962E,9631,9632,9633,9634,9635,9636,963B,963C,963D,963F,9640,9642,9644,9645,9646,9647,9648,9649,964B,964C,964D,9650,9654,9655,965B,965F,9661,9662,9664,9667,9668,9669,966A,966C,9672,9674,9675,9676,9677,9685,9686,9688,968B,968D,968F,9690,9694,9697,9698,9699,969C,96A7,96B0,96B3,96B6,96B9,96BC,96BD,96BE,96C0,96C1,96C4,96C5,96C6,96C7,96C9,96CC,96CD,96CE,96CF,96D2,96D5,96E0,96E8,96E9,96EA,96EF,96F3,96F6,96F7,96F9,96FE,9700,9701,9704,9706,9707,9708,9709,970D,970E,970F,9713,9716,971C,971E,972A,972D,9730,9732,9738,9739,973E,9752,9753,9756,9759,975B,975E,9760,9761,9762,9765,9769,9773,9774,9776,977C,9785,978B,978D,9791,9792,9794,9798,97A0,97A3,97AB,97AD,97AF,97B2,97B4,97E6,97E7,97E9,97EA,97EB,97EC,97ED,97F3,97F5,97F6,9875,9876,9877,9878,9879,987A,987B,987C,987D,987E,987F,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,988A,988C,988D,988F,9890,9891,9893,9894,9896,9897,9898,989A,989B,989C,989D,989E,989F,98A0,98A1,98A2,98A4,98A5,98A6,98A7,98CE,98D1,98D2,98D3,98D5,98D8,98D9,98DA,98DE,98DF,98E7,98E8,990D,9910,992E,9954,9955,9963,9965,9967,9968,9969,996A,996B,996C,996D,996E,996F,9970,9971,9972,9974,9975,9976,9977,997A,997C,997D,997F,9980,9981,9984,9985,9986,9987,9988,998A,998B,998D,998F,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999,99A5,99A8,9A6C,9A6D,9A6E,9A6F,9A70,9A71,9A73,9A74,9A75,9A76,9A77,9A78,9A79,9A7A,9A7B,9A7C,9A7D,9A7E,9A7F,9A80,9A81,9A82,9A84,9A85,9A86,9A87,9A88,9A8A,9A8B,9A8C,9A8F,9A90,9A91,9A92,9A93,9A96,9A97,9A98,9A9A,9A9B,9A9C,9A9D,9A9E,9A9F,9AA0,9AA1,9AA2,9AA3,9AA4,9AA5,9AA7,9AA8,9AB0,9AB1,9AB6,9AB7,9AB8,9ABA,9ABC,9AC0,9AC1,9AC2,9AC5,9ACB,9ACC,9AD1,9AD3,9AD8,9ADF,9AE1,9AE6,9AEB,9AED,9AEF,9AF9,9AFB,9B03,9B08,9B0F,9B13,9B1F,9B23,9B2F,9B32,9B3B,9B3C,9B41,9B42,9B43,9B44,9B45,9B47,9B48,9B49,9B4D,9B4F,9B51,9B54,9C7C,9C7F,9C81,9C82,9C85,9C86,9C87,9C88,9C8B,9C8D,9C8E,9C90,9C91,9C92,9C94,9C95,9C9A,9C9B,9C9C,9C9E,9C9F,9CA0,9CA1,9CA2,9CA3,9CA4,9CA5,9CA6,9CA7,9CA8,9CA9,9CAB,9CAD,9CAE,9CB0,9CB1,9CB2,9CB3,9CB4,9CB5,9CB6,9CB7,9CB8,9CBA,9CBB,9CBC,9CBD,9CC3,9CC4,9CC5,9CC6,9CC7,9CCA,9CCB,9CCC,9CCD,9CCE,9CCF,9CD0,9CD3,9CD4,9CD5,9CD6,9CD7,9CD8,9CD9,9CDC,9CDD,9CDE,9CDF,9CE2,9E1F,9E20,9E21,9E22,9E23,9E25,9E26,9E28,9E29,9E2A,9E2B,9E2C,9E2D,9E2F,9E31,9E32,9E33,9E35,9E36,9E37,9E38,9E39,9E3A,9E3D,9E3E,9E3F,9E41,9E42,9E43,9E44,9E45,9E46,9E47,9E48,9E49,9E4A,9E4B,9E4C,9E4E,9E4F,9E51,9E55,9E57,9E58,9E5A,9E5B,9E5C,9E5E,9E63,9E64,9E66,9E67,9E68,9E69,9E6A,9E6B,9E6C,9E6D,9E70,9E71,9E73,9E7E,9E7F,9E82,9E87,9E88,9E8B,9E92,9E93,9E9D,9E9F,9EA6,9EB4,9EB8,9EBB,9EBD,9EBE,9EC4,9EC9,9ECD,9ECE,9ECF,9ED1,9ED4,9ED8,9EDB,9EDC,9EDD,9EDF,9EE0,9EE2,9EE5,9EE7,9EE9,9EEA,9EEF,9EF9,9EFB,9EFC,9EFE,9F0B,9F0D,9F0E,9F10,9F13,9F17,9F19,9F20,9F22,9F2C,9F2F,9F37,9F39,9F3B,9F3D,9F3E,9F44,9F50,9F51,9F7F,9F80,9F83,9F84,9F85,9F86,9F87,9F88,9F89,9F8A,9F8B,9F8C,9F99,9F9A,9F9B,9F9F,9FA0,FF01,FF02,FF03,FF04,FF05,FF06,FF07,FF08,FF09,FF0A,FF0B,FF0C,FF0D,FF0E,FF0F,FF10,FF11,FF12,FF13,FF14,FF15,FF16,FF17,FF18,FF19,FF1A,FF1B,FF1C,FF1D,FF1E,FF1F,FF20,FF21,FF22,FF23,FF24,FF25,FF26,FF27,FF28,FF29,FF2A,FF2B,FF2C,FF2D,FF2E,FF2F,FF30,FF31,FF32,FF33,FF34,FF35,FF36,FF37,FF38,FF39,FF3A,FF3B,FF3C,FF3D,FF3E,FF3F,FF40,FF41,FF42,FF43,FF44,FF45,FF46,FF47,FF48,FF49,FF4A,FF4B,FF4C,FF4D,FF4E,FF4F,FF50,FF51,FF52,FF53,FF54,FF55,FF56,FF57,FF58,FF59,FF5A,FF5B,FF5C,FF5D,FF5E,FFE0,FFE1,FFE3,FFE5&apos;;
}

function AnsicodeChr() {
	return &apos;A1E8,A1EC,A1A7,A1E3,A1C0,A1A4,A1C1,A8A4,A8A2,A8A8,A8A6,A8BA,A8AC,A8AA,A8B0,A8AE,A1C2,A8B4,A8B2,A8B9,A8A1,A8A5,A8A7,A8A9,A8AD,A8B1,A8A3,A8AB,A8AF,A8B3,A8B5,A8B6,A8B7,A8B8,A1A6,A1A5,A6A1,A6A2,A6A3,A6A4,A6A5,A6A6,A6A7,A6A8,A6A9,A6AA,A6AB,A6AC,A6AD,A6AE,A6AF,A6B0,A6B1,A6B2,A6B3,A6B4,A6B5,A6B6,A6B7,A6B8,A6C1,A6C2,A6C3,A6C4,A6C5,A6C6,A6C7,A6C8,A6C9,A6CA,A6CB,A6CC,A6CD,A6CE,A6CF,A6D0,A6D1,A6D2,A6D3,A6D4,A6D5,A6D6,A6D7,A6D8,A7A7,A7A1,A7A2,A7A3,A7A4,A7A5,A7A6,A7A8,A7A9,A7AA,A7AB,A7AC,A7AD,A7AE,A7AF,A7B0,A7B1,A7B2,A7B3,A7B4,A7B5,A7B6,A7B7,A7B8,A7B9,A7BA,A7BB,A7BC,A7BD,A7BE,A7BF,A7C0,A7C1,A7D1,A7D2,A7D3,A7D4,A7D5,A7D6,A7D8,A7D9,A7DA,A7DB,A7DC,A7DD,A7DE,A7DF,A7E0,A7E1,A7E2,A7E3,A7E4,A7E5,A7E6,A7E7,A7E8,A7E9,A7EA,A7EB,A7EC,A7ED,A7EE,A7EF,A7F0,A7F1,A7D7,A1AA,A1AC,A1AE,A1AF,A1B0,A1B1,A1AD,A1EB,A1E4,A1E5,A1F9,A1E6,A1ED,A2F1,A2F2,A2F3,A2F4,A2F5,A2F6,A2F7,A2F8,A2F9,A2FA,A2FB,A2FC,A1FB,A1FC,A1FA,A1FD,A1CA,A1C7,A1C6,A1CC,A1D8,A1DE,A1CF,A1CE,A1C4,A1C5,A1C9,A1C8,A1D2,A1D3,A1E0,A1DF,A1C3,A1CB,A1D7,A1D6,A1D5,A1D9,A1D4,A1DC,A1DD,A1DA,A1DB,A1D1,A1CD,A1D0,A2D9,A2DA,A2DB,A2DC,A2DD,A2DE,A2DF,A2E0,A2E1,A2E2,A2C5,A2C6,A2C7,A2C8,A2C9,A2CA,A2CB,A2CC,A2CD,A2CE,A2CF,A2D0,A2D1,A2D2,A2D3,A2D4,A2D5,A2D6,A2D7,A2D8,A2B1,A2B2,A2B3,A2B4,A2B5,A2B6,A2B7,A2B8,A2B9,A2BA,A2BB,A2BC,A2BD,A2BE,A2BF,A2C0,A2C1,A2C2,A2C3,A2C4,A9A4,A9A5,A9A6,A9A7,A9A8,A9A9,A9AA,A9AB,A9AC,A9AD,A9AE,A9AF,A9B0,A9B1,A9B2,A9B3,A9B4,A9B5,A9B6,A9B7,A9B8,A9B9,A9BA,A9BB,A9BC,A9BD,A9BE,A9BF,A9C0,A9C1,A9C2,A9C3,A9C4,A9C5,A9C6,A9C7,A9C8,A9C9,A9CA,A9CB,A9CC,A9CD,A9CE,A9CF,A9D0,A9D1,A9D2,A9D3,A9D4,A9D5,A9D6,A9D7,A9D8,A9D9,A9DA,A9DB,A9DC,A9DD,A9DE,A9DF,A9E0,A9E1,A9E2,A9E3,A9E4,A9E5,A9E6,A9E7,A9E8,A9E9,A9EA,A9EB,A9EC,A9ED,A9EE,A9EF,A1F6,A1F5,A1F8,A1F7,A1F4,A1F3,A1F0,A1F2,A1F1,A1EF,A1EE,A1E2,A1E1,A1A1,A1A2,A1A3,A1A8,A1A9,A1B4,A1B5,A1B6,A1B7,A1B8,A1B9,A1BA,A1BB,A1BE,A1BF,A1FE,A1B2,A1B3,A1BC,A1BD,A4A1,A4A2,A4A3,A4A4,A4A5,A4A6,A4A7,A4A8,A4A9,A4AA,A4AB,A4AC,A4AD,A4AE,A4AF,A4B0,A4B1,A4B2,A4B3,A4B4,A4B5,A4B6,A4B7,A4B8,A4B9,A4BA,A4BB,A4BC,A4BD,A4BE,A4BF,A4C0,A4C1,A4C2,A4C3,A4C4,A4C5,A4C6,A4C7,A4C8,A4C9,A4CA,A4CB,A4CC,A4CD,A4CE,A4CF,A4D0,A4D1,A4D2,A4D3,A4D4,A4D5,A4D6,A4D7,A4D8,A4D9,A4DA,A4DB,A4DC,A4DD,A4DE,A4DF,A4E0,A4E1,A4E2,A4E3,A4E4,A4E5,A4E6,A4E7,A4E8,A4E9,A4EA,A4EB,A4EC,A4ED,A4EE,A4EF,A4F0,A4F1,A4F2,A4F3,A5A1,A5A2,A5A3,A5A4,A5A5,A5A6,A5A7,A5A8,A5A9,A5AA,A5AB,A5AC,A5AD,A5AE,A5AF,A5B0,A5B1,A5B2,A5B3,A5B4,A5B5,A5B6,A5B7,A5B8,A5B9,A5BA,A5BB,A5BC,A5BD,A5BE,A5BF,A5C0,A5C1,A5C2,A5C3,A5C4,A5C5,A5C6,A5C7,A5C8,A5C9,A5CA,A5CB,A5CC,A5CD,A5CE,A5CF,A5D0,A5D1,A5D2,A5D3,A5D4,A5D5,A5D6,A5D7,A5D8,A5D9,A5DA,A5DB,A5DC,A5DD,A5DE,A5DF,A5E0,A5E1,A5E2,A5E3,A5E4,A5E5,A5E6,A5E7,A5E8,A5E9,A5EA,A5EB,A5EC,A5ED,A5EE,A5EF,A5F0,A5F1,A5F2,A5F3,A5F4,A5F5,A5F6,A8C5,A8C6,A8C7,A8C8,A8C9,A8CA,A8CB,A8CC,A8CD,A8CE,A8CF,A8D0,A8D1,A8D2,A8D3,A8D4,A8D5,A8D6,A8D7,A8D8,A8D9,A8DA,A8DB,A8DC,A8DD,A8DE,A8DF,A8E0,A8E1,A8E2,A8E3,A8E4,A8E5,A8E6,A8E7,A8E8,A8E9,A2E5,A2E6,A2E7,A2E8,A2E9,A2EA,A2EB,A2EC,A2ED,A2EE,D2BB,B6A1,C6DF,CDF2,D5C9,C8FD,C9CF,CFC2,D8A2,B2BB,D3EB,D8A4,B3F3,D7A8,C7D2,D8A7,CAC0,C7F0,B1FB,D2B5,B4D4,B6AB,CBBF,D8A9,B6AA,C1BD,D1CF,C9A5,D8AD,B8F6,D1BE,E3DC,D6D0,B7E1,B4AE,C1D9,D8BC,CDE8,B5A4,CEAA,D6F7,C0F6,BED9,D8AF,C4CB,BEC3,D8B1,C3B4,D2E5,D6AE,CEDA,D5A7,BAF5,B7A6,C0D6,C6B9,C5D2,C7C7,B9D4,B3CB,D2D2,D8BF,BEC5,C6F2,D2B2,CFB0,CFE7,CAE9,D8C0,C2F2,C2D2,C8E9,C7AC,C1CB,D3E8,D5F9,CAC2,B6FE,D8A1,D3DA,BFF7,D4C6,BBA5,D8C1,CEE5,BEAE,D8A8,D1C7,D0A9,D8BD,D9EF,CDF6,BFBA,BDBB,BAA5,D2E0,B2FA,BAE0,C4B6,CFED,BEA9,CDA4,C1C1,C7D7,D9F1,D9F4,C8CB,D8E9,D2DA,CAB2,C8CA,D8EC,D8EA,D8C6,BDF6,C6CD,B3F0,D8EB,BDF1,BDE9,C8D4,B4D3,C2D8,B2D6,D7D0,CACB,CBFB,D5CC,B8B6,CFC9,D9DA,D8F0,C7AA,D8EE,B4FA,C1EE,D2D4,D8ED,D2C7,D8EF,C3C7,D1F6,D6D9,D8F2,D8F5,BCFE,BCDB,C8CE,B7DD,B7C2,C6F3,D8F8,D2C1,CEE9,BCBF,B7FC,B7A5,D0DD,D6DA,D3C5,BBEF,BBE1,D8F1,C9A1,CEB0,B4AB,D8F3,C9CB,D8F6,C2D7,D8F7,CEB1,D8F9,B2AE,B9C0,D9A3,B0E9,C1E6,C9EC,CBC5,CBC6,D9A4,B5E8,B5AB,CEBB,B5CD,D7A1,D7F4,D3D3,CCE5,BACE,D9A2,D9DC,D3E0,D8FD,B7F0,D7F7,D8FE,D8FA,D9A1,C4E3,D3B6,D8F4,D9DD,D8FB,C5E5,C0D0,D1F0,B0DB,BCD1,D9A6,D9A5,D9AC,D9AE,D9AB,CAB9,D9A9,D6B6,B3DE,D9A8,C0FD,CACC,D9AA,D9A7,D9B0,B6B1,B9A9,D2C0,CFC0,C2C2,BDC4,D5EC,B2E0,C7C8,BFEB,D9AD,D9AF,CEEA,BAEE,C7D6,B1E3,B4D9,B6ED,D9B4,BFA1,D9DE,C7CE,C0FE,D9B8,CBD7,B7FD,D9B5,D9B7,B1A3,D3E1,D9B9,D0C5,D9B6,D9B1,D9B2,C1A9,D9B3,BCF3,D0DE,B8A9,BEE3,D9BD,D9BA,B0B3,D9C2,D9C4,B1B6,D9BF,B5B9,BEF3,CCC8,BAF2,D2D0,D9C3,BDE8,B3AB,D9C5,BEEB,D9C6,D9BB,C4DF,D9BE,D9C1,D9C0,D5AE,D6B5,C7E3,D9C8,BCD9,D9CA,D9BC,D9CB,C6AB,D9C9,D7F6,CDA3,BDA1,D9CC,C5BC,CDB5,D9CD,D9C7,B3A5,BFFE,B8B5,C0FC,B0F8,B4F6,D9CE,D9CF,B4A2,D9D0,B4DF,B0C1,D9D1,C9B5,CFF1,D9D2,C1C5,D9D6,C9AE,D9D5,D9D4,D9D7,CBDB,BDA9,C6A7,D9D3,D9D8,D9D9,C8E5,C0DC,B6F9,D8A3,D4CA,D4AA,D0D6,B3E4,D5D7,CFC8,B9E2,BFCB,C3E2,B6D2,CDC3,D9EE,D9F0,B5B3,B6B5,BEA4,C8EB,C8AB,B0CB,B9AB,C1F9,D9E2,C0BC,B9B2,B9D8,D0CB,B1F8,C6E4,BEDF,B5E4,D7C8,D1F8,BCE6,CADE,BCBD,D9E6,D8E7,C4DA,B8D4,C8BD,B2E1,D4D9,C3B0,C3E1,DAA2,C8DF,D0B4,BEFC,C5A9,B9DA,DAA3,D4A9,DAA4,D9FB,B6AC,B7EB,B1F9,D9FC,B3E5,BEF6,BFF6,D2B1,C0E4,B6B3,D9FE,D9FD,BEBB,C6E0,D7BC,DAA1,C1B9,B5F2,C1E8,BCF5,B4D5,C1DD,C4FD,BCB8,B7B2,B7EF,D9EC,C6BE,BFAD,BBCB,B5CA,DBC9,D0D7,CDB9,B0BC,B3F6,BBF7,DBCA,BAAF,D4E4,B5B6,B5F3,D8D6,C8D0,B7D6,C7D0,D8D7,BFAF,DBBB,D8D8,D0CC,BBAE,EBBE,C1D0,C1F5,D4F2,B8D5,B4B4,B3F5,C9BE,C5D0,C5D9,C0FB,B1F0,D8D9,B9CE,B5BD,D8DA,D6C6,CBA2,C8AF,C9B2,B4CC,BFCC,B9F4,D8DB,D8DC,B6E7,BCC1,CCEA,CFF7,D8DD,C7B0,B9D0,BDA3,CCDE,C6CA,D8E0,D8DE,D8DF,B0FE,BEE7,CAA3,BCF4,B8B1,B8EE,D8E2,BDCB,D8E4,D8E3,C5FC,D8E5,D8E6,C1A6,C8B0,B0EC,B9A6,BCD3,CEF1,DBBD,C1D3,B6AF,D6FA,C5AC,BDD9,DBBE,DBBF,C0F8,BEA2,C0CD,DBC0,CAC6,B2AA,D3C2,C3E3,D1AB,DBC2,C0D5,DBC3,BFB1,C4BC,C7DA,DBC4,D9E8,C9D7,B9B4,CEF0,D4C8,B0FC,B4D2,D0D9,D9E9,DECB,D9EB,D8B0,BBAF,B1B1,B3D7,D8CE,D4D1,BDB3,BFEF,CFBB,D8D0,B7CB,D8D1,C6A5,C7F8,D2BD,D8D2,C4E4,CAAE,C7A7,D8A6,C9FD,CEE7,BBDC,B0EB,BBAA,D0AD,B1B0,D7E4,D7BF,B5A5,C2F4,C4CF,B2A9,B2B7,B1E5,DFB2,D5BC,BFA8,C2AC,D8D5,C2B1,D8D4,CED4,DAE0,CEC0,D8B4,C3AE,D3A1,CEA3,BCB4,C8B4,C2D1,BEED,D0B6,DAE1,C7E4,B3A7,B6F2,CCFC,C0FA,C0F7,D1B9,D1E1,D8C7,B2DE,C0E5,BAF1,D8C8,D4AD,CFE1,D8C9,D8CA,CFC3,B3F8,BEC7,D8CB,DBCC,C8A5,CFD8,C8FE,B2CE,D3D6,B2E6,BCB0,D3D1,CBAB,B7B4,B7A2,CAE5,C8A1,CADC,B1E4,D0F0,C5D1,DBC5,B5FE,BFDA,B9C5,BEE4,C1ED,DFB6,DFB5,D6BB,BDD0,D5D9,B0C8,B6A3,BFC9,CCA8,DFB3,CAB7,D3D2,D8CF,D2B6,BAC5,CBBE,CCBE,DFB7,B5F0,DFB4,D3F5,B3D4,B8F7,DFBA,BACF,BCAA,B5F5,CDAC,C3FB,BAF3,C0F4,CDC2,CFF2,DFB8,CFC5,C2C0,DFB9,C2F0,BEFD,C1DF,CDCC,D2F7,B7CD,DFC1,DFC4,B7F1,B0C9,B6D6,B7D4,BAAC,CCFD,BFD4,CBB1,C6F4,D6A8,DFC5,CEE2,B3B3,CEFC,B4B5,CEC7,BAF0,CEE1,D1BD,DFC0,B4F4,B3CA,B8E6,DFBB,C4C5,DFBC,DFBD,DFBE,C5BB,DFBF,DFC2,D4B1,DFC3,C7BA,CED8,C4D8,DFCA,DFCF,D6DC,DFC9,DFDA,CEB6,BAC7,DFCE,DFC8,C5DE,C9EB,BAF4,C3FC,BED7,DFC6,DFCD,C5D8,D5A6,BACD,BECC,D3BD,B8C0,D6E4,DFC7,B9BE,BFA7,C1FC,DFCB,DFCC,DFD0,DFDB,DFE5,DFD7,DFD6,D7C9,DFE3,DFE4,E5EB,D2A7,DFD2,BFA9,D4DB,BFC8,DFD4,CFCC,DFDD,D1CA,DFDE,B0A7,C6B7,DFD3,BAE5,B6DF,CDDB,B9FE,D4D5,DFDF,CFEC,B0A5,DFE7,DFD1,D1C6,DFD5,DFD8,DFD9,DFDC,BBA9,DFE0,DFE1,DFE2,DFE6,DFE8,D3B4,B8E7,C5B6,DFEA,C9DA,C1A8,C4C4,BFDE,CFF8,D5DC,DFEE,B2B8,BADF,DFEC,DBC1,D1E4,CBF4,B4BD,B0A6,DFF1,CCC6,DFF2,DFED,DFE9,DFEB,DFEF,DFF0,BBBD,DFF3,DFF4,BBA3,CADB,CEA8,E0A7,B3AA,E0A6,E0A1,DFFE,CDD9,DFFC,DFFA,BFD0,D7C4,C9CC,DFF8,B0A1,DFFD,DFFB,E0A2,E0A8,B7C8,C6A1,C9B6,C0B2,DFF5,C5BE,D8C4,DFF9,C4F6,E0A3,E0A4,E0A5,D0A5,E0B4,CCE4,E0B1,BFA6,E0AF,CEB9,E0AB,C9C6,C0AE,E0AE,BAED,BAB0,E0A9,DFF6,E0B3,E0B8,B4AD,E0B9,CFB2,BAC8,E0B0,D0FA,E0AC,D4FB,DFF7,C5E7,E0AD,D3F7,E0B6,E0B7,E0C4,D0E1,E0BC,E0C9,E0CA,E0BE,E0AA,C9A4,E0C1,E0B2,CAC8,E0C3,E0B5,CECB,CBC3,E0CD,E0C6,E0C2,E0CB,E0BA,E0BF,E0C0,E0C5,E0C7,E0C8,E0CC,E0BB,CBD4,E0D5,E0D6,E0D2,E0D0,BCCE,E0D1,B8C2,D8C5,D0EA,C2EF,E0CF,E0BD,E0D4,E0D3,E0D7,E0DC,E0D8,D6F6,B3B0,D7EC,CBBB,E0DA,CEFB,BAD9,E0E1,E0DD,D2AD,E0E2,E0DB,E0D9,E0DF,E0E0,E0DE,E0E4,C6F7,D8AC,D4EB,E0E6,CAC9,E0E5,B8C1,E0E7,E0E8,E0E9,E0E3,BABF,CCE7,E0EA,CFF9,E0EB,C8C2,BDC0,C4D2,E0EC,E0ED,C7F4,CBC4,E0EE,BBD8,D8B6,D2F2,E0EF,CDC5,B6DA,E0F1,D4B0,C0A7,B4D1,CEA7,E0F0,E0F2,B9CC,B9FA,CDBC,E0F3,C6D4,E0F4,D4B2,C8A6,E0F6,E0F5,E0F7,CDC1,CAA5,D4DA,DBD7,DBD9,DBD8,B9E7,DBDC,DBDD,B5D8,DBDA,DBDB,B3A1,DBDF,BBF8,D6B7,DBE0,BEF9,B7BB,DBD0,CCAE,BFB2,BBB5,D7F8,BFD3,BFE9,BCE1,CCB3,DBDE,B0D3,CEEB,B7D8,D7B9,C6C2,C0A4,CCB9,DBE7,DBE1,C6BA,DBE3,DBE8,C5F7,DBEA,DBE9,BFC0,DBE6,DBE5,B4B9,C0AC,C2A2,DBE2,DBE4,D0CD,DBED,C0DD,DBF2,B6E2,DBF3,DBD2,B9B8,D4AB,DBEC,BFD1,DBF0,DBD1,B5E6,DBEB,BFE5,DBEE,DBF1,DBF9,B9A1,B0A3,C2F1,B3C7,DBEF,DBF8,C6D2,DBF4,DBF5,DBF7,DBF6,DBFE,D3F2,B2BA,DBFD,DCA4,DBFB,DBFA,DBFC,C5E0,BBF9,DCA3,DCA5,CCC3,B6D1,DDC0,DCA1,DCA2,C7B5,B6E9,DCA7,DCA6,DCA9,B1A4,B5CC,BFB0,D1DF,B6C2,DCA8,CBFA,EBF3,CBDC,CBFE,CCC1,C8FB,DCAA,CCEE,DCAB,DBD3,DCAF,DCAC,BEB3,CAFB,DCAD,C9CA,C4B9,C7BD,DCAE,D4F6,D0E6,C4AB,B6D5,DBD4,B1DA,DBD5,DBD6,BABE,C8C0,CABF,C8C9,D7B3,C9F9,BFC7,BAF8,D2BC,E2BA,B4A6,B1B8,B8B4,CFC4,D9E7,CFA6,CDE2,D9ED,B6E0,D2B9,B9BB,E2B9,E2B7,B4F3,CCEC,CCAB,B7F2,D8B2,D1EB,BABB,CAA7,CDB7,D2C4,BFE4,BCD0,B6E1,DEC5,DEC6,DBBC,D1D9,C6E6,C4CE,B7EE,B7DC,BFFC,D7E0,C6F5,B1BC,DEC8,BDB1,CCD7,DECA,DEC9,B5EC,C9DD,B0C2,C5AE,C5AB,C4CC,BCE9,CBFD,BAC3,E5F9,C8E7,E5FA,CDFD,D7B1,B8BE,C2E8,C8D1,E5FB,B6CA,BCCB,D1FD,E6A1,C3EE,E6A4,E5FE,E6A5,CDD7,B7C1,E5FC,E5FD,E6A3,C4DD,E6A8,E6A7,C3C3,C6DE,E6AA,C4B7,E6A2,CABC,BDE3,B9C3,E6A6,D0D5,CEAF,E6A9,E6B0,D2A6,BDAA,E6AD,E6AF,C0D1,D2CC,BCA7,E6B1,D2F6,D7CB,CDFE,CDDE,C2A6,E6AB,E6AC,BDBF,E6AE,E6B3,E6B2,E6B6,E6B8,C4EF,C4C8,BEEA,C9EF,E6B7,B6F0,C3E4,D3E9,E6B4,E6B5,C8A2,E6BD,E6B9,C6C5,CDF1,E6BB,E6BC,BBE9,E6BE,E6BA,C0B7,D3A4,E6BF,C9F4,E6C3,E6C4,D0F6,C3BD,C3C4,E6C2,E6C1,E6C7,CFB1,EBF4,E6CA,E6C5,BCDE,C9A9,BCB5,CFD3,E6C8,E6C9,E6CE,E6D0,E6D1,E6CB,B5D5,E6CC,E6CF,C4DB,E6C6,E6CD,E6D2,E6D4,E6D3,E6D5,D9F8,E6D6,E6D7,D7D3,E6DD,E6DE,BFD7,D4D0,D7D6,B4E6,CBEF,E6DA,D8C3,D7CE,D0A2,C3CF,E6DF,BCBE,B9C2,E6DB,D1A7,BAA2,C2CF,D8AB,CAEB,E5EE,E6DC,B7F5,C8E6,C4F5,E5B2,C4FE,CBFC,E5B3,D5AC,D3EE,CAD8,B0B2,CBCE,CDEA,BAEA,E5B5,E5B4,D7DA,B9D9,D6E6,B6A8,CDF0,D2CB,B1A6,CAB5,B3E8,C9F3,BFCD,D0FB,CAD2,E5B6,BBC2,CFDC,B9AC,D4D7,BAA6,D1E7,CFFC,BCD2,E5B7,C8DD,BFED,B1F6,CBDE,BCC5,BCC4,D2FA,C3DC,BFDC,B8BB,C3C2,BAAE,D4A2,C7DE,C4AF,B2EC,B9D1,E5BB,C1C8,D5AF,E5BC,E5BE,B4E7,B6D4,CBC2,D1B0,B5BC,CAD9,B7E2,C9E4,BDAB,CEBE,D7F0,D0A1,C9D9,B6FB,E6D8,BCE2,B3BE,C9D0,E6D9,B3A2,DECC,D3C8,DECD,D2A2,DECE,BECD,DECF,CAAC,D2FC,B3DF,E5EA,C4E1,BEA1,CEB2,C4F2,BED6,C6A8,B2E3,BED3,C7FC,CCEB,BDEC,CEDD,CABA,C6C1,E5EC,D0BC,D5B9,E5ED,CAF4,CDC0,C2C5,E5EF,C2C4,E5F0,E5F8,CDCD,C9BD,D2D9,E1A8,D3EC,CBEA,C6F1,E1AC,E1A7,E1A9,E1AA,E1AF,B2ED,E1AB,B8DA,E1AD,E1AE,E1B0,B5BA,E1B1,E1B3,E1B8,D1D2,E1B6,E1B5,C1EB,E1B7,D4C0,E1B2,E1BA,B0B6,E1B4,BFF9,E1B9,E1BB,E1BE,E1BC,D6C5,CFBF,E1BD,E1BF,C2CD,B6EB,D3F8,C7CD,B7E5,BEFE,E1C0,E1C1,E1C7,B3E7,C6E9,B4DE,D1C2,E1C8,E1C6,E1C5,E1C3,E1C2,B1C0,D5B8,E1C4,E1CB,E1CC,E1CA,EFFA,E1D3,E1D2,C7B6,E1C9,E1CE,E1D0,E1D4,E1D1,E1CD,E1CF,E1D5,E1D6,E1D7,E1D8,E1DA,E1DB,CEA1,E7DD,B4A8,D6DD,D1B2,B3B2,B9A4,D7F3,C7C9,BEDE,B9AE,CED7,B2EE,DBCF,BCBA,D2D1,CBC8,B0CD,CFEF,D9E3,BDED,B1D2,CAD0,B2BC,CBA7,B7AB,CAA6,CFA3,E0F8,D5CA,E0FB,E0FA,C5C1,CCFB,C1B1,E0F9,D6E3,B2AF,D6C4,B5DB,B4F8,D6A1,CFAF,B0EF,E0FC,E1A1,B3A3,E0FD,E0FE,C3B1,C3DD,E1A2,B7F9,BBCF,E1A3,C4BB,E1A4,E1A5,E1A6,B4B1,B8C9,C6BD,C4EA,B2A2,D0D2,E7DB,BBC3,D3D7,D3C4,B9E3,E2CF,D7AF,C7EC,B1D3,B4B2,E2D1,D0F2,C2AE,E2D0,BFE2,D3A6,B5D7,E2D2,B5EA,C3ED,B8FD,B8AE,C5D3,B7CF,E2D4,E2D3,B6C8,D7F9,CDA5,E2D8,E2D6,CAFC,BFB5,D3B9,E2D5,E2D7,C1AE,C0C8,E2DB,E2DA,C0AA,C1CE,E2DC,E2DD,E2DE,DBC8,D1D3,CDA2,BDA8,DEC3,D8A5,BFAA,DBCD,D2EC,C6FA,C5AA,DEC4,B1D7,DFAE,CABD,DFB1,B9AD,D2FD,B8A5,BAEB,B3DA,B5DC,D5C5,C3D6,CFD2,BBA1,E5F3,E5F2,E5F4,CDE4,C8F5,B5AF,C7BF,E5F6,ECB0,E5E6,B9E9,B5B1,C2BC,E5E8,E5E7,E5E9,D2CD,E1EA,D0CE,CDAE,D1E5,B2CA,B1EB,B1F2,C5ED,D5C3,D3B0,E1DC,E1DD,D2DB,B3B9,B1CB,CDF9,D5F7,E1DE,BEB6,B4FD,E1DF,BADC,E1E0,BBB2,C2C9,E1E1,D0EC,CDBD,E1E2,B5C3,C5C7,E1E3,E1E4,D3F9,E1E5,D1AD,E1E6,CEA2,E1E7,B5C2,E1E8,BBD5,D0C4,E2E0,B1D8,D2E4,E2E1,BCC9,C8CC,E2E3,ECFE,ECFD,DFAF,E2E2,D6BE,CDFC,C3A6,E3C3,D6D2,E2E7,E2E8,D3C7,E2EC,BFEC,E2ED,E2E5,B3C0,C4EE,E2EE,D0C3,BAF6,E2E9,B7DE,BBB3,CCAC,CBCB,E2E4,E2E6,E2EA,E2EB,E2F7,E2F4,D4F5,E2F3,C5AD,D5FA,C5C2,B2C0,E2EF,E2F2,C1AF,CBBC,B5A1,E2F9,BCB1,E2F1,D0D4,D4B9,E2F5,B9D6,E2F6,C7D3,E2F0,D7DC,EDA1,E2F8,EDA5,E2FE,CAD1,C1B5,BBD0,BFD6,BAE3,CBA1,EDA6,EDA3,EDA2,BBD6,EDA7,D0F4,EDA4,BADE,B6F7,E3A1,B6B2,CCF1,B9A7,CFA2,C7A1,BFD2,B6F1,E2FA,E2FB,E2FD,E2FC,C4D5,E3A2,D3C1,E3A7,C7C4,CFA4,E3A9,BAB7,E3A8,BBDA,E3A3,E3A4,E3AA,E3A6,CEF2,D3C6,BBBC,D4C3,C4FA,EDA8,D0FC,E3A5,C3F5,E3AD,B1AF,E3B2,BCC2,E3AC,B5BF,C7E9,E3B0,BEAA,CDEF,BBF3,CCE8,E3AF,E3B1,CFA7,E3AE,CEA9,BBDD,B5EB,BEE5,B2D2,B3CD,B1B9,E3AB,B2D1,B5AC,B9DF,B6E8,CFEB,E3B7,BBCC,C8C7,D0CA,E3B8,B3EE,EDA9,D3FA,D3E4,EDAA,E3B9,D2E2,E3B5,D3DE,B8D0,E3B3,E3B6,B7DF,E3B4,C0A2,E3BA,D4B8,B4C8,E3BB,BBC5,C9F7,C9E5,C4BD,EDAB,C2FD,BBDB,BFAE,CEBF,E3BC,BFB6,B1EF,D4F7,E3BE,EDAD,E3BF,BAA9,EDAC,E3BD,E3C0,BAB6,B6AE,D0B8,B0C3,EDAE,EDAF,C0C1,E3C1,C5B3,E3C2,DCB2,EDB0,B8EA,CEEC,EAA7,D0E7,CAF9,C8D6,CFB7,B3C9,CED2,BDE4,E3DE,BBF2,EAA8,D5BD,C6DD,EAA9,EAAA,EAAC,EAAB,EAAE,EAAD,BDD8,EAAF,C2BE,B4C1,B4F7,BBA7,ECE6,ECE5,B7BF,CBF9,B1E2,ECE7,C9C8,ECE8,ECE9,CAD6,DED0,B2C5,D4FA,C6CB,B0C7,B4F2,C8D3,CDD0,BFB8,BFDB,C7A4,D6B4,C0A9,DED1,C9A8,D1EF,C5A4,B0E7,B3B6,C8C5,B0E2,B7F6,C5FA,B6F3,D5D2,B3D0,BCBC,B3AD,BEF1,B0D1,D2D6,CAE3,D7A5,CDB6,B6B6,BFB9,D5DB,B8A7,C5D7,DED2,BFD9,C2D5,C7C0,BBA4,B1A8,C5EA,C5FB,CCA7,B1A7,B5D6,C4A8,DED3,D1BA,B3E9,C3F2,B7F7,D6F4,B5A3,B2F0,C4B4,C4E9,C0AD,DED4,B0E8,C5C4,C1E0,B9D5,BEDC,CDD8,B0CE,CDCF,DED6,BED0,D7BE,DED5,D5D0,B0DD,C4E2,C2A3,BCF0,D3B5,C0B9,C5A1,B2A6,D4F1,C0A8,CAC3,DED7,D5FC,B9B0,C8AD,CBA9,DED9,BFBD,C6B4,D7A7,CAB0,C4C3,B3D6,B9D2,D6B8,EAFC,B0B4,BFE6,CCF4,CDDA,D6BF,C2CE,CECE,CCA2,D0AE,C4D3,B5B2,DED8,D5F5,BCB7,BBD3,B0A4,C5B2,B4EC,D5F1,EAFD,DEDA,CDA6,CDEC,CEE6,DEDC,CDB1,C0A6,D7BD,DEDB,B0C6,BAB4,C9D3,C4F3,BEE8,B2B6,C0CC,CBF0,BCF1,BBBB,B5B7,C5F5,DEE6,DEE3,BEDD,DEDF,B4B7,BDDD,DEE0,C4ED,CFC6,B5E0,B6DE,CADA,B5F4,DEE5,D5C6,DEE1,CCCD,C6FE,C5C5,D2B4,BEF2,C2D3,CCBD,B3B8,BDD3,BFD8,CDC6,D1DA,B4EB,DEE4,DEDD,DEE7,EAFE,C2B0,DEE2,D6C0,B5A7,B2F4,DEE8,DEF2,DEED,DEF1,C8E0,D7E1,DEEF,C3E8,CCE1,B2E5,D2BE,DEEE,DEEB,CED5,B4A7,BFAB,BEBE,BDD2,DEE9,D4AE,DEDE,DEEA,C0BF,DEEC,B2F3,B8E9,C2A7,BDC1,DEF5,DEF8,B2AB,B4A4,B4EA,C9A6,DEF6,CBD1,B8E3,DEF7,DEFA,DEF9,CCC2,B0E1,B4EE,E5BA,D0AF,B2EB,EBA1,DEF4,C9E3,DEF3,B0DA,D2A1,B1F7,CCAF,DEF0,CBA4,D5AA,DEFB,B4DD,C4A6,DEFD,C3FE,C4A1,DFA1,C1CC,DEFC,BEEF,C6B2,B3C5,C8F6,CBBA,DEFE,DFA4,D7B2,B3B7,C1C3,C7CB,B2A5,B4E9,D7AB,C4EC,DFA2,DFA3,DFA5,BAB3,DFA6,C0DE,C9C3,B2D9,C7E6,DFA7,C7DC,DFA8,EBA2,CBD3,DFAA,DFA9,B2C1,C5CA,DFAB,D4DC,C8C1,DFAC,BEF0,DFAD,D6A7,EAB7,EBB6,CAD5,D8FC,B8C4,B9A5,B7C5,D5FE,B9CA,D0A7,F4CD,B5D0,C3F4,BEC8,EBB7,B0BD,BDCC,C1B2,B1D6,B3A8,B8D2,C9A2,B6D8,EBB8,BEB4,CAFD,C7C3,D5FB,B7F3,CEC4,D5AB,B1F3,ECB3,B0DF,ECB5,B6B7,C1CF,F5FA,D0B1,D5E5,CED3,BDEF,B3E2,B8AB,D5B6,EDBD,B6CF,CBB9,D0C2,B7BD,ECB6,CAA9,C5D4,ECB9,ECB8,C2C3,ECB7,D0FD,ECBA,ECBB,D7E5,ECBC,ECBD,C6EC,CEDE,BCC8,C8D5,B5A9,BEC9,D6BC,D4E7,D1AE,D0F1,EAB8,EAB9,EABA,BAB5,CAB1,BFF5,CDFA,EAC0,B0BA,EABE,C0A5,EABB,B2FD,C3F7,BBE8,D2D7,CEF4,EABF,EABC,EAC3,D0C7,D3B3,B4BA,C3C1,D7F2,D5D1,CAC7,EAC5,EAC4,EAC7,EAC6,D6E7,CFD4,EACB,BBCE,BDFA,C9CE,EACC,C9B9,CFFE,EACA,D4CE,EACD,EACF,CDED,EAC9,EACE,CEEE,BBDE,B3BF,C6D5,BEB0,CEFA,C7E7,BEA7,EAD0,D6C7,C1C0,D4DD,EAD1,CFBE,EAD2,CAEE,C5AF,B0B5,EAD4,EAD3,F4DF,C4BA,B1A9,E5DF,EAD5,CAEF,EAD6,EAD7,C6D8,EAD8,EAD9,D4BB,C7FA,D2B7,B8FC,EAC2,B2DC,C2FC,D4F8,CCE6,D7EE,D4C2,D3D0,EBC3,C5F3,B7FE,EBD4,CBB7,EBDE,C0CA,CDFB,B3AF,C6DA,EBFC,C4BE,CEB4,C4A9,B1BE,D4FD,CAF5,D6EC,C6D3,B6E4,BBFA,D0E0,C9B1,D4D3,C8A8,B8CB,E8BE,C9BC,E8BB,C0EE,D0D3,B2C4,B4E5,E8BC,D5C8,B6C5,E8BD,CAF8,B8DC,CCF5,C0B4,D1EE,E8BF,E8C2,BABC,B1AD,BDDC,EABD,E8C3,E8C6,E8CB,E8CC,CBC9,B0E5,BCAB,B9B9,E8C1,CDF7,E8CA,CEF6,D5ED,C1D6,E8C4,C3B6,B9FB,D6A6,E8C8,CAE0,D4E6,E8C0,E8C5,E8C7,C7B9,B7E3,E8C9,BFDD,E8D2,E8D7,E8D5,BCDC,BCCF,E8DB,E8DE,E8DA,B1FA,B0D8,C4B3,B8CC,C6E2,C8BE,C8E1,E8CF,E8D4,E8D6,B9F1,E8D8,D7F5,C4FB,E8DC,B2E9,E8D1,BCED,BFC2,E8CD,D6F9,C1F8,B2F1,E8DF,CAC1,E8D9,D5A4,B1EA,D5BB,E8CE,E8D0,B6B0,E8D3,E8DD,C0B8,CAF7,CBA8,C6DC,C0F5,E8E9,D0A3,E8F2,D6EA,E8E0,E8E1,D1F9,BACB,B8F9,B8F1,D4D4,E8EF,E8EE,E8EC,B9F0,CCD2,E8E6,CEA6,BFF2,B0B8,E8F1,E8F0,D7C0,E8E4,CDA9,C9A3,BBB8,BDDB,E8EA,E8E2,E8E3,E8E5,B5B5,E8E7,C7C5,E8EB,E8ED,BDB0,D7AE,E8F8,E8F5,CDB0,E8F6,C1BA,E8E8,C3B7,B0F0,E8F4,E8F7,B9A3,C9D2,C3CE,CEE0,C0E6,CBF3,CCDD,D0B5,CAE1,E8F3,BCEC,E8F9,C3DE,C6E5,B9F7,B0F4,D7D8,BCAC,C5EF,CCC4,E9A6,C9AD,E9A2,C0E2,BFC3,E8FE,B9D7,E8FB,E9A4,D2CE,E9A3,D6B2,D7B5,E9A7,BDB7,E8FC,E8FD,E9A1,CDD6,D2AC,E9B2,E9A9,B4AA,B4BB,E9AB,D0A8,E9A5,B3FE,E9AC,C0E3,E9AA,E9B9,E9B8,E9AE,E8FA,E9A8,BFAC,E9B1,E9BA,C2A5,E9AF,B8C5,E9AD,D3DC,E9B4,E9B5,E9B7,E9C7,C0C6,E9C5,E9B0,E9BB,B0F1,E9BC,D5A5,E9BE,E9BF,E9C1,C1F1,C8B6,E9BD,E9C2,E9C3,E9B3,E9B6,BBB1,E9C0,BCF7,E9C4,E9C6,E9CA,E9CE,B2DB,E9C8,B7AE,E9CB,E9CC,D5C1,C4A3,E9D8,BAE1,E9C9,D3A3,E9D4,E9D7,E9D0,E9CF,C7C1,E9D2,E9D9,B3C8,E9D3,CFF0,E9CD,B3F7,E9D6,E9DA,CCB4,CFAD,E9D5,E9DC,E9DB,E9DE,E9D1,E9DD,E9DF,C3CA,C7B7,B4CE,BBB6,D0C0,ECA3,C5B7,D3FB,ECA4,ECA5,C6DB,BFEE,ECA6,ECA7,D0AA,C7B8,B8E8,ECA8,D6B9,D5FD,B4CB,B2BD,CEE4,C6E7,CDE1,B4F5,CBC0,BCDF,E9E2,E9E3,D1EA,E9E5,B4F9,E9E4,D1B3,CAE2,B2D0,E9E8,E9E6,E9E7,D6B3,E9E9,E9EA,E9EB,E9EC,ECAF,C5B9,B6CE,D2F3,B5EE,BBD9,ECB1,D2E3,CEE3,C4B8,C3BF,B6BE,D8B9,B1C8,B1CF,B1D1,C5FE,B1D0,C3AB,D5B1,EBA4,BAC1,CCBA,EBA5,EBA7,EBA8,EBA6,EBA9,EBAB,EBAA,EBAC,CACF,D8B5,C3F1,C3A5,C6F8,EBAD,C4CA,EBAE,EBAF,EBB0,B7D5,B7FA,EBB1,C7E2,EBB3,BAA4,D1F5,B0B1,EBB2,EBB4,B5AA,C2C8,C7E8,EBB5,CBAE,E3DF,D3C0,D9DB,CDA1,D6AD,C7F3,D9E0,BBE3,BABA,E3E2,CFAB,E3E0,C9C7,BAB9,D1B4,E3E1,C8EA,B9AF,BDAD,B3D8,CEDB,CCC0,E3E8,E3E9,CDF4,CCAD,BCB3,E3EA,E3EB,D0DA,C6FB,B7DA,C7DF,D2CA,CED6,E3E4,E3EC,C9F2,B3C1,E3E7,C6E3,E3E5,EDB3,E3E6,C9B3,C5E6,B9B5,C3BB,E3E3,C5BD,C1A4,C2D9,B2D7,E3ED,BBA6,C4AD,E3F0,BEDA,E3FB,E3F5,BAD3,B7D0,D3CD,D6CE,D5D3,B9C1,D5B4,D1D8,D0B9,C7F6,C8AA,B2B4,C3DA,E3EE,E3FC,E3EF,B7A8,E3F7,E3F4,B7BA,C5A2,E3F6,C5DD,B2A8,C6FC,C4E0,D7A2,C0E1,E3F9,E3FA,E3FD,CCA9,E3F3,D3BE,B1C3,EDB4,E3F1,E3F2,E3F8,D0BA,C6C3,D4F3,E3FE,BDE0,E4A7,E4A6,D1F3,E4A3,E4A9,C8F7,CFB4,E4A8,E4AE,C2E5,B6B4,BDF2,E4A2,BAE9,E4AA,E4AC,B6FD,D6DE,E4B2,E4AD,E4A1,BBEE,CDDD,C7A2,C5C9,C1F7,E4A4,C7B3,BDAC,BDBD,E4A5,D7C7,B2E2,E4AB,BCC3,E4AF,BBEB,E4B0,C5A8,E4B1,D5E3,BFA3,E4BA,E4B7,E4BB,E4BD,C6D6,BAC6,C0CB,B8A1,E4B4,D4A1,BAA3,BDFE,E4BC,CDBF,C4F9,CFFB,C9E6,D3BF,CFD1,E4B3,E4B8,E4B9,CCE9,CCCE,C0D4,E4B5,C1B0,E4B6,CED0,BBC1,B5D3,C8F3,BDA7,D5C7,C9AC,B8A2,E4CA,E4CC,D1C4,D2BA,BAAD,BAD4,E4C3,B5ED,D7CD,E4C0,CFFD,E4BF,C1DC,CCCA,CAE7,C4D7,CCD4,E4C8,E4C7,E4C1,E4C4,B5AD,D3D9,E4C6,D2F9,B4E3,BBB4,C9EE,B4BE,BBEC,D1CD,CCED,EDB5,C7E5,D4A8,E4CB,D7D5,E4C2,BDA5,E4C5,D3E6,E4C9,C9F8,E4BE,D3E5,C7FE,B6C9,D4FC,B2B3,E4D7,CEC2,E4CD,CEBC,B8DB,E4D6,BFCA,D3CE,C3EC,C5C8,E4D8,CDC4,E4CF,E4D4,E4D5,BAFE,CFE6,D5BF,E4D2,E4D0,E4CE,CDE5,CAAA,C0A3,BDA6,E4D3,B8C8,E4E7,D4B4,E4DB,C1EF,E4E9,D2E7,E4DF,E4E0,CFAA,CBDD,E4DA,E4D1,E4E5,C8DC,E4E3,C4E7,E4E2,E4E1,B3FC,E4E8,B5E1,D7CC,E4E6,BBAC,D7D2,CCCF,EBF8,E4E4,B9F6,D6CD,E4D9,E4DC,C2FA,E4DE,C2CB,C0C4,C2D0,B1F5,CCB2,B5CE,E4EF,C6AF,C6E1,E4F5,C2A9,C0EC,D1DD,E4EE,C4AE,E4ED,E4F6,E4F4,C2FE,E4DD,E4F0,CAFE,D5C4,E4F1,D1FA,E4EB,E4EC,E4F2,CEAB,C5CB,C7B1,C2BA,E4EA,C1CA,CCB6,B3B1,E4FB,E4F3,E4FA,E4FD,E4FC,B3CE,B3BA,E4F7,E4F9,E4F8,C5EC,C0BD,D4E8,E5A2,B0C4,E5A4,E5A3,BCA4,E5A5,E5A1,E4FE,B1F4,E5A8,E5A9,E5A6,E5A7,E5AA,C6D9,E5AB,E5AD,E5AC,E5AF,E5AE,B9E0,E5B0,E5B1,BBF0,ECE1,C3F0,B5C6,BBD2,C1E9,D4EE,BEC4,D7C6,D4D6,B2D3,ECBE,EAC1,C2AF,B4B6,D1D7,B3B4,C8B2,BFBB,ECC0,D6CB,ECBF,ECC1,ECC5,BEE6,CCBF,C5DA,BEBC,ECC6,B1FE,ECC4,D5A8,B5E3,ECC2,C1B6,B3E3,ECC3,CBB8,C0C3,CCFE,C1D2,ECC8,BAE6,C0D3,D6F2,D1CC,BFBE,B7B3,C9D5,ECC7,BBE2,CCCC,BDFD,C8C8,CFA9,CDE9,C5EB,B7E9,D1C9,BAB8,ECC9,ECCA,BBC0,ECCB,ECE2,B1BA,B7D9,BDB9,ECCC,D1E6,ECCD,C8BB,ECD1,ECD3,BBCD,BCE5,ECCF,C9B7,C3BA,ECE3,D5D5,ECD0,D6F3,ECD2,ECCE,ECD4,ECD5,C9BF,CFA8,D0DC,D1AC,C8DB,ECD6,CEF5,CAEC,ECDA,ECD9,B0BE,ECD7,ECD8,ECE4,C8BC,C1C7,ECDC,D1E0,ECDB,D4EF,ECDD,DBC6,ECDE,B1AC,ECDF,ECE0,D7A6,C5C0,EBBC,B0AE,BEF4,B8B8,D2AF,B0D6,B5F9,D8B3,CBAC,E3DD,C6AC,B0E6,C5C6,EBB9,EBBA,EBBB,D1C0,C5A3,EAF2,C4B2,C4B5,C0CE,EAF3,C4C1,CEEF,EAF0,EAF4,C9FC,C7A3,CCD8,CEFE,EAF5,EAF6,CFAC,C0E7,EAF7,B6BF,EAF8,EAF9,EAFA,EAFB,EAF1,C8AE,E1EB,B7B8,E1EC,E1ED,D7B4,E1EE,E1EF,D3CC,E1F1,BFF1,E1F0,B5D2,B1B7,E1F3,E1F2,BAFC,E1F4,B9B7,BED1,C4FC,BADD,BDC6,E1F5,E1F7,B6C0,CFC1,CAA8,E1F6,D5F8,D3FC,E1F8,E1FC,E1F9,E1FA,C0EA,E1FE,E2A1,C0C7,E1FB,E1FD,E2A5,C1D4,E2A3,E2A8,B2FE,E2A2,C3CD,B2C2,E2A7,E2A6,E2A4,E2A9,E2AB,D0C9,D6ED,C3A8,E2AC,CFD7,E2AE,BAEF,E9E0,E2AD,E2AA,BBAB,D4B3,E2B0,E2AF,E9E1,E2B1,E2B2,E2B3,CCA1,E2B4,E2B5,D0FE,C2CA,D3F1,CDF5,E7E0,E7E1,BEC1,C2EA,E7E4,E7E3,CDE6,C3B5,E7E2,BBB7,CFD6,C1E1,E7E9,E7E8,E7F4,B2A3,E7EA,E7E6,E7EC,E7EB,C9BA,D5E4,E7E5,B7A9,E7E7,E7EE,E7F3,D6E9,E7ED,E7F2,E7F1,B0E0,E7F5,C7F2,C0C5,C0ED,C1F0,E7F0,E7F6,CBF6,E8A2,E8A1,D7C1,E7FA,E7F9,E7FB,E7F7,E7FE,E7FD,E7FC,C1D5,C7D9,C5FD,C5C3,C7ED,E8A3,E8A6,E8A5,E8A7,BAF7,E7F8,E8A4,C8F0,C9AA,E8A9,B9E5,D1FE,E8A8,E8AA,E8AD,E8AE,C1A7,E8AF,E8B0,E8AC,E8B4,E8AB,E8B1,E8B5,E8B2,E8B3,E8B7,E8B6,B9CF,F0AC,F0AD,C6B0,B0EA,C8BF,CDDF,CECD,EAB1,EAB2,C6BF,B4C9,EAB3,D5E7,DDF9,EAB4,EAB5,EAB6,B8CA,DFB0,C9F5,CCF0,C9FA,C9FB,D3C3,CBA6,B8A6,F0AE,B1C2,E5B8,CCEF,D3C9,BCD7,C9EA,B5E7,C4D0,B5E9,EEAE,BBAD,E7DE,EEAF,B3A9,EEB2,EEB1,BDE7,EEB0,CEB7,C5CF,C1F4,DBCE,EEB3,D0F3,C2D4,C6E8,B7AC,EEB4,B3EB,BBFB,EEB5,E7DC,EEB6,BDAE,F1E2,CAE8,D2C9,F0DA,F0DB,F0DC,C1C6,B8ED,BECE,F0DE,C5B1,F0DD,D1F1,F0E0,B0CC,BDEA,D2DF,F0DF,B4AF,B7E8,F0E6,F0E5,C6A3,F0E1,F0E2,B4C3,F0E3,D5EE,CCDB,BED2,BCB2,F0E8,F0E7,F0E4,B2A1,D6A2,D3B8,BEB7,C8AC,F0EA,D1F7,D6CC,BADB,F0E9,B6BB,CDB4,C6A6,C1A1,F0EB,F0EE,F0ED,F0F0,F0EC,BBBE,F0EF,CCB5,F0F2,B3D5,B1D4,F0F3,F0F4,F0F6,B4E1,F0F1,F0F7,F0FA,F0F8,F0F5,F0FD,F0F9,F0FC,F0FE,F1A1,CEC1,F1A4,F1A3,C1F6,F0FB,CADD,B4F1,B1F1,CCB1,F1A6,F1A7,F1AC,D5CE,F1A9,C8B3,F1A2,F1AB,F1A8,F1A5,F1AA,B0A9,F1AD,F1AF,F1B1,F1B0,F1AE,D1A2,F1B2,F1B3,B9EF,B5C7,B0D7,B0D9,D4ED,B5C4,BDD4,BBCA,F0A7,B8DE,F0A8,B0A8,F0A9,CDEE,F0AA,F0AB,C6A4,D6E5,F1E4,F1E5,C3F3,D3DB,D6D1,C5E8,D3AF,D2E6,EEC1,B0BB,D5B5,D1CE,BCE0,BAD0,BFF8,B8C7,B5C1,C5CC,CAA2,C3CB,EEC2,C4BF,B6A2,EDEC,C3A4,D6B1,CFE0,EDEF,C5CE,B6DC,CAA1,EDED,EDF0,EDF1,C3BC,BFB4,EDEE,EDF4,EDF2,D5E6,C3DF,EDF3,EDF6,D5A3,D1A3,EDF5,C3D0,EDF7,BFF4,BEEC,EDF8,CCF7,D1DB,D7C5,D5F6,EDFC,EDFB,EDF9,EDFA,EDFD,BEA6,CBAF,EEA1,B6BD,EEA2,C4C0,EDFE,BDDE,B2C7,B6C3,EEA5,D8BA,EEA3,EEA6,C3E9,B3F2,EEA7,EEA4,CFB9,EEA8,C2F7,EEA9,EEAA,DEAB,C6B3,C7C6,D6F5,B5C9,CBB2,EEAB,CDAB,EEAC,D5B0,EEAD,F6C4,DBC7,B4A3,C3AC,F1E6,CAB8,D2D3,D6AA,EFF2,BED8,BDC3,EFF3,B6CC,B0AB,CAAF,EDB6,EDB7,CEF9,B7AF,BFF3,EDB8,C2EB,C9B0,EDB9,C6F6,BFB3,EDBC,C5F8,D1D0,D7A9,EDBA,EDBB,D1E2,EDBF,EDC0,EDC4,EDC8,EDC6,EDCE,D5E8,EDC9,EDC7,EDBE,C5E9,C6C6,C9E9,D4D2,EDC1,EDC2,EDC3,EDC5,C0F9,B4A1,B9E8,EDD0,EDD1,EDCA,EDCF,CEF8,CBB6,EDCC,EDCD,CFF5,EDD2,C1F2,D3B2,EDCB,C8B7,BCEF,C5F0,EDD6,B5EF,C2B5,B0AD,CBE9,B1AE,EDD4,CDEB,B5E2,EDD5,EDD3,EDD7,B5FA,EDD8,EDD9,EDDC,B1CC,C5F6,BCEE,EDDA,CCBC,B2EA,EDDB,C4EB,B4C5,B0F5,EDDF,C0DA,B4E8,C5CD,EDDD,BFC4,EDDE,C4A5,EDE0,EDE1,EDE3,C1D7,BBC7,BDB8,EDE2,EDE4,EDE6,EDE5,EDE7,CABE,ECEA,C0F1,C9E7,ECEB,C6EE,ECEC,C6ED,ECED,ECF0,D7E6,ECF3,ECF1,ECEE,ECEF,D7A3,C9F1,CBEE,ECF4,ECF2,CFE9,ECF6,C6B1,BCC0,ECF5,B5BB,BBF6,ECF7,D9F7,BDFB,C2BB,ECF8,ECF9,B8A3,ECFA,ECFB,ECFC,D3ED,D8AE,C0EB,C7DD,BACC,D0E3,CBBD,CDBA,B8D1,B1FC,C7EF,D6D6,BFC6,C3EB,EFF5,C3D8,D7E2,EFF7,B3D3,C7D8,D1ED,D6C8,EFF8,EFF6,BBFD,B3C6,BDD5,D2C6,BBE0,CFA1,EFFC,EFFB,EFF9,B3CC,C9D4,CBB0,EFFE,B0DE,D6C9,EFFD,B3ED,F6D5,CEC8,F0A2,F0A1,B5BE,BCDA,BBFC,B8E5,C4C2,F0A3,CBEB,F0A6,D1A8,BEBF,C7EE,F1B6,F1B7,BFD5,B4A9,F1B8,CDBB,C7D4,D5AD,F1B9,F1BA,C7CF,D2A4,D6CF,F1BB,BDD1,B4B0,BEBD,B4DC,CED1,BFDF,F1BD,BFFA,F1BC,F1BF,F1BE,F1C0,F1C1,C1FE,C1A2,CAFA,D5BE,BEBA,BEB9,D5C2,BFA2,CDAF,F1B5,BDDF,B6CB,D6F1,F3C3,F3C4,B8CD,F3C6,F3C7,B0CA,F3C5,F3C9,CBF1,F3CB,D0A6,B1CA,F3C8,F3CF,B5D1,F3D7,F3D2,F3D4,F3D3,B7FB,B1BF,F3CE,F3CA,B5DA,F3D0,F3D1,F3D5,F3CD,BCE3,C1FD,F3D6,F3DA,F3CC,B5C8,BDEE,F3DC,B7A4,BFF0,D6FE,CDB2,B4F0,B2DF,F3D8,F3D9,C9B8,F3DD,F3DE,F3E1,F3DF,F3E3,F3E2,F3DB,BFEA,B3EF,F3E0,C7A9,BCF2,F3EB,B9BF,F3E4,B2AD,BBFE,CBE3,F3ED,F3E9,B9DC,F3EE,F3E5,F3E6,F3EA,C2E1,F3EC,F3EF,F3E8,BCFD,CFE4,F3F0,F3E7,F3F2,D7AD,C6AA,F3F3,F3F1,C2A8,B8DD,F3F5,F3F4,B4DB,F3F6,F3F7,F3F8,C0BA,C0E9,C5F1,F3FB,F3FA,B4D8,F3FE,F3F9,F3FC,F3FD,F4A1,F4A3,BBC9,F4A2,F4A4,B2BE,F4A6,F4A5,BCAE,C3D7,D9E1,C0E0,F4CC,D7D1,B7DB,F4CE,C1A3,C6C9,B4D6,D5B3,F4D0,F4CF,F4D1,CBDA,F4D2,D4C1,D6E0,B7E0,C1B8,C1BB,F4D3,BEAC,B4E2,F4D4,F4D5,BEAB,F4D6,F4DB,F4D7,F4DA,BAFD,F4D8,F4D9,B8E2,CCC7,F4DC,B2DA,C3D3,D4E3,BFB7,F4DD,C5B4,F4E9,CFB5,CEC9,CBD8,CBF7,BDF4,D7CF,C0DB,D0F5,F4EA,F4EB,F4EC,F7E3,B7B1,F4ED,D7EB,F4EE,E6F9,BEC0,E6FA,BAEC,E6FB,CFCB,E6FC,D4BC,BCB6,E6FD,E6FE,BCCD,C8D2,CEB3,E7A1,B4BF,E7A2,C9B4,B8D9,C4C9,D7DD,C2DA,B7D7,D6BD,CEC6,B7C4,C5A6,E7A3,CFDF,E7A4,E7A5,E7A6,C1B7,D7E9,C9F0,CFB8,D6AF,D6D5,E7A7,B0ED,E7A8,E7A9,C9DC,D2EF,BEAD,E7AA,B0F3,C8DE,BDE1,E7AB,C8C6,E7AC,BBE6,B8F8,D1A4,E7AD,C2E7,BEF8,BDCA,CDB3,E7AE,E7AF,BEEE,D0E5,CBE7,CCD0,BCCC,E7B0,BCA8,D0F7,E7B1,D0F8,E7B2,E7B3,B4C2,E7B4,E7B5,C9FE,CEAC,C3E0,E7B7,B1C1,B3F1,E7B8,E7B9,D7DB,D5C0,E7BA,C2CC,D7BA,E7BB,E7BC,E7BD,BCEA,C3E5,C0C2,E7BE,E7BF,BCA9,E7C0,E7C1,E7B6,B6D0,E7C2,E7C3,E7C4,BBBA,B5DE,C2C6,B1E0,E7C5,D4B5,E7C6,B8BF,E7C8,E7C7,B7EC,E7C9,B2F8,E7CA,E7CB,E7CC,E7CD,E7CE,E7CF,E7D0,D3A7,CBF5,E7D1,E7D2,E7D3,E7D4,C9C9,E7D5,E7D6,E7D7,E7D8,E7D9,BDC9,E7DA,F3BE,B8D7,C8B1,F3BF,F3C0,F3C1,B9DE,CDF8,D8E8,BAB1,C2DE,EEB7,B7A3,EEB9,EEB8,B0D5,EEBB,D5D6,D7EF,D6C3,EEBD,CAF0,EEBC,EEBE,EEC0,EEBF,D1F2,C7BC,C3C0,B8E1,C1E7,F4C6,D0DF,F4C7,CFDB,C8BA,F4C8,F4C9,F4CA,F4CB,D9FA,B8FE,E5F1,D3F0,F4E0,CECC,B3E1,F1B4,D2EE,F4E1,CFE8,F4E2,C7CC,B5D4,B4E4,F4E4,F4E3,F4E5,F4E6,F4E7,BAB2,B0BF,F4E8,B7AD,D2ED,D2AB,C0CF,BFBC,EBA3,D5DF,EAC8,F1F3,B6F8,CBA3,C4CD,F1E7,F1E8,B8FB,F1E9,BAC4,D4C5,B0D2,F1EA,F1EB,F1EC,F1ED,F1EE,F1EF,F1F1,F1F0,C5D5,F1F2,B6FA,F1F4,D2AE,DEC7,CBCA,B3DC,B5A2,B9A2,C4F4,F1F5,F1F6,C1C4,C1FB,D6B0,F1F7,F1F8,C1AA,C6B8,BEDB,F1F9,B4CF,F1FA,EDB2,EDB1,CBE0,D2DE,CBC1,D5D8,C8E2,C0DF,BCA1,EBC1,D0A4,D6E2,B6C7,B8D8,EBC0,B8CE,EBBF,B3A6,B9C9,D6AB,B7F4,B7CA,BCE7,B7BE,EBC6,EBC7,B0B9,BFCF,EBC5,D3FD,EBC8,EBC9,B7CE,EBC2,EBC4,C9F6,D6D7,D5CD,D0B2,EBCF,CEB8,EBD0,B5A8,B1B3,EBD2,CCA5,C5D6,EBD3,EBD1,C5DF,EBCE,CAA4,EBD5,B0FB,BAFA,D8B7,F1E3,EBCA,EBCB,EBCC,EBCD,EBD6,E6C0,EBD9,BFE8,D2C8,EBD7,EBDC,B8EC,EBD8,BDBA,D0D8,B0B7,EBDD,C4DC,D6AC,B4E0,C2F6,BCB9,EBDA,EBDB,D4E0,C6EA,C4D4,EBDF,C5A7,D9F5,B2B1,EBE4,BDC5,EBE2,EBE3,B8AC,CDD1,EBE5,EBE1,C1B3,C6A2,CCF3,EBE6,C0B0,D2B8,EBE7,B8AF,B8AD,EBE8,C7BB,CDF3,EBEA,EBEB,EBED,D0C8,EBF2,EBEE,EBF1,C8F9,D1FC,EBEC,EBE9,B8B9,CFD9,C4E5,EBEF,EBF0,CCDA,CDC8,B0F2,EBF6,EBF5,B2B2,B8E0,EBF7,B1EC,CCC5,C4A4,CFA5,EBF9,ECA2,C5F2,EBFA,C9C5,E2DF,EBFE,CDCE,ECA1,B1DB,D3B7,D2DC,EBFD,EBFB,B3BC,EAB0,D7D4,F4AB,B3F4,D6C1,D6C2,D5E9,BECA,F4A7,D2A8,F4A8,F4A9,F4AA,BECB,D3DF,C9E0,C9E1,F3C2,CAE6,CCF2,E2B6,CBB4,CEE8,D6DB,F4AD,F4AE,F4AF,F4B2,BABD,F4B3,B0E3,F4B0,F4B1,BDA2,B2D5,F4B6,F4B7,B6E6,B2B0,CFCF,F4B4,B4AC,F4B5,F4B8,F4B9,CDA7,F4BA,F4BB,F4BC,CBD2,F4BD,F4BE,F4BF,F4DE,C1BC,BCE8,C9AB,D1DE,E5F5,DCB3,D2D5,DCB4,B0AC,DCB5,BDDA,DCB9,D8C2,DCB7,D3F3,C9D6,DCBA,DCB6,DCBB,C3A2,DCBC,DCC5,DCBD,CEDF,D6A5,DCCF,DCCD,DCD2,BDE6,C2AB,DCB8,DCCB,DCCE,DCBE,B7D2,B0C5,DCC7,D0BE,DCC1,BBA8,B7BC,DCCC,DCC6,DCBF,C7DB,D1BF,DCC0,DCCA,DCD0,CEAD,DCC2,DCC3,DCC8,DCC9,B2D4,DCD1,CBD5,D4B7,DCDB,DCDF,CCA6,DCE6,C3E7,DCDC,BFC1,DCD9,B0FA,B9B6,DCE5,DCD3,DCC4,DCD6,C8F4,BFE0,C9BB,B1BD,D3A2,DCDA,DCD5,C6BB,DCDE,D7C2,C3AF,B7B6,C7D1,C3A9,DCE2,DCD8,DCEB,DCD4,DCDD,BEA5,DCD7,DCE0,DCE3,DCE4,DCF8,DCE1,DDA2,DCE7,BCEB,B4C4,C3A3,B2E7,DCFA,DCF2,DCEF,DCFC,DCEE,D2F0,B2E8,C8D7,C8E3,DCFB,DCED,DCF7,DCF5,BEA3,DCF4,B2DD,DCF3,BCF6,DCE8,BBC4,C0F3,BCD4,DCE9,DCEA,DCF1,DCF6,DCF9,B5B4,C8D9,BBE7,DCFE,DCFD,D3AB,DDA1,DDA3,DDA5,D2F1,DDA4,DDA6,DDA7,D2A9,BAC9,DDA9,DDB6,DDB1,DDB4,DDB0,C6CE,C0F2,C9AF,DCEC,DDAE,DDB7,DCF0,DDAF,DDB8,DDAC,DDB9,DDB3,DDAD,C4AA,DDA8,C0B3,C1AB,DDAA,DDAB,DDB2,BBF1,DDB5,D3A8,DDBA,DDBB,C3A7,DDD2,DDBC,DDD1,B9BD,BED5,BEFA,BACA,DDCA,DDC5,DDBF,B2CB,DDC3,DDCB,B2A4,DDD5,DDBE,C6D0,DDD0,DDD4,C1E2,B7C6,DDCE,DDCF,DDC4,DDBD,DDCD,CCD1,DDC9,DDC2,C3C8,C6BC,CEAE,DDCC,DDC8,DDC1,DDC6,C2DC,D3A9,D3AA,DDD3,CFF4,C8F8,DDE6,DDC7,DDE0,C2E4,DDE1,DDD7,D6F8,DDD9,DDD8,B8F0,DDD6,C6CF,B6AD,DDE2,BAF9,D4E1,DDE7,B4D0,DDDA,BFFB,DDE3,DDDF,DDDD,B5D9,DDDB,DDDC,DDDE,BDAF,DDE4,DDE5,DDF5,C3C9,CBE2,DDF2,D8E1,C6D1,DDF4,D5F4,DDF3,DDF0,DDEC,DDEF,DDE8,D0EE,C8D8,DDEE,DDE9,DDEA,CBF2,DDED,B1CD,C0B6,BCBB,DDF1,DDF7,DDF6,DDEB,C5EE,DDFB,DEA4,DEA3,DDF8,C3EF,C2FB,D5E1,CEB5,DDFD,B2CC,C4E8,CADF,C7BE,DDFA,DDFC,DDFE,DEA2,B0AA,B1CE,DEAC,DEA6,BDB6,C8EF,DEA1,DEA5,DEA9,DEA8,DEA7,DEAD,D4CC,DEB3,DEAA,DEAE,C0D9,B1A1,DEB6,DEB1,DEB2,D1A6,DEB5,DEAF,DEB0,D0BD,DEB4,CAED,DEB9,DEB8,DEB7,DEBB,BDE5,B2D8,C3EA,DEBA,C5BA,DEBC,CCD9,B7AA,D4E5,DEBD,DEBF,C4A2,DEC1,DEBE,DEC0,D5BA,DEC2,F2AE,BBA2,C2B2,C5B0,C2C7,F2AF,D0E9,D3DD,EBBD,B3E6,F2B0,F2B1,CAAD,BAE7,F2B3,F2B5,F2B4,CBE4,CFBA,F2B2,CAB4,D2CF,C2EC,CEC3,F2B8,B0F6,F2B7,F2BE,B2CF,D1C1,F2BA,F2BC,D4E9,F2BB,F2B6,F2BF,F2BD,F2B9,F2C7,F2C4,F2C6,F2CA,F2C2,F2C0,F2C5,D6FB,F2C1,C7F9,C9DF,F2C8,B9C6,B5B0,F2C3,F2C9,F2D0,F2D6,BBD7,F2D5,CDDC,D6EB,F2D2,F2D4,B8F2,F2CB,F2CE,C2F9,D5DD,F2CC,F2CD,F2CF,F2D3,F2D9,D3BC,B6EA,CAF1,B7E4,F2D7,F2D8,F2DA,F2DD,F2DB,F2DC,D1D1,F2D1,CDC9,CECF,D6A9,F2E3,C3DB,F2E0,C0AF,F2EC,F2DE,F2E1,F2E8,F2E2,F2E7,F2E6,F2E9,F2DF,F2E4,F2EA,D3AC,F2E5,B2F5,F2F2,D0AB,F2F5,BBC8,F2F9,F2F0,F2F6,F2F8,F2FA,F2F3,F2F1,BAFB,B5FB,F2EF,F2F7,F2ED,F2EE,F2EB,F3A6,F3A3,F3A2,F2F4,C8DA,F2FB,F3A5,C3F8,F2FD,F3A7,F3A9,F3A4,F2FC,F3AB,F3AA,C2DD,F3AE,F3B0,F3A1,F3B1,F3AC,F3AF,F2FE,F3AD,F3B2,F3B4,F3A8,F3B3,F3B5,D0B7,F3B8,D9F9,F3B9,F3B7,C8E4,F3B6,F3BA,F3BB,B4C0,EEC3,F3BC,F3BD,D1AA,F4AC,D0C6,D0D0,D1DC,CFCE,BDD6,D1C3,BAE2,E1E9,D2C2,F1C2,B2B9,B1ED,F1C3,C9C0,B3C4,D9F2,CBA5,F1C4,D6D4,F1C5,F4C0,F1C6,D4AC,F1C7,B0C0,F4C1,F4C2,B4FC,C5DB,CCBB,D0E4,CDE0,F1C8,D9F3,B1BB,CFAE,B8A4,F1CA,F1CB,B2C3,C1D1,D7B0,F1C9,F1CC,F1CE,D9F6,D2E1,D4A3,F4C3,C8B9,F4C4,F1CD,F1CF,BFE3,F1D0,F1D4,F1D6,F1D1,C9D1,C5E1,C2E3,B9FC,F1D3,F1D5,B9D3,F1DB,BAD6,B0FD,F1D9,F1D8,F1D2,F1DA,F1D7,C8EC,CDCA,F1DD,E5BD,F1DC,F1DE,F1DF,CFE5,F4C5,BDF3,F1E0,F1E1,CEF7,D2AA,F1FB,B8B2,BCFB,B9DB,B9E6,C3D9,CAD3,EAE8,C0C0,BEF5,EAE9,EAEA,EAEB,EAEC,EAED,EAEE,EAEF,BDC7,F5FB,F5FD,F5FE,F5FC,BDE2,F6A1,B4A5,F6A2,F6A3,ECB2,D1D4,D9EA,F6A4,EEBA,D5B2,D3FE,CCDC,CAC4,E5C0,F6A5,BEAF,C6A9,DAA5,BCC6,B6A9,B8BC,C8CF,BCA5,DAA6,DAA7,CCD6,C8C3,DAA8,C6FD,D1B5,D2E9,D1B6,BCC7,BDB2,BBE4,DAA9,DAAA,D1C8,DAAB,D0ED,B6EF,C2DB,CBCF,B7ED,C9E8,B7C3,BEF7,D6A4,DAAC,DAAD,C6C0,D7E7,CAB6,D5A9,CBDF,D5EF,DAAE,D6DF,B4CA,DAB0,DAAF,D2EB,DAB1,DAB2,DAB3,CAD4,DAB4,CAAB,DAB5,DAB6,B3CF,D6EF,DAB7,BBB0,B5AE,DAB8,DAB9,B9EE,D1AF,D2E8,DABA,B8C3,CFEA,B2EF,DABB,DABC,BDEB,CEDC,D3EF,DABD,CEF3,DABE,D3D5,BBE5,DABF,CBB5,CBD0,DAC0,C7EB,D6EE,DAC1,C5B5,B6C1,DAC2,B7CC,BFCE,DAC3,DAC4,CBAD,DAC5,B5F7,DAC6,C1C2,D7BB,DAC7,CCB8,D2EA,C4B1,DAC8,B5FD,BBD1,DAC9,D0B3,DACA,DACB,CEBD,DACC,DACD,DACE,B2F7,DAD1,DACF,D1E8,DAD0,C3D5,DAD2,DAD3,DAD4,DAD5,D0BB,D2A5,B0F9,DAD6,C7AB,DAD7,BDF7,C3A1,DAD8,DAD9,C3FD,CCB7,DADA,DADB,C0BE,C6D7,DADC,DADD,C7B4,DADE,DADF,B9C8,BBED,B6B9,F4F8,F4F9,CDE3,F5B9,EBE0,CFF3,BBBF,BAC0,D4A5,E1D9,F5F4,B1AA,B2F2,F5F5,F5F7,BAD1,F5F6,C3B2,F5F9,F5F8,B1B4,D5EA,B8BA,B9B1,B2C6,D4F0,CFCD,B0DC,D5CB,BBF5,D6CA,B7B7,CCB0,C6B6,B1E1,B9BA,D6FC,B9E1,B7A1,BCFA,EADA,EADB,CCF9,B9F3,EADC,B4FB,C3B3,B7D1,BAD8,EADD,D4F4,EADE,BCD6,BBDF,EADF,C1DE,C2B8,D4DF,D7CA,EAE0,EAE1,EAE4,EAE2,EAE3,C9DE,B8B3,B6C4,EAE5,CAEA,C9CD,B4CD,E2D9,C5E2,EAE6,C0B5,D7B8,EAE7,D7AC,C8FC,D8D3,D8CD,D4DE,D4F9,C9C4,D3AE,B8D3,B3E0,C9E2,F4F6,BAD5,F4F7,D7DF,F4F1,B8B0,D5D4,B8CF,C6F0,B3C3,F4F2,B3AC,D4BD,C7F7,F4F4,F4F3,CCCB,C8A4,F4F5,D7E3,C5BF,F5C0,F5BB,F5C3,F5C2,D6BA,F5C1,D4BE,F5C4,F5CC,B0CF,B5F8,F5C9,F5CA,C5DC,F5C5,F5C6,F5C7,F5CB,BEE0,F5C8,B8FA,F5D0,F5D3,BFE7,B9F2,F5BC,F5CD,C2B7,CCF8,BCF9,F5CE,F5CF,F5D1,B6E5,F5D2,F5D5,F5BD,F5D4,D3BB,B3EC,CCA4,F5D6,F5D7,BEE1,F5D8,CCDF,F5DB,B2C8,D7D9,F5D9,F5DA,F5DC,F5E2,F5E0,F5DF,F5DD,F5E1,F5DE,F5E4,F5E5,CCE3,E5BF,B5B8,F5E3,F5E8,CCA3,F5E6,F5E7,F5BE,B1C4,F5BF,B5C5,B2E4,F5EC,F5E9,B6D7,F5ED,F5EA,F5EB,B4DA,D4EA,F5EE,B3F9,F5EF,F5F1,F5F0,F5F2,F5F3,C9ED,B9AA,C7FB,B6E3,CCC9,EAA6,B3B5,D4FE,B9EC,D0F9,E9ED,D7AA,E9EE,C2D6,C8ED,BAE4,E9EF,E9F0,E9F1,D6E1,E9F2,E9F3,E9F5,E9F4,E9F6,E9F7,C7E1,E9F8,D4D8,E9F9,BDCE,E9FA,E9FB,BDCF,E9FC,B8A8,C1BE,E9FD,B1B2,BBD4,B9F5,E9FE,EAA1,EAA2,EAA3,B7F8,BCAD,CAE4,E0CE,D4AF,CFBD,D5B7,EAA4,D5DE,EAA5,D0C1,B9BC,B4C7,B1D9,C0B1,B1E6,B1E7,B1E8,B3BD,C8E8,E5C1,B1DF,C1C9,B4EF,C7A8,D3D8,C6F9,D1B8,B9FD,C2F5,D3AD,D4CB,BDFC,E5C2,B7B5,E5C3,BBB9,D5E2,BDF8,D4B6,CEA5,C1AC,B3D9,CCF6,E5C6,E5C4,E5C8,E5CA,E5C7,B5CF,C6C8,B5FC,E5C5,CAF6,E5C9,C3D4,B1C5,BCA3,D7B7,CDCB,CBCD,CACA,CCD3,E5CC,E5CB,C4E6,D1A1,D1B7,E5CD,E5D0,CDB8,D6F0,E5CF,B5DD,CDBE,E5D1,B6BA,CDA8,B9E4,CAC5,B3D1,CBD9,D4EC,E5D2,B7EA,E5CE,E5D5,B4FE,E5D6,E5D3,E5D4,D2DD,C2DF,B1C6,D3E2,B6DD,CBEC,E5D7,D3F6,B1E9,B6F4,E5DA,E5D8,E5D9,B5C0,D2C5,E5DC,E5DE,E5DD,C7B2,D2A3,E5DB,D4E2,D5DA,E5E0,D7F1,E5E1,B1DC,D1FB,E5E2,E5E4,E5E3,E5E5,D2D8,B5CB,E7DF,DAF5,DAF8,DAF6,DAF7,DAFA,D0CF,C4C7,B0EE,D0B0,DAF9,D3CA,BAAA,DBA2,C7F1,DAFC,DAFB,C9DB,DAFD,DBA1,D7DE,DAFE,C1DA,DBA5,D3F4,DBA7,DBA4,DBA8,BDBC,C0C9,DBA3,DBA6,D6A3,DBA9,DBAD,DBAE,DBAC,BAC2,BFA4,DBAB,DBAA,D4C7,B2BF,DBAF,B9F9,DBB0,B3BB,B5A6,B6BC,DBB1,B6F5,DBB2,B1C9,DBB4,DBB3,DBB5,DBB7,DBB6,DBB8,DBB9,DBBA,D3CF,F4FA,C7F5,D7C3,C5E4,F4FC,F4FD,F4FB,BEC6,D0EF,B7D3,D4CD,CCAA,F5A2,F5A1,BAA8,F4FE,CBD6,F5A4,C0D2,B3EA,CDAA,F5A5,F5A3,BDB4,F5A8,F5A9,BDCD,C3B8,BFE1,CBE1,F5AA,F5A6,F5A7,C4F0,F5AC,B4BC,D7ED,B4D7,F5AB,F5AE,F5AD,F5AF,D0D1,C3D1,C8A9,F5B0,F5B1,F5B2,F5B3,F5B4,F5B5,F5B7,F5B6,F5B8,B2C9,D3D4,CACD,C0EF,D6D8,D2B0,C1BF,BDF0,B8AA,BCF8,F6C6,F6C7,F6C8,F6C9,F6CA,F6CC,F6CB,F7E9,F6CD,F6CE,EEC4,EEC5,EEC6,D5EB,B6A4,EEC8,EEC7,EEC9,EECA,C7A5,EECB,EECC,B7B0,B5F6,EECD,EECF,EECE,B8C6,EED0,EED1,EED2,B6DB,B3AE,D6D3,C4C6,B1B5,B8D6,EED3,EED4,D4BF,C7D5,BEFB,CED9,B9B3,EED6,EED5,EED8,EED7,C5A5,EED9,EEDA,C7AE,EEDB,C7AF,EEDC,B2A7,EEDD,EEDE,EEDF,EEE0,EEE1,D7EA,EEE2,EEE3,BCD8,EEE4,D3CB,CCFA,B2AC,C1E5,EEE5,C7A6,C3AD,EEE6,EEE7,EEE8,EEE9,EEEA,EEEB,EEEC,EEED,EEEE,EEEF,EEF0,EEF1,EEF2,EEF4,EEF3,EEF5,CDAD,C2C1,EEF6,EEF7,EEF8,D5A1,EEF9,CFB3,EEFA,EEFB,EEFC,EEFD,EFA1,EEFE,EFA2,B8F5,C3FA,EFA3,EFA4,BDC2,D2BF,B2F9,EFA5,EFA6,EFA7,D2F8,EFA8,D6FD,EFA9,C6CC,EFAA,EFAB,C1B4,EFAC,CFFA,CBF8,EFAE,EFAD,B3FA,B9F8,EFAF,EFB0,D0E2,EFB1,EFB2,B7E6,D0BF,EFB3,EFB4,EFB5,C8F1,CCE0,EFB6,EFB7,EFB8,EFB9,EFBA,D5E0,EFBB,B4ED,C3AA,EFBC,EFBD,EFBE,EFBF,CEFD,EFC0,C2E0,B4B8,D7B6,BDF5,CFC7,EFC3,EFC1,EFC2,EFC4,B6A7,BCFC,BEE2,C3CC,EFC5,EFC6,EFC7,EFCF,EFC8,EFC9,EFCA,C7C2,EFF1,B6CD,EFCB,EFCC,EFCD,B6C6,C3BE,EFCE,EFD0,EFD1,EFD2,D5F2,EFD3,C4F7,EFD4,C4F8,EFD5,EFD6,B8E4,B0F7,EFD7,EFD8,EFD9,EFDA,EFDB,EFDC,EFDD,EFDE,BEB5,EFE1,EFDF,EFE0,EFE2,EFE3,C1CD,EFE4,EFE5,EFE6,EFE7,EFE8,EFE9,EFEA,EFEB,EFEC,C0D8,EFED,C1AD,EFEE,EFEF,EFF0,CFE2,B3A4,C3C5,E3C5,C9C1,E3C6,B1D5,CECA,B4B3,C8F2,E3C7,CFD0,E3C8,BCE4,E3C9,E3CA,C3C6,D5A2,C4D6,B9EB,CEC5,E3CB,C3F6,E3CC,B7A7,B8F3,BAD2,E3CD,E3CE,D4C4,E3CF,E3D0,D1CB,E3D1,E3D2,E3D3,E3D4,D1D6,E3D5,B2FB,C0BB,E3D6,C0AB,E3D7,E3D8,E3D9,E3DA,E3DB,B8B7,DAE2,B6D3,DAE4,DAE3,DAE6,C8EE,DAE5,B7C0,D1F4,D2F5,D5F3,BDD7,D7E8,DAE8,DAE7,B0A2,CDD3,DAE9,B8BD,BCCA,C2BD,C2A4,B3C2,DAEA,C2AA,C4B0,BDB5,CFDE,DAEB,C9C2,B1DD,DAEC,B6B8,D4BA,B3FD,DAED,D4C9,CFD5,C5E3,DAEE,DAEF,DAF0,C1EA,CCD5,CFDD,D3E7,C2A1,DAF1,CBE5,DAF2,CBE6,D2FE,B8F4,DAF3,B0AF,CFB6,D5CF,CBED,DAF4,E3C4,C1A5,F6BF,F6C0,F6C1,C4D1,C8B8,D1E3,D0DB,D1C5,BCAF,B9CD,EFF4,B4C6,D3BA,F6C2,B3FB,F6C3,B5F1,F6C5,D3EA,F6A7,D1A9,F6A9,F6A8,C1E3,C0D7,B1A2,CEED,D0E8,F6AB,CFF6,F6AA,D5F0,F6AC,C3B9,BBF4,F6AE,F6AD,C4DE,C1D8,CBAA,CFBC,F6AF,F6B0,F6B1,C2B6,B0D4,C5F9,F6B2,C7E0,F6A6,BEB8,BEB2,B5E5,B7C7,BFBF,C3D2,C3E6,D8CC,B8EF,BDF9,D1A5,B0D0,F7B0,F7B1,D0AC,B0B0,F7B2,F7B3,F7B4,C7CA,BECF,F7B7,F7B6,B1DE,F7B5,F7B8,F7B9,CEA4,C8CD,BAAB,E8B8,E8B9,E8BA,BEC2,D2F4,D4CF,C9D8,D2B3,B6A5,C7EA,F1FC,CFEE,CBB3,D0EB,E7EF,CDE7,B9CB,B6D9,F1FD,B0E4,CBCC,F1FE,D4A4,C2AD,C1EC,C6C4,BEB1,F2A1,BCD5,F2A2,F2A3,F2A4,D2C3,C6B5,CDC7,F2A5,D3B1,BFC5,CCE2,F2A6,F2A7,D1D5,B6EE,F2A8,F2A9,B5DF,F2AA,F2AB,B2FC,F2AC,F2AD,C8A7,B7E7,ECA9,ECAA,ECAB,ECAC,C6AE,ECAD,ECAE,B7C9,CAB3,E2B8,F7CF,F7D0,B2CD,F7D1,F7D3,F7D2,E2BB,BCA2,E2BC,E2BD,E2BE,E2BF,E2C0,E2C1,B7B9,D2FB,BDA4,CACE,B1A5,CBC7,E2C2,B6FC,C8C4,E2C3,BDC8,B1FD,E2C4,B6F6,E2C5,C4D9,E2C6,CFDA,B9DD,E2C7,C0A1,E2C8,B2F6,E2C9,C1F3,E2CA,E2CB,C2F8,E2CC,E2CD,E2CE,CAD7,D8B8,D9E5,CFE3,F0A5,DCB0,C2ED,D4A6,CDD4,D1B1,B3DB,C7FD,B2B5,C2BF,E6E0,CABB,E6E1,E6E2,BED4,E6E3,D7A4,CDD5,E6E5,BCDD,E6E4,E6E6,E6E7,C2EE,BDBE,E6E8,C2E6,BAA7,E6E9,E6EA,B3D2,D1E9,BFA5,E6EB,C6EF,E6EC,E6ED,E6EE,C6AD,E6EF,C9A7,E6F0,E6F1,E6F2,E5B9,E6F3,E6F4,C2E2,E6F5,E6F6,D6E8,E6F7,E6F8,B9C7,F7BB,F7BA,F7BE,F7BC,BAA1,F7BF,F7C0,F7C2,F7C1,F7C4,F7C3,F7C5,F7C6,F7C7,CBE8,B8DF,F7D4,F7D5,F7D6,F7D8,F7DA,F7D7,F7DB,F7D9,D7D7,F7DC,F7DD,F7DE,F7DF,F7E0,DBCB,D8AA,E5F7,B9ED,BFFD,BBEA,F7C9,C6C7,F7C8,F7CA,F7CC,F7CB,F7CD,CEBA,F7CE,C4A7,D3E3,F6CF,C2B3,F6D0,F6D1,F6D2,F6D3,F6D4,F6D6,B1AB,F6D7,F6D8,F6D9,F6DA,F6DB,F6DC,F6DD,F6DE,CFCA,F6DF,F6E0,F6E1,F6E2,F6E3,F6E4,C0F0,F6E5,F6E6,F6E7,F6E8,F6E9,F6EA,F6EB,F6EC,F6ED,F6EE,F6EF,F6F0,F6F1,F6F2,F6F3,F6F4,BEA8,F6F5,F6F6,F6F7,F6F8,C8FA,F6F9,F6FA,F6FB,F6FC,F6FD,F6FE,F7A1,F7A2,F7A3,F7A4,F7A5,F7A6,F7A7,F7A8,B1EE,F7A9,F7AA,F7AB,F7AC,F7AD,C1DB,F7AE,F7AF,C4F1,F0AF,BCA6,F0B0,C3F9,C5B8,D1BB,F0B1,F0B2,F0B3,F0B4,F0B5,D1BC,D1EC,F0B7,F0B6,D4A7,CDD2,F0B8,F0BA,F0B9,F0BB,F0BC,B8EB,F0BD,BAE8,F0BE,F0BF,BEE9,F0C0,B6EC,F0C1,F0C2,F0C3,F0C4,C8B5,F0C5,F0C6,F0C7,C5F4,F0C8,F0C9,F0CA,F7BD,F0CB,F0CC,F0CD,F0CE,F0CF,BAD7,F0D0,F0D1,F0D2,F0D3,F0D4,F0D5,F0D6,F0D8,D3A5,F0D7,F0D9,F5BA,C2B9,F7E4,F7E5,F7E6,F7E7,F7E8,C2B4,F7EA,F7EB,C2F3,F4F0,F4EF,C2E9,F7E1,F7E2,BBC6,D9E4,CAF2,C0E8,F0A4,BADA,C7AD,C4AC,F7EC,F7ED,F7EE,F7F0,F7EF,F7F1,F7F4,F7F3,F7F2,F7F5,F7F6,EDE9,EDEA,EDEB,F6BC,F6BD,F6BE,B6A6,D8BE,B9C4,D8BB,DCB1,CAF3,F7F7,F7F8,F7F9,F7FB,F7FA,B1C7,F7FC,F7FD,F7FE,C6EB,ECB4,B3DD,F6B3,F6B4,C1E4,F6B5,F6B6,F6B7,F6B8,F6B9,F6BA,C8A3,F6BB,C1FA,B9A8,EDE8,B9EA,D9DF,A3A1,A3A2,A3A3,A1E7,A3A5,A3A6,A3A7,A3A8,A3A9,A3AA,A3AB,A3AC,A3AD,A3AE,A3AF,A3B0,A3B1,A3B2,A3B3,A3B4,A3B5,A3B6,A3B7,A3B8,A3B9,A3BA,A3BB,A3BC,A3BD,A3BE,A3BF,A3C0,A3C1,A3C2,A3C3,A3C4,A3C5,A3C6,A3C7,A3C8,A3C9,A3CA,A3CB,A3CC,A3CD,A3CE,A3CF,A3D0,A3D1,A3D2,A3D3,A3D4,A3D5,A3D6,A3D7,A3D8,A3D9,A3DA,A3DB,A3DC,A3DD,A3DE,A3DF,A3E0,A3E1,A3E2,A3E3,A3E4,A3E5,A3E6,A3E7,A3E8,A3E9,A3EA,A3EB,A3EC,A3ED,A3EE,A3EF,A3F0,A3F1,A3F2,A3F3,A3F4,A3F5,A3F6,A3F7,A3F8,A3F9,A3FA,A3FB,A3FC,A3FD,A1AB,A1E9,A1EA,A3FE,A3A4&apos;;
}

function UnicodeToAnsi(chrCode) {
	var chrHex = chrCode.toString(16);
	chrHex = &quot;000&quot; + chrHex.toUpperCase();
	chrHex = chrHex.substr(chrHex.length - 4);
	var i = UnicodeChr().indexOf(chrHex);
	if (i != -1) {
		chrHex = AnsicodeChr().substr(i, 4);
	}
	return parseInt(chrHex, 16);
}

function AnsiToUnicode(chrCode) {
	var chrHex = chrCode.toString(16);
	chrHex = &quot;000&quot; + chrHex.toUpperCase();
	chrHex = chrHex.substr(chrHex.length - 4);
	var i = AnsicodeChr().indexOf(chrHex);
	if (i != -1) {
		chrHex = UnicodeChr().substr(i, 4);
	}
	return parseInt(chrHex, 16)
}

function str2asc(str) {
	var n = UnicodeToAnsi(str.charCodeAt(0));
	var s = n.toString(16);
	return s.toUpperCase();
}

function asc2str(code) {
	var n = AnsiToUnicode(code);
	return String.fromCharCode(n);
}

function urlEncode(str) {
	var ret = &quot;&quot;;
	var strSpecial = &quot;!\&quot;#$%&amp;’()*+,/:;&lt;=&gt;?[]^`{|}~%&quot;;
	var tt = &quot;&quot;;
	for (var i = 0; i &lt; str.length; i++) {
		var chr = str.charAt(i);
		var c = asc2str(chr);
		tt += chr + &quot;:&quot; + c + &quot;n&quot;;
		if (parseInt(&quot;0x&quot; + c) &gt; 0x7f) {
			ret += &quot;%&quot; + c.slice(0, 2) + &quot;%&quot; + c.slice(-2);
		} else {
			if (chr == &quot; &quot;)
				ret += &quot;+&quot;;
			else if (strSpecial.indexOf(chr) != -1)
				ret += &quot;%&quot; + c.toString(16);
			else
				ret += chr;
		}
	}

	return ret;
}

function urlDecode(str) {
	var ret = &quot;&quot;;
	for (var i = 0; i &lt; str.length; i++) {
		var chr = str.charAt(i);
		if (chr == &quot;+&quot;) {
			ret += &quot; &quot;;
		} else if (chr == &quot;%&quot;) {
			var asc = str.substring(i + 1, i + 3);
			if (parseInt(&quot;0x&quot; + asc) &gt; 0x7f) {
				ret += asc2str(parseInt(&quot;0x&quot; + asc + str.substring(i + 4, i + 6)));
				i += 5;
			} else {
				ret += asc2str(parseInt(&quot;0x&quot; + asc));
				i += 2;
			}
		} else {
			ret += chr;
		}
	}

	return ret;
}
```
</content:encoded></item><item><title><![CDATA[原生JS实现AJAX、JSONP及DOM加载完成事件]]></title><description><![CDATA[JS原生Ajax ：一种请求数据的方式，不需要刷新整个页面。 的技术核心是对象。 请求过程：创建对象、连接服务器、发送请求、接收响应数据。 下面简单封装一个函数，之后稍作解释

创建
IE7及其以上版本中支持原生的 XHR 对象，因此可以直接用： var oAjax…]]></description><link>https://wizd.dev/原生JS实现AJAX、JSONP及DOM加载完成事件/</link><guid isPermaLink="false">https://wizd.dev/原生JS实现AJAX、JSONP及DOM加载完成事件/</guid><pubDate>Wed, 07 Jan 2015 18:20:33 GMT</pubDate><content:encoded>## JS原生Ajax
`ajax`：一种请求数据的方式，不需要刷新整个页面。
`ajax`的技术核心是`XMLHttpRequest`对象。
`ajax`请求过程：创建`XMLHttpRequest`对象、连接服务器、发送请求、接收响应数据。
下面简单封装一个函数，之后稍作解释
```javascript
ajax({
url: &quot;./TestXHR.aspx&quot;, //请求地址
type: &quot;POST&quot;, //请求方式
data: { name: &quot;super&quot;, age: 20 }, //请求参数
dataType: &quot;json&quot;,
success: function (response, xml) {
// 此处放成功后执行的代码
},
fail: function (status) {
// 此处放失败后执行的代码
}
});

function ajax(options) {
options = options || {};
options.type = (options.type || &quot;GET&quot;).toUpperCase();
options.dataType = options.dataType || &quot;json&quot;;
var params = formatParams(options.data);

//创建 - 非IE6 - 第一步
if (window.XMLHttpRequest) {
var xhr = new XMLHttpRequest();
} else { //IE6及其以下版本浏览器
var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);
}

//接收 - 第三步
xhr.onreadystatechange = function () {
if (xhr.readyState == 4) {
var status = xhr.status;
if (status &gt;= 200 &amp;&amp; status &lt; 300) {
options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);
} else {
options.fail &amp;&amp; options.fail(status);
}
}
}

//连接 和 发送 - 第二步
if (options.type == &quot;GET&quot;) {
xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);
xhr.send(null);
} else if (options.type == &quot;POST&quot;) {
xhr.open(&quot;POST&quot;, options.url, true);
//设置表单提交时的内容类型
xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);
xhr.send(params);
}
}
//格式化参数
function formatParams(data) {
var arr = [];
for (var name in data) {
arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));
}
arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;));
return arr.join(&quot;&amp;&quot;);
}
```

1. 创建
	* IE7及其以上版本中支持原生的 XHR 对象，因此可以直接用： var oAjax = new XMLHttpRequest();
	* IE6及其之前的版本中，XHR对象是通过MSXML库中的一个ActiveX对象实现的。有的书中细化了IE中此类对象的三种不同版本，即MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MSXML2.XMLHttp.6.0；个人感觉太麻烦，可以直接使用下面的语句创建： var oAjax=new ActiveXObject(’Microsoft.XMLHTTP’);
2. 连接和发送
	* open()函数的三个参数：请求方式、请求地址、是否异步请求(同步请求的情况极少，至今还没用到过)；
	* GET 请求方式是通过URL参数将数据提交到服务器的，POST则是通过将数据作为 send 的参数提交到服务器；
	* POST 请求中，在发送数据之前，要设置表单提交的内容类型；
	* 提交到服务器的参数必须经过 encodeURIComponent() 方法进行编码，实际上在参数列表”key=value”的形式中，key 和 value 都需要进行编码，因为会包含特殊字符。每次请求的时候都会在参数列表中拼入一个 “v=xx” 的字符串，这样是为了拒绝缓存，每次都直接请求到服务器上。
encodeURI() ：用于整个 URI 的编码，不会对本身属于 URI 的特殊字符进行编码，如冒号、正斜杠、问号和井号；其对应的解码函数 decodeURI()；
encodeURIComponent() ：用于对 URI 中的某一部分进行编码，会对它发现的任何非标准字符进行编码；其对应的解码函数 decodeURIComponent()；
3. 接收
	* 接收到响应后，响应的数据会自动填充XHR对象，相关属性如下
responseText：响应返回的主体内容，为字符串类型；
responseXML：如果响应的内容类型是 “text/xml” 或 “application/xml”，这个属性中将保存着相应的xml 数据，是 XML 对应的 document 类型；
status：响应的HTTP状态码；
statusText：HTTP状态的说明；
	* XHR对象的readyState属性表示请求/响应过程的当前活动阶段，这个属性的值如下
0-未初始化，尚未调用open()方法；
1-启动，调用了open()方法，未调用send()方法；
2-发送，已经调用了send()方法，未接收到响应；
3-接收，已经接收到部分响应数据；
4-完成，已经接收到全部响应数据；
只要 readyState 的值变化，就会调用 readystatechange 事件，(其实为了逻辑上通顺，可以把readystatechange放到send之后，因为send时请求服务器，会进行网络通信，需要时间，在send之后指定readystatechange事件处理程序也是可以的，我一般都是这样用，但为了规范和跨浏览器兼容性，还是在open之前进行指定吧)。
	* 在readystatechange事件中，先判断响应是否接收完成，然后判断服务器是否成功处理请求，xhr.status 是状态码，状态码以2开头的都是成功，304表示从缓存中获取，上面的代码在每次请求的时候都加入了随机数，所以不会从缓存中取值，故该状态不需判断。
4. ajax请求是不能跨域的！

## JSONP
JSONP(JSON with Padding) 是一种跨域请求方式。主要原理是利用了`script`标签可以跨域请求的特点，由其`src`属性发送请求到服务器，服务器返回 js 代码，网页端接受响应，然后就直接执行了，这和通过 script 标签引用外部文件的原理是一样的。

JSONP由两部分组成：回调函数和数据，回调函数一般是由网页端控制，作为参数发往服务器端，服务器端把该函数和数据拼成字符串返回。

比如网页端创建一个`script`标签，并给其`src`赋值为`http://www.superfiresun.com/json/?callback=process`，此时网页端就发起一个请求。服务端将要返回的数据拼好最为函数的参数传入，服务端返回的数据格式类似`process({&apos;name&apos;:&apos;superfiresun&apos;})`，网页端接收到了响应值，因为请求者是 `script`，所以相当于直接调用 process 方法，并且传入了一个参数。

单看响应返回的数据，JSONP 比 ajax 方式就多了一个回调函数。
```javascript
function jsonp(options) {
	options = options || {};
	if (!options.url || !options.callback) {
		throw new Error(&quot;参数不合法&quot;);
	}

	//创建 script 标签并加入到页面中
	var callbackName = (&apos;jsonp_&apos; + Math.random()).replace(&quot;.&quot;, &quot;&quot;);
	var oHead = document.getElementsByTagName(&apos;head&apos;)[0];
	options.data[options.callback] = callbackName;
	var params = formatParams(options.data);
	var oS = document.createElement(&apos;script&apos;);
	oHead.appendChild(oS);

	//创建jsonp回调函数
	window[callbackName] = function (json) {
		oHead.removeChild(oS);
		clearTimeout(oS.timer);
		window[callbackName] = null;
		options.success &amp;&amp; options.success(json);
	};

	//发送请求
	oS.src = options.url + &apos;?&apos; + params;

	//超时处理
	if (options.time) {
		oS.timer = setTimeout(function () {
			window[callbackName] = null;
			oHead.removeChild(oS);
			options.fail &amp;&amp; options.fail({ message: &quot;超时&quot; });
		}, time);
	}
};

//格式化参数
function formatParams(data) {
	var arr = [];
	for (var name in data) {
		arr.push(encodeURIComponent(name) + &apos;=&apos; + encodeURIComponent(data[i]));
	}
	return arr.join(&apos;&amp;&apos;);
}
```
1. 因为 script 标签的 src 属性只在第一次设置的时候起作用，导致 script 标签没法重用，所以每次完成操作之后要移除；
2. JSONP这种请求方式中，参数依旧需要编码；
3. 如果不设置超时，就无法得知此次请求是成功还是失败；

## 模仿JQuery中的ready()事件
1. DOMContentLoaded事件，在DOM树加载完成之后立即执行，始终会在load之前执行。
IE9+、FF、Chrome、Safari3.1+和Opera9+都支持该事件。
对于不支持该事件的浏览器，可以使用如下代码：
```javascript
setTimeout(function(){
　　// 代码块
}, 0) ;
```
DOMContentLoaded 事件只能通过 DOM2 级方式添加，即采用addEventListener()/attachEvent() 方式添加才能够使用。事件对象不会提供任何额外信息。
2. readystatechange事件
IE为DOM文档中的某些部分(区别于 XHR 对象的 readystatechange 事件)提供了该事件，这个事件的目的是提供与文档或元素的加载状态有关的信息，但这个事件的行为有时候也很难预料。支持该事件的对象都有一个readyState属性，注意，不是 event 事件对象。IE、Firefox4+和Opera 支持该事件。
readyState属性的值如下：
	`uninitialized` – 未初始化：对象存在但尚未初始化；
	`loading` – 正在加载：对象正在加载数据；
	`loaded` – 加载完毕，对象加载数据完毕；
	`interactive` – 交互：可以操作对象了，但还没有完全加载；
	`complete` – 完成：对象已经加载完成；
	2.1、并非所有的对象都会经历readyState的这几个阶段，如果这个阶段不适用某个对象，则该对象完全可能跳过该阶段，并没有规定哪个阶段适用于哪个对象。这意味着 readystatechange 事件经常会少于4次，相对应的 readyState 属性值也不是连续的。
	2.2、对于 document 而言，interactive 和 complete 阶段会在于 DOMContentLoaded 大致相同的时刻触发 readystatechange 事件；
load 事件和 readystatechange 事件的触发顺序会因页面的外部资源的多少而变化，也就是说，readystatechange 事件并不会一直在 load 事件之前执行。外部资源越多，对 readystatechange 事件就越有利。
interactive 和 complete 的顺序也是不一致的，谁都有可能先执行，引用的外部资源越多，对交互阶段越有利。所以为了尽可能早的执行代码，两个状态要同时判断。
3. doScroll
IE5.5+支持，当页面中有滚动条时，可以用 doScroll(“right”)/doScroll(“down”) 等来移动滚动条，这个方法只有等DOM加载完成以后才能用，所以在IE低版本浏览器中可以通过这个属性判断 DOM 结构是否加载完成。介绍这个属性主要是模仿 jquery 中的解决方案。
```javascript
function ready(readyFn) {
	//非IE浏览器
	if (document.addEventListener) {
		document.addEventListener(&apos;DOMContentLoaded&apos;, function () {
			readyFn &amp;&amp; readyFn();
		}, false);
	} else {
		//方案1和2 哪个快用哪一个
		var bReady = false;
		//方案1
		document.attachEvent(&apos;onreadystatechange&apos;, function () {
			if (bReady) {
				return;
			}
			if (document.readyState == &apos;complete&apos; || document.readyState == &quot;interactive&quot;) {
				bReady = true;
				readyFn &amp;&amp; readyFn();
			};
		});

		//方案2
		//jquery也会担心doScroll会在iframe内失效，此处是判断当前页是否被放在了iframe里
		if (!window.frameElement) {
			setTimeout(checkDoScroll, 1);
		}
		function checkDoScroll() {
			try {
				document.documentElement.doScroll(&quot;left&quot;);
				if (bReady) {
					return;
				}
				bReady = true;
				readyFn &amp;&amp; readyFn();
			}
			catch (e) {
			// 不断检查 doScroll 是否可用 - DOM结构是否加载完成
			setTimeout(checkDoScroll, 1);
			}
		};
	}
};
```

注：
`setTimeout(checkDoScroll, 1);` 目的是让浏览器尽快执行`checkDoScroll`函数，间隔时间设置为 1ms，对当下的浏览器来说是不太可能的。每个浏览器都有自己默认的最小间隔时间，即使时间设置为最小间隔时间，也只是代表隔这些时间过去之后，JavaScript 会把`checkDoScroll`加入到执行队列中，如果此时 JavaScript 进程空闲，则会立即执行该代码。</content:encoded></item><item><title><![CDATA[jQuery中的prop和attr]]></title><description><![CDATA[在JQuery中，对CheckBox的操作分两个阶段，一个是JQuery1.6之前的版本，一个是1.6之后的版本 在1.6之前，我们这么做：

但是细心的同学会发现，在jQuery1.6之后，如果还像上面这么做，那肯定会出问题： 获取到的值并不是和，而是或者

那在1…]]></description><link>https://wizd.dev/jQuery中的prop和attr/</link><guid isPermaLink="false">https://wizd.dev/jQuery中的prop和attr/</guid><pubDate>Thu, 11 Sep 2014 21:16:50 GMT</pubDate><content:encoded>在JQuery中，对CheckBox的操作分两个阶段，一个是JQuery1.6之前的版本，一个是1.6之后的版本

在1.6之前，我们这么做：
```markup
&lt;input type=&apos;checkbox&apos; id=&apos;checkbox&apos;/&gt; 
&lt;script&gt; 
var isChecked = $(&apos;#checkbox&apos;).attr(&apos;checked&apos;); 
$(&apos;#checkbox&apos;).attr(&apos;checked&apos;,true); 
&lt;/script&gt;
```
但是细心的同学会发现，在jQuery1.6之后，如果还像上面这么做，那肯定会出问题： 
`$(&apos;#checkbox&apos;).attr(&apos;checked&apos;);`获取到的值并不是`true`和`false`，而是`checked`或者`undefined`  

那在1.6之后如何进行操作呢?

jQuery在之后的版本中对属性和特性进行了比较细致的区分，什么是特性呢？  
特性就是像 `checked`，`selectedIndex`, `tagName`, `nodeName`, `nodeType`, `ownerDocument`, `defaultChecked`, 和`defaultSelected`等等这些。

那prop()和attr()到底有什么区别呢？

1. 于build-in属性，attribute和property共享数据，attribute更改了会对property造成影响，反之亦然，但是两者的自定义属性是独立的数据，即使name一样，也互不影响，看起来是下面这张图，但是IE6、7没有作区分，依然共享自定义属性数据   
2. 并不是所有的attribute与对应的property名字都一致，比如刚才使用的attribute 的class属性，使用property操作的时候应该是这样className  
	 `t.className=&apos;active2&apos;;`
3. 对于值是true/false的property，类似于input的checked attribute等，attribute取得值是HTML文档字面量值，property是取得计算结果，property改变并不影响attribute字面量，但attribute改变会一向property计算  
	`&lt;input id=&quot;test3&quot; type=&quot;checkbox&quot;/&gt;`

	```javascript
		var t=document.getElementById(&apos;test3&apos;);
        console.log(t.getAttribute(&apos;checked&apos;));//null
        console.log(t.checked);//false;

        t.setAttribute(&apos;checked&apos;,&apos;checked&apos;);
        console.log(t.getAttribute(&apos;checked&apos;));//checked
        console.log(t.checked);//true

        t.checked=false;
        console.log(t.getAttribute(&apos;checked&apos;));//checked
        console.log(t.checked);//false
	```

4. 对于一些和路径相关的属性，两者取得值也不尽相同，但是同样attribute取得是字面量，property取得是计算后的完整路径  
	`&lt;a id=&quot;test4&quot; href=&quot;#&quot;&gt;Click&lt;/a&gt;`
	```javascript
	var t=document.getElementById(&apos;test4&apos;);
    console.log(t.getAttribute(&apos;href&apos;));//#
    console.log(t.href);//file:///C:/Users/bsun/Desktop/ss/anonymous.html#
  ```

|Attribute/Property|.attr()|.prop()|
|--|--|--|
|accesskey|√| |
|align|√| |
|async|√|√|
|autofocus|√|√|
|checked|√|√|
|class|√| |
|contenteditable|√| |
|draggable|√| |
|href|√| |
|id|√| |
|label|√| |
|location ( i.e. window.location )|√|√|
|multiple|√|√|
|readOnly|√|√|
|rel|√| |
|selected|√|√|
|src|√| |
|tabindex|√| |
|title|√| |
|type|√| |
|width ( if needed over .width() )|√| |
</content:encoded></item><item><title><![CDATA[UEFI BIOS下Windows系统的安装]]></title><description><![CDATA[同事昨天入手一个ASUS F450V，预装的Windows8.0，然后硬盘分区只有两个，只有C、D两个盘符，一般人都习惯分好几盘符对日常的应用程序以及文件进行管理，所以他决定重装系统。 我不出意外的接到了这个光荣而艰巨的使命，本以为就跟往常一样，只要插上硬盘，进入PE…]]></description><link>https://wizd.dev/UEFI-BIOS下Windows系统的安装/</link><guid isPermaLink="false">https://wizd.dev/UEFI-BIOS下Windows系统的安装/</guid><pubDate>Wed, 30 Apr 2014 18:02:43 GMT</pubDate><content:encoded>同事昨天入手一个ASUS F450V，预装的Windows8.0，然后硬盘分区只有两个，只有C、D两个盘符，一般人都习惯分好几盘符对日常的应用程序以及文件进行管理，所以他决定重装系统。
我不出意外的接到了这个光荣而艰巨的使命，本以为就跟往常一样，只要插上硬盘，进入PE，然后装完重启就万事OK了。。。
**Too young too naive!!!**
 
## U盘和移动硬盘的启动问题
### 初遇问题
第一个问题是什么呢。装有PE的移动硬盘在启动项内找不到。  

USB3.0的口和USB2.0的口换着插，仍然没有出来。可能是BIOS不识别我的硬盘，那我找个U盘来试试。。。果真，U盘插着奏效了，我能看见在启动项里面的U盘了。按动方向键，选中U盘，回车。。。。黑屏，然后就进原装Win8了。。。  

擦擦擦，这是啥情况，U盘的PE坏了？？？
换台电脑试试，用Acer 4743G试了下，大爷的，秒进PE，那看来不是U盘PE的问题。问题到底出在哪里了？

后来经过不懈的爬贴，我知道了`UEFI`这个东西
### 问题解决
`UEFI`：全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)是一种详细描述类型接口的标准。  

百度百科说的挺详尽的，不过我看了也是一知半解，我们就暂时当他是BIOS的进化产物吧。

U盘和移动硬盘之所以在选择启动项的时候无效是因为BIOS设置里面的 Lunch CSM没开启，这又是个啥？

`CSM`全名`Compatibility Support Module`即兼容性支持模块，是UEFI的一个特殊模块，对于不支持UEFI的系统提供兼容性支持。目前Windows8完全支持UEFI，Windows7的64位不完全支持UEFI。因此`UEFI BIOS`下安装Windows7必须开启`CSM`，多数电脑能自动或手动开启，少数电脑则强制关闭`CSM`。
但是我发现在boot选项卡里，这个东西是灰色的，不能设置的，然后又爬啊爬，终于找到了。

必须禁用`Secure Boot`。只有禁用了这个东西，`Lunch CSM`选项才可操作。把Lunch CSM设置为Enable之后，我的移动硬盘PE终于可以进去了。
### UEFI装系统的问题
进去之后，我给硬盘分区什么的一气呵成，然后唰唰的把系统装进了C盘，就在我满心欢喜，等到电脑重启的那一刻- -，我的心碎了。。。
显示`IMAGE00`
**WTF!!! Are you kidding me???**
好吧，我继续找。。。是什么问题。。。
原来，在用Disk Genius 创建分区的时候，我就应该注意到，他让我创建 ESP分区和MRS分区，我没注意就直接点过去了，而且在分完区之后，没有主分区和逻辑分区之分，我隐隐的感觉到要出错。。。
果不其然，上天总是在你感觉你要出事的时候就让你出事- –
原来UEFI装系统的节奏跟之前我们装系统的节奏完全没在一个调上~~~
重来吧。。。
又是无尽的爬贴，在爬贴之后故事总算终结了。


##总结
***UEFI装系统不同于以往的装系统，应按照以下步骤循序操作。***

1. 在BIOS Security设置中，将ScureBoot设置为Disabeled
2. 在BIOS Boot设置中，将Lunch CSM设置为Enabled
3. 需要一个4G以上的U盘，将其格式化为FAT32格式，并将系统安装包解压到U盘根目录
4. 下载EFI Shell(百度资源挺丰富)，解压到U盘根目录
5. （找不到U盘的看这一步），在系统内分一个4G以上的盘格式化为Fat32，操作跟3，4步相同（这一步可以在原系统内进行，也可在PE中进行）
6. 如果你有PE那就进入PE给电脑硬盘分区， 分区格式应为GPT格式，ESP和MSR分区也不能少
7. 如果你没有PE，就接着往下看
8. 重启电脑，进入BIOS，在SAVE&amp;EXIT中选择 Launch EFI Shell from filesystem device
9. 启动之后会进入EFI Shell，界面类似于DOS
10. 输入 “fs0:” ，然后输入 “dir”，如果看到的文件夹是你刚才解压的文件夹，那分区就对了，如果不是，那就fs1:  fs2: fs3 依次往后找，找到为止
11. 依次输入“cd efi”，“cd boot”，“bootx64.efi”
12. 然后你就会看到正常的windows 8的启动画面，然后就正常安装就好了。
13. 因为之前你没有进行分区，所以到了选择分区那一步的时候停止，按Shift+F10打开命令提示符
14. 你要在这里为你的磁盘进行分区，输入“diskpart”打开diskpart工具
15. 输入“list disk”，显示所有的磁盘
16. 输入“select disk 0”，选择0号磁盘，这个磁盘号自己根据磁盘的大小来区分是不是目标磁盘
17. 输入“clean”，清除磁盘，这个命令会清空磁盘的所有数据（谨慎操作）
18. 输入“convert gpt”，将磁盘转换成gpt分区
19. 输入“listpartition”，列出磁盘上所有的分区，因为刚才进行过GPT格式转换，所以这个应该为空
20. 输入“create partition efi size=200”，建立EFI（ESP）分区，大小为200M
21. 输入“create partition msr size=128”，建立MSR分区，微软默认建立的话，大小是128M
22. 输入“create partition primary size=51200”，建立主分区，大小为50G（这个大小单位为MB，自己根据需求进行调整）
23. 然后可以再次执行20步的内容，根据需求进行其他分区的创建
24. 关闭命令提示符，点击刷新
25. 然后正常的安装步骤一路向西
26. 装完系统之后， 如果你不是用U盘装的，需要用工具把装系统时新建出来的4G的盘给合并到其他盘
27. 最后回BIOS中对设置进行还原，不还原可能会出现 secure boot 未正确配置</content:encoded></item><item><title><![CDATA[C#根据属性名称获取属性值]]></title><description><![CDATA[有的时候我们会遇到这样的问题： 把类的属性名称配置到配置文件中，然后需要通过这个属性名称获取当前实例的该属性的值。这个该怎怎么做呢？
 首先，我们声明一个类，设置两个属性，

然后获取一个Person类的实例

然后通过字符串来获取对象的属性值

Well done…]]></description><link>https://wizd.dev/C-根据属性名称获取属性值/</link><guid isPermaLink="false">https://wizd.dev/C-根据属性名称获取属性值/</guid><pubDate>Fri, 25 Apr 2014 21:16:31 GMT</pubDate><content:encoded>
有的时候我们会遇到这样的问题：  
把类的属性名称配置到配置文件中，然后需要通过这个属性名称获取当前实例的该属性的值。这个该怎怎么做呢？  
首先，我们声明一个`Person`类，设置两个属性`Name`，`Age`
```csharp
public class Person{
    public string Name { get; set; }
    public int Age { get; set; }
}
```
然后获取一个Person类的实例
```csharp
Person person = new Person{Name = &quot;Ryan&quot;, Age = 20};
```
然后通过字符串`&quot;Name&quot;`来获取`person`对象的`Name`属性值
```csharp
 string name = person.GetType().GetProperty(&quot;Name&quot;).GetValue(person, null).ToString();
```
Well done，我们获取到这个属性的值了！
</content:encoded></item><item><title><![CDATA[Ubuntu 14.04 亮度BUG解决方案]]></title><description><![CDATA[从去年9月份，不少Ubuntu 13.10用户遇到了屏幕亮度设置异常问题，无法调节亮度级别，尤其使用英特尔的平台。同样该系统BUG在最新开发的Ubuntu 14.04 (Trusty Tahr)中也继续存在，官方也没有及时修复该问题。 如果你现有的平台基于英特尔…]]></description><link>https://wizd.dev/Ubuntu-14-04-亮度BUG解决方案/</link><guid isPermaLink="false">https://wizd.dev/Ubuntu-14-04-亮度BUG解决方案/</guid><pubDate>Thu, 24 Apr 2014 01:11:47 GMT</pubDate><content:encoded>
从去年9月份，不少Ubuntu 13.10用户遇到了屏幕亮度设置异常问题，无法调节亮度级别，尤其使用英特尔的平台。同样该系统BUG在最新开发的Ubuntu 14.04 (Trusty Tahr)中也继续存在，官方也没有及时修复该问题。  

如果你现有的平台基于英特尔，使用了英特尔芯片组，在Ubuntu 13.10/Ubuntu 14.04系统下，无法更改屏幕亮度级别。  

具体问题如下，打开系统设置，进入“亮度&amp;锁屏”选项，调节亮度级别都无法正常生效。

除了影响英特尔平台外，不少使用英伟达显卡设备的用户也会遇到该系统问题，目前爱好者已经发布临时的解决方案。

## 解决步骤（仅限英特尔平台）

1. 打开终端，输入Sudo安装命令：
```bash
sudo gedit /usr/share/X11/xorg.conf.d/20-intel.conf
```
2. 打开一个参数文件，输入密码，获取root授权
3. 在该文本中输入如下设置参数，重新保存该参数文件，重启当前系统。
```bash
Section “Device”
Identifier “card0”
Driver “intel”
Option “Backlight” “intel_backlight”
BusID “PCI:0:2:0”
EndSection
```
重启，系统设置功能下的“亮度&amp;锁屏”选项可以对屏幕亮度进行控制。
</content:encoded></item><item><title><![CDATA[C#解决WinForm在改变大小时闪烁问题]]></title><description><![CDATA[问题发现 最近写WinForm程序的时候遇见一个问题，就是在拖动窗体改变大小的时候，窗体闪烁会非常严重。

网上找的解决方案都是说用进行处理。

双缓冲

在图形图像处理编程过程中，双缓冲是一种基本的技术，如果窗体在响应OnPaint事件的时候要进行复杂的图形处理…]]></description><link>https://wizd.dev/C-解决WinForm在改变大小时闪烁问题/</link><guid isPermaLink="false">https://wizd.dev/C-解决WinForm在改变大小时闪烁问题/</guid><pubDate>Tue, 01 Apr 2014 14:17:44 GMT</pubDate><content:encoded>
## 问题发现
最近写WinForm程序的时候遇见一个问题，就是在拖动窗体改变大小的时候，窗体闪烁会非常严重。

网上找的解决方案都是说用`双缓冲`进行处理。

## 双缓冲
在图形图像处理编程过程中，双缓冲是一种基本的技术，如果窗体在响应OnPaint事件的时候要进行复杂的图形处理，那么窗体在重绘的时候由于过频的刷新而引起闪烁现象。
使用双缓冲时，更新的图形首先被绘制到内存的缓冲区中，然后，此缓冲区的内容被迅速写入某些或所有显示的图面中。

双缓冲实现过程如下：
1、在内存中创建与画布一致的缓冲区
2、在缓冲区画图
3、将缓冲区位图拷贝到当前画布上
4、释放内存缓冲区

## 没用的方案
下面列出来比较多见的一种做法：
```csharp
this.SetStyle(ControlStyles.OptimizedDoubleBuffer | 　　
                  ControlStyles.ResizeRedraw |
                  ControlStyles.AllPaintingInWmPaint, true);
```
但是这样写之后，状况并没有太大的改善，在拖动窗体大小的时候，闪烁情况依旧非常明显。

## 有用的方案(CreateParams)
使用双缓冲之后并没有什么收获，所以，费劲九牛二虎之力的我找到了`CreateParams`这个东西。

窗体和控件的属性`CreateParams`（这真的是一个属性）很神奇，因为通过它你能够很方便的控制窗体或控件诸如边框、最大化最小化关闭按钮的隐藏、窗体的模式化弹窗模式等的一些特性。

那具体怎么操作呢？

在主窗体的任意位置重写CreateParams，便能大幅改善闪烁的状况，代码如下：
```csharp
protected override CreateParams CreateParams
{
    get
    {
        CreateParams cp = base.CreateParams;
        cp.ExStyle |= 0x02000000;////用双缓冲绘制窗口的所有子控件
        return cp;
    }
}
```

</content:encoded></item><item><title><![CDATA[ASP.NET MVC给母版页传递数据]]></title><description><![CDATA[在MVC中，我们会遇到这样的场景： 每一页中需要都显示地区信息，这些地区信息都是存储在数据库当中的。
 为了方便使用，我们将地区信息在模板页中显示，问题来了，怎么在视图母版页面里从数据库检索这些地区信息？

直接在视图中操作数据库检索数据？

这样的确很方便…]]></description><link>https://wizd.dev/ASP-NET-MVC给母版页传递数据/</link><guid isPermaLink="false">https://wizd.dev/ASP-NET-MVC给母版页传递数据/</guid><pubDate>Mon, 31 Mar 2014 14:38:42 GMT</pubDate><content:encoded>&gt;在MVC中，我们会遇到这样的场景：  
每一页中需要都显示地区信息，这些地区信息都是存储在数据库当中的。  
为了方便使用，我们将地区信息在模板页中显示，问题来了，怎么在视图母版页面里从数据库检索这些地区信息？

## 直接在视图中操作数据库检索数据？

这样的确很方便，但是这样就违反了MVC的设计初衷，`Model-View-Controller`，就是为了将关注点进行分离，当然这也是`MVC`的优点之一。

在MVC中，所有的Model的传递和交换都应该由`Controller`来进行，这样做会加强系统的可维护性以及可扩展性。也就是说所有传往视图的数据都应该由控制器来控制。

那这么说来，我们应该如何将数据传递到母版页视图（_Layout.cshtml）呢？

## 方法一：
我们可以在控制器内的每个方法中，为母版页传递数据！
也就是说在控制器的没个方法中给ViewData进行赋值。这么做确实能实现，但是每个方法内都要写这么一段代码。
问题在于：DRY！
**Don’t Repeat Yourself！**
每一个方法内都加一段读取数据的代码会提高程序的复杂度，造成后续的维护困难，那我们应该怎么做呢，别着急，往下看！
## 方法二：
既然不能这么重复的写代码，那我们就换个思路。
因为我们只需要对母版页视图传递一次数据就好了。
那我们就将从数据库中读取数据的操作放在控制器的构造方法中，这样就避免了要在每个方法中都加上相同的代码。
但是这样之后，细心的同学又会发现，那岂不是我每个控制器的构造方法中都需要加上这么一段代码，还是违反了DRY。
没错，那么这里我们就要用到面向对象的特性：封装、继承、多态中的继承。
我们可以定义一个抽象类`BaseController`，让`BaseController`继承于`System.Web.Mvc.Controller`。
然后在`BaseController`的构造方法中，我们对`ViewData`进行赋值。
在项目中其他的控制器里，我们让控制器继承于`BaseController`，那么我们的问题就解决了。
有人可能会问，为什么要用抽象类呢？
因为，我们这个类需要做的工作只是为母版页加载数据，并没有相对应的其他操作。设置为抽象类可以防止其他类直接调用该类中的方法。
到这里，我们需要给母版页传值的问题已经解决了。
</content:encoded></item><item><title><![CDATA[WordPress插件安装时Missing archive file]]></title><description><![CDATA[打开wordpress根目录下的wp-config.php文件 找到如下： 在下面增加如下代码即可：

最后再wp-content文件夹下新建个temp文件夹，更新。]]></description><link>https://wizd.dev/WordPress插件安装时Missing-archive-file/</link><guid isPermaLink="false">https://wizd.dev/WordPress插件安装时Missing-archive-file/</guid><pubDate>Fri, 21 Mar 2014 19:59:55 GMT</pubDate><content:encoded>
打开wordpress根目录下的wp-config.php文件
找到如下：

```php
/** WordPress 目录的绝对路径。 */
if ( !defined(‘ABSPATH’) )
define(‘ABSPATH’, dirname(__FILE__) . ‘/’);
```
在下面增加如下代码即可：
```php
/** 指定WordPress的临时目录 */
define(‘WP_TEMP_DIR’, ABSPATH . ‘wp-content/temp’);
```
最后再wp-content文件夹下新建个temp文件夹，更新。</content:encoded></item><item><title><![CDATA[家庭布网实录]]></title><description><![CDATA[一般家庭用网需求都会比较简单，只要能够有 IPTV 看，有能上网的 WIFI 可连足矣。而对于吾等乐于折腾之人，则会有一些额外的需求产生，如翻墙、NAS、尽可能高的带宽以及尽可能低的延迟等等。 首先对家里的基础设施做一个简单介绍，没有特别奢侈，所以用的是电信的 500M 宽带 +…]]></description><link>https://wizd.dev/家庭布网实录/</link><guid isPermaLink="false">https://wizd.dev/家庭布网实录/</guid><pubDate>Mon, 29 Nov 2021 14:45:12 GMT</pubDate><content:encoded>
一般家庭用网需求都会比较简单，只要能够有 IPTV 看，有能上网的 WIFI 可连足矣。而对于吾等乐于折腾之人，则会有一些额外的需求产生，如翻墙、NAS、尽可能高的带宽以及尽可能低的延迟等等。

首先对家里的基础设施做一个简单介绍，没有特别奢侈，所以用的是电信的 500M 宽带 + IPTV，光纤入户，一共三个小房间加一个客厅，没个房间都预埋有一根六类线。家里需要接入有线网络的设备有2台 PC，一个电视盒子，一台电视机，一个无线路由器。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-43-49-7732caeed4034d97eaf5ac57f75b6911-WeCom20211129-1519462x-bde290.png)

## 存在的问题

第一个问题，开发商当时设计的弱电箱特别小，导致弱电箱内装一个光猫之后，再想放进其他设备（软路由）十分困难，就算勉强塞进去，也会有散热和其他方面的问题。

第二个问题，电信提供的光猫 IPTV 独享一个网口，这也就意味着客厅的电视盒子必然会用掉预埋到客厅的那唯一一根网线，而客厅又是家里放置 WIFI 路由器的绝佳位置，预埋线究竟是给电视用？还是给 WIFI 用？这就产生了冲突。

## 思考过程

第一个问题，可以把软路由放在其他小房间里，但是由于每个房间只有一根预埋线，那么软路由就只能当做旁路由来使用，可是我买的软路由是一个 6 口千兆的... 只用一个口做个旁路由，放弃多拨等功能，这样是不是太浪费资源了。

第二个问题，WIFI 可以退而求其次，放在主卧里面，但总感觉心里别扭。

我甚至有想过用隐形光纤，自己冷接，把光猫直接移机到客厅，这样所有问题能简单快速的解决。但是作为轻度强迫症患者，虽然是隐形光纤，但是要我走明线，不得劲儿。

## 敲定最终解决方案

在经历长时间思考，终于在自己脑海中为数不多的技能里，我想到一个 VLAN 技术。我可以通过给家里加两台网管交换机，解决上述问题。

在 VLAN 技术中，有个协议叫做 802.1Q。 802.1Q 中 Trunk 口可以允许我们在多台交换机中组建虚拟局域网。也就是说，我们可以在弱电箱内增加一个交换机（交换机很薄，可以放进去），然后再客厅加一个交换机，通过 802.1Q，在这两台交换机中组成 VLAN，对 IPTV 和 INTERNET 做隔离，共享同一根网线。

为此我买了两台 TPLINK 的 8 口网管交换机，做了如下的 VLAN 设计。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-44-30-ada10129d284866ddd96f195806f2b21-Untitled-df3d4e.png)

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-44-20-c145ec960661cbb6700709b0582454de-Untitled1-e6e14a.png)

两台交换机的 1 号端口，划分到同一 VLAN 中，PVID 配置为 2，供 IPTV 使用； 2 号端口，划分到同一 VLAN 中，PVID 配置为 4， 供软路由的 WAN 口使用； 8 号端口作为 trunk 口，PVID 配置为 1，供两台交换机连接使用；其余各口划分到同一 VLAN 中，PVID 配置为 6，供家里各种终端设备接入 LAN 使用。这样通过 VLAN 共用同一根预埋线，就实现了 IPTV 与 INTERNET 的相互隔离。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-44-03-1700b5a1c72964d4fdc258d61cde3a9a-Untitled2-33d9d6.png)

网络这样部署之后，将光猫设置为桥接模式，软路由的 WAN 口与光猫链接，软路由负责拨号，然后通过交换机的 3 - 7 口将 LAN 共享给家里各个终端设备（软路由的 LAN 口随便插到交换机 3-7 某个口，其余房间的网线接到弱电箱内交换机的 3-7 口）。

做水晶头做的手痛。。。我去哭了，拜拜。
</content:encoded></item><item><title><![CDATA[定时任务 cron 使用说明]]></title><description><![CDATA[Cron 简介  是类 Unix 系统中用于执行定时任务的工具，我们可以通过  在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。 最常使用的是服务器运维和管理方向，当然也可用于其他地方，如：定期下载文件等。

The origin of the name cron…]]></description><link>https://wizd.dev/定时任务CRON使用说明/</link><guid isPermaLink="false">https://wizd.dev/定时任务CRON使用说明/</guid><pubDate>Thu, 29 Apr 2021 11:45:12 GMT</pubDate><content:encoded>
![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-45-00-28024130c0135066048c989955be90e4-cover-cron-fb63c9.png)

## Cron 简介

`Cron` 是类 Unix 系统中用于执行定时任务的工具，我们可以通过 `cron` 在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。`cron` 最常使用的是服务器运维和管理方向，当然也可用于其他地方，如：定期下载文件等。

&gt; The origin of the name *cron* is from the Greek word for time, χρόνος ([chronos](https://en.wikipedia.org/wiki/Chronos)).
&gt;
&gt; Cron 的名字来历是古希腊神话中代表时间的神 Chronos

## Cron 使用

`crond` 可以理解为是用来执行定时任务的服务，而 `crontab` 则是用来管理定时任务的。

要使用 `Cron` 我们首先得确保自己系统的 `crond` 守护进程在运行，如果没有，则执行运行命令（什么？你没安装，[点这儿](https://google.com))

```bash
# 查看 crond 状态
systemctl status  crond.service
# 启动 crond
systemctl start  crond.service
```

`Cron` 任务的管理工具 `crontab` ，使用格外简单：

```bash
# crontab [选项]

#查看当前用户的 crontab，输入
crontab –l 
# 编辑 crontab
crontab –e 
# 删除 crontab
crontab –r  
```



我们直接 `crontab -e` 编辑当前用户的定时任务，这里需要用到 `Cron` 的语法（先直接用后面会讲具体用法）

```bash
# 当你执行了 crontab -e 之后，会自动调用VI编辑器打开一个空文件用作输入
# 我们直接输入下面这一行内容，然后:wq 保存退出即可

* * * * * echo `date` &gt;&gt; ~/hello.txt
```

保存成功后，使用 `crontab -l`，你会发现你的定时任务中已经多了一条，这条任务的作用就是每分钟向 `~/hello.txt`  中写入当前系统时间。

```bash
$crontab -l
* * * * * echo `date` &gt;&gt; ~/hello.txt
```

静待一会儿，去查看`~/hello.txt` 你会发现已经有内容了，就意味着我们的定时任务ok啦。

```bash
$cat hello.txt
Thu Apr 29 11:07:01 CST 2021
Thu Apr 29 11:08:01 CST 2021
Thu Apr 29 11:09:01 CST 2021
Thu Apr 29 11:10:01 CST 2021
Thu Apr 29 11:11:01 CST 2021
```

如果你不想要这个定时任务了，直接执行 `crontab -r` 即可，这里如果你只有一个任务，那就直接删掉了。如果你有多个任务，他会自动打开 vi，你只需要删掉不想要的那一行，保存退出即可。



## Cron 语法

```bash
┌──分钟（0 - 59）
│ ┌──小时（0 - 23）
│ │ ┌──日（1 - 31）
│ │ │ ┌─月（1 - 12）
│ │ │ │ ┌─星期（0 - 6，表示从周日到周六）
│ │ │ │ │
*  *  *  *  * &lt;被执行的命令&gt;
```

每部分的取值可以有如下表示方式：

- 逗号（**`,`**）表示列举，例如： **`1,3,4,7 * * * * echo hello world`** 表示，在每小时的1、3、4、7分时，打印&quot;hello world&quot;。
- 中划线（**`-`**）表示范围，例如：**`1-6 * * * * echo hello world`** ，表示，每小时的1到6分钟内，每分钟都会打印&quot;hello world&quot;。
- 星号（**`*`**）代表任何可能的值。例如：在“小时”里的星号等于是“每一个小时”。
- 百分号(**`%`**) 表示“每&quot;。例如：**`*%10 * * * * echo hello world`** 表示，每10分钟打印一回&quot;hello world&quot;。



## Cron 注意事项(这部分不是特别关键)

### 执行权限问题

- **/etc/cron.allow** 如果这个文件存在，那么只有被添加到这个文件中的用户才能使用 cron
- **/etc/cron.deny** 如果 **/etc/cron.allow** 不存在，但是这个文件存在，那么用户不在这个文件里才能使用cron

### 定时任务查找位置

* `/etc/crontab`：为系统任务时间表（crontab）。以前用于跑以日为单位、以周为单位、以月为单位的任务，现在用于跑 `anacron`。
* `/etc/cron.d/`：该目录包含系统层次的任务时间表（crontabs），不同用户共同使用。
* `/var/spool/cron/`：该路径包含用户通过 `crontab` 命令创建的任务时间表（crontables），这个不要手动去改哦，要改就通过 `crontab` 命令改。





## 总结

`Cron` 可以非常方便的帮我们在 Linux 系统中执行定时任务，还有很多其他有周期任务需求的系统中也都支持 `Cron` 语法，比如我前面写过的[[GithubActions入门]]，如果你想定时执行你的 Github Action 就可以使用 `Cron`。</content:encoded></item><item><title><![CDATA[树莓派刷OpenWrt-获取固件]]></title><description><![CDATA[OpenWrt 概述 这东西到底能干啥？我为什么要费这么大劲刷这个玩意儿？

大白话，这东西是一个路由器固件（可以理解为操作系统），可以给你提供一个可定制化的路由器，你可以做DDNS、NAS、DLNA、FTP、Aria2、Global Ladder(这个看不懂就对了，哈哈…]]></description><link>https://wizd.dev/斐讯K2刷OpenWrt+树莓派刷OpenWrt-01/</link><guid isPermaLink="false">https://wizd.dev/斐讯K2刷OpenWrt+树莓派刷OpenWrt-01/</guid><pubDate>Tue, 17 Mar 2020 12:23:12 GMT</pubDate><content:encoded>
## OpenWrt 概述

这东西到底能干啥？我为什么要费这么大劲刷这个玩意儿？

大白话，这东西是一个路由器固件（可以理解为操作系统），可以给你提供一个可定制化的路由器，你可以做DDNS、NAS、DLNA、FTP、Aria2、Global Ladder(这个看不懂就对了，哈哈) 等等等等。

有了这个东西你的路由器就能有超能力了！！！

## 设备要求

你的设备得能够支持刷固件，很多厂商造的路由器都不支持刷固件的。

我这边用的是当时被割韭菜（其实没啥体会，感觉就是免费拿路由，到底是不是被割韭菜了咱也不敢说，咱也不敢问）买的斐讯K2，还有树莓派3B，这俩都能用来玩OpenWrt。当然市场上还有很多可以玩的，好像斐讯全系都能玩，还有什么N1盒子。

## 准备工作

看到这里，我就默认你已经准备好设备了（K2或者Pi，当然其他设备也可以看，不过能不能让你找到灵感我就不知道了)。

接下来，我们需要的就是找到设备对应的固件。

哪里来呢？你有两种途径可以获取：

1. 找现成的别人编译好的固件，互联网资源这么丰富，直接去搜就完事儿了
2. 自己编译（Oh my god, 他居然让我自己编译？？编译是啥？？？ 别慌，往下看）

### 找别人编译好的

官方提供的我是不愿意用的，虽然功能也很丰富，但是我要的东西（Global Ladder）它没有，你们懂的。

gayhub上的可以找到很多别人自己进行过修改后编译的固件，这个太赞了。

* [官方网址](https://openwrt.org/toh/views/toh_fwdownload) 这里面有所有支持的设备列表
* [github](https://github.com) 搜索（设备名 OpenWrt)

### 自己编译

上面说的让大家去找别人编译好的固件，其实你能找到的固件，基本上都是从[Lean&apos;s OpenWrt source](https://github.com/coolsnowwolf/lede)出来的（不对这句话负责哦）, 有兴趣的同学可以去看一下。

那我们怎么编译呢？你有两个选择：

1. 自己部署编译环境（Ubuntu、g++、automake blablabla....)
2. 利用神器!!! **GitHub Action** (btw 我太爱这个了)

这里给大家提供两个项目地址, 都是用github Action来进行编译的：
[K2的固件 https://github.com/a-gg/openwrt-wt3200-firmware](https://github.com/a-gg/openwrt-wt3200-firmware)
[树莓派的固件 https://github.com/a-gg/Action-OpenWrt-Rpi](https://github.com/a-gg/Action-OpenWrt-Rpi)

## 开始编译

要怎么进行编译呢？

### 下载项目

fork 上面的 github 项目，并把项目 clone 到本地(git的使用自行学习，这里不讲了)

首先跟大家介绍一下项目的目录结构和文件组成。

|路径|说明|
|--|--|
|.github/workflows/xxx.yaml|这个是用来配置 github 的 workflow 的，也就是利用 Github Action 进行编译的关键，不要乱改，除非你知道你在做什么|
|xxxx.config|这个是我们要编译的 OpenWrt 固件的配置文件，你需要在固件中加入什么东西删除什么东西，基本上都是在这里配置的|
|xxx.sh|一般都是用来做固件的配置修改的，比如把路由管理地址修改为192.168.5.1, 再比如帮路由webUI更换主题等等|

[https://github.com/a-gg/Action-OpenWrt-Rpi](https://github.com/a-gg/Action-OpenWrt-Rpi)这个项目由于树莓派设备系列都可以用，所以配置文件就比较多，存在一个 `template` 目录，你需要使用哪个设备，就直接把 `template` 中的 `.config` 文件放在项目根目录，`.workflow` 文件拿出来放到`.github/workflows/`这个目录里

### 修改配置

按照自己的需要进行 config 文件的修改。这里面其实最主要的配置内容，就是要你要给你的 OpenWrt 增加或者删除哪些个功能
配置项主要是&apos;luci-app-xxxx&apos;这样的。

比如我要给自己的 OpenWrt 增加 ShadowsockR Plus+ 这个插件，那就找到文件对应的配置项，默认的应该是这样的

```yaml
# CONFIG_PACKAGE_luci-app-ssr-plus is not set
```

我们将其修改为下面这样，就能开启ssr plus客户端了

```yaml
CONFIG_PACKAGE_luci-app-ssr-plus=y
```

再比如我要开启 ShadowsockR Plus+ 的 Trojan协议，就找到如下的配置项, 注意这两行不是在一起的，逐行去搜索。

```yaml
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan is not set
# CONFIG_PACKAGE_trojan is not set
```

修改为

```yaml
CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
CONFIG_PACKAGE_trojan=y
```

### push 代码

将修改后的代码，push 到 github，会自动出发 github action 的编译工作。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-43-00-8841460d4fa6eb07ece4ce1bf737b46f-01-4473b6.png)

### 下载固件

等待编译完成之后就可以在 Github Action 里面下载编译好的固件了，这里要提醒一下，不要用下载工具下载，因为下载链接有权限校验，下载工具下载不下来。

![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-43-24-cf8198ac0dc928863a8c2a8b6bf824fd-02-9e7d75.png)

&lt;font color=&quot;red&quot;&gt;到这里我们就已经获取到要用的固件了，下一篇我会告诉大家如何进行固件安装，敬请期待&lt;/font&gt;
</content:encoded></item></channel></rss>