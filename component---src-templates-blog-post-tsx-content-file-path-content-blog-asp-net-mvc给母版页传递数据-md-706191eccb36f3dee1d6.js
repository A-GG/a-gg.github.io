"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[8612],{7490:function(e,t,a){a.r(t),a.d(t,{default:function(){return p}});var n=a(8453),l=a(6540);function r(e){const t=Object.assign({blockquote:"blockquote",p:"p",br:"br",h2:"h2",a:"a",span:"span",strong:"strong"},(0,n.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.blockquote,null,"\n",l.createElement(t.p,null,"在MVC中，我们会遇到这样的场景：",l.createElement(t.br),"\n","每一页中需要都显示地区信息，这些地区信息都是存储在数据库当中的。",l.createElement(t.br),"\n","为了方便使用，我们将地区信息在模板页中显示，问题来了，怎么在视图母版页面里从数据库检索这些地区信息？"),"\n"),"\n",l.createElement(t.h2,{id:"直接在视图中操作数据库检索数据",style:{position:"relative"}},l.createElement(t.a,{href:"#%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%A7%86%E5%9B%BE%E4%B8%AD%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE","aria-label":"直接在视图中操作数据库检索数据 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"直接在视图中操作数据库检索数据？"),"\n",l.createElement(t.p,null,"这样的确很方便，但是这样就违反了MVC的设计初衷，",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Model-View-Controller</code>'}}),"，就是为了将关注点进行分离，当然这也是",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MVC</code>'}}),"的优点之一。"),"\n",l.createElement(t.p,null,"在MVC中，所有的Model的传递和交换都应该由",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Controller</code>'}}),"来进行，这样做会加强系统的可维护性以及可扩展性。也就是说所有传往视图的数据都应该由控制器来控制。"),"\n",l.createElement(t.p,null,"那这么说来，我们应该如何将数据传递到母版页视图（_Layout.cshtml）呢？"),"\n",l.createElement(t.h2,{id:"方法一",style:{position:"relative"}},l.createElement(t.a,{href:"#%E6%96%B9%E6%B3%95%E4%B8%80","aria-label":"方法一 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"方法一："),"\n",l.createElement(t.p,null,"我们可以在控制器内的每个方法中，为母版页传递数据！\n也就是说在控制器的没个方法中给ViewData进行赋值。这么做确实能实现，但是每个方法内都要写这么一段代码。\n问题在于：DRY！\n",l.createElement(t.strong,null,"Don’t Repeat Yourself！"),"\n每一个方法内都加一段读取数据的代码会提高程序的复杂度，造成后续的维护困难，那我们应该怎么做呢，别着急，往下看！"),"\n",l.createElement(t.h2,{id:"方法二",style:{position:"relative"}},l.createElement(t.a,{href:"#%E6%96%B9%E6%B3%95%E4%BA%8C","aria-label":"方法二 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"方法二："),"\n",l.createElement(t.p,null,"既然不能这么重复的写代码，那我们就换个思路。\n因为我们只需要对母版页视图传递一次数据就好了。\n那我们就将从数据库中读取数据的操作放在控制器的构造方法中，这样就避免了要在每个方法中都加上相同的代码。\n但是这样之后，细心的同学又会发现，那岂不是我每个控制器的构造方法中都需要加上这么一段代码，还是违反了DRY。\n没错，那么这里我们就要用到面向对象的特性：封装、继承、多态中的继承。\n我们可以定义一个抽象类",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BaseController</code>'}}),"，让",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BaseController</code>'}}),"继承于",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">System.Web.Mvc.Controller</code>'}}),"。\n然后在",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BaseController</code>'}}),"的构造方法中，我们对",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ViewData</code>'}}),"进行赋值。\n在项目中其他的控制器里，我们让控制器继承于",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BaseController</code>'}}),"，那么我们的问题就解决了。\n有人可能会问，为什么要用抽象类呢？\n因为，我们这个类需要做的工作只是为母版页加载数据，并没有相对应的其他操作。设置为抽象类可以防止其他类直接调用该类中的方法。\n到这里，我们需要给母版页传值的问题已经解决了。"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.RP)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},s=a(1468),o=a(7947),m=a(1327),i=a(2171),E=a(9739);const d=e=>{let{data:t,pageContext:a,children:r}=e;const c=t.mdx,{title:d,postCopyright:p,author:h,siteUrl:u}=t.site.siteMetadata,{previous:g,next:f}=a,v=(0,s.d4)((e=>e.isDarkMode));return(0,l.useEffect)((()=>{(0,E.A)(".post-content img",{background:"#292a2d"})}),[]),l.createElement(o.A,{isFocus:!1,title:c.frontmatter.title,description:c.frontmatter.description},l.createElement("div",{className:"container"},l.createElement("article",{className:"post-wrap"},l.createElement("header",{className:"post-header"},l.createElement("h1",{className:"post-title"},c.frontmatter.title),l.createElement("div",{className:"post-meta"},t.site.siteMetadata.author.name,"  /  ",l.createElement("span",{className:"post-time"},c.frontmatter.date)," ")),l.createElement("div",{className:"post-content"},l.createElement(n.xA,null,r)),p&&l.createElement("section",{className:"post-copyright"},l.createElement("p",{className:"copyright-item"},l.createElement("span",null,"Author: "),l.createElement("span",null,h.name)),l.createElement("p",{className:"copyright-item"},l.createElement("span",null,"Permalink:"),l.createElement("span",null,l.createElement("a",{href:u+c.fields.slug}," ",u+c.fields.slug," "))),l.createElement("p",{className:"copyright-item"},l.createElement("span",null,"License: "),l.createElement("span",null,l.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),l.createElement("section",{className:"post-tags"},l.createElement("div",null,l.createElement("span",null,"Tag(s):"),l.createElement("span",{className:"tag"},0!==c.frontmatter.tags.length&&c.frontmatter.tags.map((e=>l.createElement("a",{key:e,href:`/tag/${e}`},"#",e))))),l.createElement("div",null,l.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),l.createElement("span",null," · "),l.createElement("a",{href:t.site.siteMetadata.siteUrl},"home"))),l.createElement("section",{className:"post-nav"},g?l.createElement("a",{className:"prev",rel:"prev",href:g.fields.slug},g.frontmatter.title):l.createElement("span",{className:"prev"},"No More"),f?l.createElement("a",{className:"next",rel:"next",href:f.fields.slug},f.frontmatter.title):l.createElement("span",{className:"next"},"No More")),l.createElement(i.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${v?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),c.frontmatter.toc&&l.createElement(m.A,null))))};function p(e){return l.createElement(d,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-asp-net-mvc给母版页传递数据-md-706191eccb36f3dee1d6.js.map