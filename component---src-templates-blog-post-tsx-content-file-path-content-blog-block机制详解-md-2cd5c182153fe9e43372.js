"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[7532],{1515:function(n,a,s){s.r(a),s.d(a,{default:function(){return _}});var e=s(8453),t=s(6540);function o(n){const a=Object.assign({h2:"h2",a:"a",span:"span",p:"p",strong:"strong"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h2,{id:"block机制详解",style:{position:"relative"}},t.createElement(a.a,{href:"#block%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3","aria-label":"block机制详解 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Block机制详解"),"\n",t.createElement(a.p,null,"我们知道在",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Block</code>'}}),"使用中，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Block</code>'}}),"内部能够读取外部局部变量的值。但我们需要改变这个变量的值时，我们需要给它附加上",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"修饰符。"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"另外一个比较多的使用场景是，为了避免某些情况下Block循环引用的问题，我们也可以给相应对象加上",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"修饰符。"),"\n",t.createElement(a.p,null,"为什么不使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"就不能在",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Block</code>'}}),"内部修改外部的局部变量？"),"\n",t.createElement(a.p,null,"我们把以下代码通过 clang -rewrite-objc 源代码文件名重写："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>\n      <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n      <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>\n        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"%d"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"可得到如下代码："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">struct</span> __Block_byref_val_0 <span class="token punctuation">{</span>\n   <span class="token keyword">void</span> <span class="token operator">*</span>__isa<span class="token punctuation">;</span>\n   __Block_byref_val_0 <span class="token operator">*</span>__forwarding<span class="token punctuation">;</span>\n   <span class="token keyword">int</span> __flags<span class="token punctuation">;</span>\n   <span class="token keyword">int</span> __size<span class="token punctuation">;</span>\n   NSInteger val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">struct</span> __main_block_impl_0 <span class="token punctuation">{</span>\n    <span class="token keyword">struct</span> __block_impl impl<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> __main_block_desc_0<span class="token operator">*</span> Desc<span class="token punctuation">;</span>\n    __Block_byref_val_0 <span class="token operator">*</span>val<span class="token punctuation">;</span> <span class="token comment">// by ref</span>\n    <span class="token function">__main_block_impl_0</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">struct</span> __main_block_desc_0 <span class="token operator">*</span>desc<span class="token punctuation">,</span> __Block_byref_val_0 <span class="token operator">*</span>_val<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">val</span><span class="token punctuation">(</span>_val<span class="token operator">-></span>__forwarding<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    impl<span class="token punctuation">.</span>isa <span class="token operator">=</span> <span class="token operator">&amp;</span>_NSConcreteStackBlock<span class="token punctuation">;</span>\n    impl<span class="token punctuation">.</span>Flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>\n    impl<span class="token punctuation">.</span>FuncPtr <span class="token operator">=</span> fp<span class="token punctuation">;</span>\n    Desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__main_block_func_0</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0 <span class="token operator">*</span>__cself<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  __Block_byref_val_0 <span class="token operator">*</span>val <span class="token operator">=</span> __cself<span class="token operator">-></span>val<span class="token punctuation">;</span> <span class="token comment">// bound by ref</span>\n  <span class="token punctuation">(</span>val<span class="token operator">-></span>__forwarding<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__main_block_copy_0</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">_Block_object_assign</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dst<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token number">8</span><span class="token comment">/*BLOCK_FIELD_IS_BYREF*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__main_block_dispose_0</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span>src<span class="token punctuation">)</span>   <span class="token punctuation">{</span>\n  <span class="token function">_Block_object_dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token number">8</span><span class="token comment">/*BLOCK_FIELD_IS_BYREF*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">static</span> <span class="token keyword">struct</span> __main_block_desc_0 <span class="token punctuation">{</span>\n  size_t reserved<span class="token punctuation">;</span>\n  size_t Block_size<span class="token punctuation">;</span>\n  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>copy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>dispose<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n__main_block_desc_0_DATA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token punctuation">)</span><span class="token punctuation">,</span> __main_block_copy_0<span class="token punctuation">,</span> __main_block_dispose_0<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>   \n    __AtAutoreleasePool __autoreleasepool<span class="token punctuation">;</span> \n    <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__blocks__</span><span class="token punctuation">(</span>byref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> __Block_byref_val_0 val <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>__Block_byref_val_0 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>__Block_byref_val_0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token function">__main_block_impl_0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>__main_block_func_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>__main_block_desc_0_DATA<span class="token punctuation">,</span> <span class="token punctuation">(</span>__Block_byref_val_0 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token number">570425344</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__block_impl <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__block_impl <span class="token operator">*</span><span class="token punctuation">)</span>block<span class="token punctuation">)</span><span class="token operator">-></span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__block_impl <span class="token operator">*</span><span class="token punctuation">)</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__NSConstantStringImpl__val_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_d7fc4b_mi_0<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>__forwarding<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"我们发现由",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"修饰的变量变成了一个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__Block_byref_val_0</code>'}}),"结构体类型的实例。该结构体的声明如下："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">struct</span> __Block_byref_val_0 <span class="token punctuation">{</span>\n   <span class="token keyword">void</span> <span class="token operator">*</span>__isa<span class="token punctuation">;</span>\n   __Block_byref_val_0 <span class="token operator">*</span>__forwarding<span class="token punctuation">;</span>\n   <span class="token keyword">int</span> __flags<span class="token punctuation">;</span>\n   <span class="token keyword">int</span> __size<span class="token punctuation">;</span>\n   NSInteger val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"注意到这个结构体中包含了该实例本身的引用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"。\n我们从上述被转化的代码中可以看出 Block 本身也一样被转换成了",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__main_block_impl_0</code>'}}),"结构体实例，该实例持有",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__Block_byref_val_0</code>'}}),"结构体实例的指针。\n我们再看一下赋值和执行部分代码被转化后的结果："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__main_block_func_0</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0 <span class="token operator">*</span>__cself<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  __Block_byref_val_0 <span class="token operator">*</span>val <span class="token operator">=</span> __cself<span class="token operator">-></span>val<span class="token punctuation">;</span> <span class="token comment">// bound by ref</span>\n  <span class="token punctuation">(</span>val<span class="token operator">-></span>__forwarding<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__block_impl <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__block_impl <span class="token operator">*</span><span class="token punctuation">)</span>block<span class="token punctuation">)</span><span class="token operator">-></span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__block_impl <span class="token operator">*</span><span class="token punctuation">)</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"我们从",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__cself</code>'}}),"找到",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__Block_byref_val_0</code>'}}),"结构体实例，然后通过该实例的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"访问成员变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">val</code>'}}),"。成员变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">val</code>'}}),"是该实例自身持有的变量，指向的是原来的局部变量。"),"\n",t.createElement(a.p,null,"上面部分我们展示了",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量在Block查看和修改的过程，那么问题来了：\n当block作为回调执行时，局部变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">val</code>'}}),"已经出栈了，这个时候代码为什么还能正常工作呢?\n我们为什么是通过成员变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"而不是直接去访问结构体中我们需要修改的变量呢? ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"被设计出来的原因又是什么呢？"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"存储域"),"\n通过上面的描述我们知道Block和",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量实质就是一个相应结构体的实例。"),"\n",t.createElement(a.p,null,"我们在上述转换过的代码中可以发现",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__main_block_impl_0</code>'}}),"结构体构造函数中， ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">isa</code>'}}),"指向的是",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_NSConcreteStackBlock</code>'}}),"。"),"\n",t.createElement(a.p,null,"Block还有另外两个与之相似的类:\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_NSConcreteStackBlock</code>'}}),"保存在栈中的block，出栈时会被销毁\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_NSConcreteGlobalBlock</code>'}}),"全局的静态block，不会访问任何外部变量\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_NSConcreteMallocBlock</code>'}}),"保存在堆中的block，当引用计数为0时会被销毁"),"\n",t.createElement(a.p,null,"上述示例代码中，Block是被设为",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_NSConcreteStackBlock</code>'}}),"，在栈上生成。"),"\n",t.createElement(a.p,null,"当我们把Block作为全局变量使用时，对应生成的Block将被设为",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_NSConcreteGlobalBlock</code>'}}),"，如:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span><span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"This is a Global Block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>\n    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"该代码转换后的代码中，Block结构体的成员变量isa的初始化如下:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc">impl<span class="token punctuation">.</span>isa <span class="token operator">=</span> <span class="token operator">&amp;</span>_NSConcreteGlobalBlock<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"那么_NSConcreteMallocBlock在什么时候被使用呢？")),"\n",t.createElement(a.p,null,"分配在全局变量上的Block，在变量作用域外也可以通过指针安全的访问。但分配在栈上的Block，如果它所属的变量作用域结束，该Block就被废弃。同样地，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量也分配在栈上，当超过该变量的作用域时，该",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量也会被废弃。"),"\n",t.createElement(a.p,null,"这个时候_NSConcreteMallocBlock就登场了，Blocks提供了将Block和",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量从栈上复制到堆上的方法来解决这个问题。将分配到栈上的Block复制到堆上，这样但栈上的Block超过它原本作用域时，堆上的Block还可以继续存在。"),"\n",t.createElement(a.p,null,"复制到堆上的Block，它的结构体成员变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">isa</code>'}}),"将变为:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc">impl<span class="token punctuation">.</span>isa <span class="token operator">=</span> <span class="token operator">&amp;</span>_NSConcreteMallocBlock<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"而",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_block</code>'}}),"变量中结构体成员",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"就在此时保证了从栈上复制到堆上能够正确访问",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量。在这种情况下，只要栈上的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_block</code>'}}),"变量的成员变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"指向堆上的实例，我们就能够正确访问。"),"\n",t.createElement(a.p,null,"我们一般可以使用copy方法手动将 Block 或者",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量从栈复制到堆上。比如我们把Block做为类的属性访问时，我们一般把该属性设为copy。有些情况下我们可以不用手动复制,比如Cocoa框架中使用含有",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">usingBlock</code>'}}),"方法名的方法时，或者GCD的API中传递Block时。"),"\n",t.createElement(a.p,null,"当一个Block被复制到堆上时，与之相关的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量也会被复制到堆上，此时堆上的Block持有相应堆上的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量。当堆上的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量没有持有者时，它才会被废弃。(这里的思考方式和objc引用计数内存管理完全相同。)\n而在栈上的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量被复制到堆上之后，会将成员变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__forwarding</code>'}}),"的值替换为堆上的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量的地址。这个时候我们可以通过以下代码访问:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc">val<span class="token punctuation">.</span>__forwarding<span class="token operator">-></span>val</code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量和循环引用问题"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"修饰符可以指定任何类型的局部变量，上面的转换代码中，有如下代码:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__main_block_copy_0</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">_Block_object_assign</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dst<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token number">8</span><span class="token comment">/*BLOCK_FIELD_IS_BYREF*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__main_block_dispose_0</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> __main_block_impl_0<span class="token operator">*</span>src<span class="token punctuation">)</span>   <span class="token punctuation">{</span>\n  <span class="token function">_Block_object_dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token number">8</span><span class="token comment">/*BLOCK_FIELD_IS_BYREF*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"当Block从栈复制到堆时，会使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_Block_object_assign</code>'}}),"函数持有该变量(相当于",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">retain</code>'}}),")。当堆上的Block被废弃时，会使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_Block_object_dispose</code>'}}),"函数释放该变量(相当于",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">release</code>'}}),")。"),"\n",t.createElement(a.p,null,"由上文描述可知，我们可以使用下述代码解除Block循环引用的问题:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="objc"><pre class="language-objc"><code class="language-objc"><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>\n  tmp <span class="token operator">=</span> nil<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"通过执行block方法，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nil</code>'}}),"被赋值到",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_block</code>'}}),"变量",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tmp</code>'}}),"中。这个时候",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_block</code>'}}),"变量对",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">self</code>'}}),"的强引用失效，从而避免循环引用的问题。使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量的优点是:\n通过",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量可以控制对象的生命周期\n在不能使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__weak</code>'}}),"修饰符的环境中，我们可以避免使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__unsafe_unretained</code>'}}),"修饰符\n在执行Block时可动态地决定是否将nil或者其它对象赋值给",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__block</code>'}}),"变量\n但是这种方法有一个明显的缺点就是，我们必须去执行Block才能够解除循环引用问题，否则就会出现问题。"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.RP)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},c=s(1468),l=s(7947),u=s(1327),r=s(2171),k=s(9739);const i=n=>{let{data:a,pageContext:s,children:o}=n;const p=a.mdx,{title:i,postCopyright:_,author:d,siteUrl:m}=a.site.siteMetadata,{previous:g,next:y}=s,b=(0,c.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,k.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(l.A,{isFocus:!1,title:p.frontmatter.title,description:p.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},p.frontmatter.title),t.createElement("div",{className:"post-meta"},t.createElement("span",{className:"post-time"},p.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(e.xA,null,o)),_&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,d.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:m+p.fields.slug}," ",m+p.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==p.frontmatter.tags.length&&p.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},g?t.createElement("a",{className:"prev",rel:"prev",href:g.fields.slug},g.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),y?t.createElement("a",{className:"next",rel:"next",href:y.fields.slug},y.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(r.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${b?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),p.frontmatter.toc&&t.createElement(u.A,null))))};function _(n){return t.createElement(i,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-block机制详解-md-2cd5c182153fe9e43372.js.map