"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[8178],{6047:function(n,a,s){s.r(a),s.d(a,{default:function(){return m}});var e=s(8453),t=s(6540);function p(n){const a=Object.assign({h2:"h2",a:"a",span:"span",h3:"h3",ul:"ul",li:"li",p:"p",strong:"strong"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h2,{id:"变量声明--letconst",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E--letconst","aria-label":"变量声明  letconst permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"变量声明- let、const"),"\n",t.createElement(a.h3,{id:"let",style:{position:"relative"}},t.createElement(a.a,{href:"#let","aria-label":"let permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"let"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">let</code>'}}),"特点："),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"1 块级作用域（ES6）"),"\n",t.createElement(a.li,null,"2 先声明再使用"),"\n",t.createElement(a.li,null,"3 不允许重复声明"),"\n"),"\n"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/* 基本使用 */</span>\n<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">9</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"const",style:{position:"relative"}},t.createElement(a.a,{href:"#const","aria-label":"const permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"const"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"const声明一个",t.createElement(a.strong,null,"只读的常量"),"。一旦声明，常量的值就不能改变。"),"\n",t.createElement(a.li,null,"const的作用域与let命令相同：只在声明所在的块级作用域内有效"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token comment">// 3.1415</span>\n\n<span class="token comment">// 修改 常量的值 会报错</span>\n<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>\n\n<span class="token comment">// 可以修改对象中属性的值</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'rose\'</span> <span class="token punctuation">}</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'jack\'</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"字符串模板",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF","aria-label":"字符串模板 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"字符串模板"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"说明：代替原始的字符串拼接"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token comment">// ${} 中可以使用JS表达式</span>\n<span class="token keyword">let</span> dv <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"箭头函数",style:{position:"relative"}},t.createElement(a.a,{href:"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0","aria-label":"箭头函数 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"箭头函数"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://es6.ruanyifeng.com/#docs/function"},"ES6箭头函数")),"\n",t.createElement(a.li,null,"注意 1：函数体内的this对象，就是定义时所在的对象（一般是外层函数中的this）"),"\n",t.createElement(a.li,null,"注意 2：无法使用arguments，没有arguments对象"),"\n",t.createElement(a.li,null,"注意 3：不能当作构造函数，不能使用new创建对象"),"\n",t.createElement(a.li,null,"注意：",t.createElement(a.strong,null,"不要在Vue的选项属性或回调上使用箭头函数"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"比如：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">created: () => console.log(this.a)</code>'}})," 或 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">vm.$watch('a', newValue => this.myMethod())</code>"}})),"\n"),"\n"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/* 语法： */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">arg</span> <span class="token operator">=></span> arg\n\n<span class="token comment">// 上面的箭头函数等同于：</span>\n<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arg\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'随机内容\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 等同于：</span>\n<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'随机内容\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"rest参数",style:{position:"relative"}},t.createElement(a.a,{href:"#rest%E5%8F%82%E6%95%B0","aria-label":"rest参数 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"rest参数"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"ES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了"),"\n",t.createElement(a.li,null,"说明：rest 参数的类型是：数组"),"\n",t.createElement(a.li,null,"注意：rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n  values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> val\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> sum\n<span class="token punctuation">}</span>\n\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>\n\n\n<span class="token comment">// 报错</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"解构赋值",style:{position:"relative"}},t.createElement(a.a,{href:"#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC","aria-label":"解构赋值 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"解构赋值"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://es6.ruanyifeng.com/#docs/destructuring"},"ES6解构")),"\n",t.createElement(a.li,null,"ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 对象解构</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span>\nfoo <span class="token comment">// "aaa"</span>\nbar <span class="token comment">// "bbb"</span>\n\n<span class="token comment">// 数组解构</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 函数参数的解构赋值</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 1 2</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"对象简化语法",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%8C%96%E8%AF%AD%E6%B3%95","aria-label":"对象简化语法 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"对象简化语法"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"对象中的属性和方法，都可以使用简化语法"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/* 属性的简化语法： */</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">\'bar\'</span>\n<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span>\n\n<span class="token comment">// 等同于</span>\n<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">}</span>\n\n\n<span class="token comment">/* 方法的简化语法： */</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"Hello!"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"Hello!"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"属性名表达式",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%B1%9E%E6%80%A7%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F","aria-label":"属性名表达式 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"属性名表达式"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"ES6 允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内。"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> propKey <span class="token operator">=</span> <span class="token string">\'foo\'</span>\n<span class="token keyword">var</span> methodKey <span class="token operator">=</span> <span class="token string">\'bar\'</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>propKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'bc\'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>methodKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'hi\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"class关键字",style:{position:"relative"}},t.createElement(a.a,{href:"#class%E5%85%B3%E9%94%AE%E5%AD%97","aria-label":"class关键字 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"class关键字"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"ES6以前，JS是没有class概念的，而是通过构造函数+原型的方式来实现的"),"\n",t.createElement(a.li,null,"注意：ES6中的class仅仅是一个语法糖，并不是真正的类，与Java等服务端语言中的类是有区别的"),"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://es6.ruanyifeng.com/#docs/class"},"ES6 - 文档")),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 实例属性</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'jack\'</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 实例方法</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// 静态方法</span>\n  <span class="token keyword">static</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 静态属性</span>\nPerson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"类继承：","\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"1 如果子类提供了 constructor，那么，必须要调用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super()</code>'}})),"\n",t.createElement(a.li,null,"2 子类添加属性，必须在 super() 调用后面"),"\n"),"\n"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 类继承：</span>\n<span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> weight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token string">\'小明\'</span><span class="token punctuation">,</span> <span class="token string">\'男\'</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"静态属性和实例属性",style:{position:"relative"}},t.createElement(a.a,{href:"#%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7","aria-label":"静态属性和实例属性 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"静态属性和实例属性"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"静态属性：直接通过类名访问"),"\n",t.createElement(a.li,null,"实例属性：通过实例对象访问"),"\n"),"\n",t.createElement(a.h2,{id:"es6模块化---import和export",style:{position:"relative"}},t.createElement(a.a,{href:"#es6%E6%A8%A1%E5%9D%97%E5%8C%96---import%E5%92%8Cexport","aria-label":"es6模块化   import和export permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"ES6模块化 - import和export"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"http://blog.csdn.net/DeepLies/article/details/52916221?locationNum=13&fps=1"},"导入和导出")),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">import</code>'}}),"：导入模块"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">export</code>'}}),"：导出模块"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"注意1：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">export default</code>'}})," 每个模块只能使用一次"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"注意2：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">export</code>'}})," 每个模块可以使用多次"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"注意3：一个模块可以导出多个内容，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">export default</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">export</code>'}})," 可以一起使用"),"\n"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// main.js</span>\n<span class="token comment">// 导入 default 内容，可自定义导入名称</span>\n<span class="token comment">// import num from \'./a.js\'</span>\n<span class="token keyword">import</span> num1 <span class="token keyword">from</span> <span class="token string">\'./a.js\'</span>\n\n<span class="token comment">// a.js</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> num</code></pre></div>'}}),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// main.js</span>\n<span class="token comment">// 导入 export内容</span>\n<span class="token comment">// 注意：导入非default模块内容（str、fn），必须与 导出名称 相同，或者通过 as 修改</span>\n<span class="token comment">// 注意：必须使用花括号</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> str<span class="token punctuation">,</span> fn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./b\'</span>\n\n<span class="token comment">// 加载并修改变量名</span>\n<span class="token comment">// import { str as str1, fn } from \'./b\'</span>\n<span class="token comment">// 整体加载</span>\n<span class="token comment">// import * as bModule from \'./b\'</span>\n\n<span class="token comment">// b.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// main.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> str<span class="token punctuation">,</span> fn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./b\'</span>\n\n<span class="token comment">// b.js</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 一次性导出</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> str<span class="token punctuation">,</span> fn <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"数组扩展运算符",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%95%B0%E7%BB%84%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6","aria-label":"数组扩展运算符 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"数组扩展运算符"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"扩展运算符（spread）是三个点（...）。作用：将一个数组转为用逗号分隔的参数序列"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>\n\n<span class="token comment">// 上面这句代码相当于：</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"对象扩展运算符",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6","aria-label":"对象扩展运算符 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"对象扩展运算符"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"注意：该语法不是真正的ES规范，需要使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stage-2</code>'}}),"解析"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'jack\'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">\'male\'</span><span class="token punctuation">}</span>\n<span class="token comment">// o => {name: \'jack\', age: 19, gender: \'male\'}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"promise-异步编程",style:{position:"relative"}},t.createElement(a.a,{href:"#promise-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B","aria-label":"promise 异步编程 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Promise 异步编程"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://es6.ruanyifeng.com/#docs/promise"},"ES6 - Promise")),"\n",t.createElement(a.li,null,"Promise是一种对尚未返回的数据的一种承诺"),"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">promise</code>'}}),"：承诺、保证"),"\n"),"\n",t.createElement(a.h3,{id:"介绍",style:{position:"relative"}},t.createElement(a.a,{href:"#%E4%BB%8B%E7%BB%8D","aria-label":"介绍 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"介绍"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="markup"><pre class="language-markup"><code class="language-markup">Promise 是异步编程的一种解决方案，比传统的解决方案`回调函数和事件`更合理和更强大\nPromise 将异步操作以同步操作（链式编程）的流程表达出来，避免了层层嵌套的回调函数（回调地狱的问题）</code></pre></div>'}}),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"Promise对象代表一个异步操作，有三种状态：",t.createElement(a.strong,null,"pending（进行中）"),"、",t.createElement(a.strong,null,"fulfilled（已成功）",t.createElement(a.strong,null,"和"),"rejected（已失败）")),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"状态改变 1：pending -> fufilled"),"\n",t.createElement(a.li,null,"状态改变 2：pending -> rejected"),"\n",t.createElement(a.li,null,t.createElement(a.strong,null,"一旦状态改变，就不会再变")),"\n"),"\n"),"\n"),"\n",t.createElement(a.h3,{id:"基本使用",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8","aria-label":"基本使用 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"基本使用"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Promise 是一个构造函数</span>\n<span class="token comment">// 通过 new 创建Promise的实例对象</span>\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... some code</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"then-和-catch",style:{position:"relative"}},t.createElement(a.a,{href:"#then-%E5%92%8C-catch","aria-label":"then 和 catch permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"then 和 catch"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">then()</code>'}}),"： 用于指定异步操作成功时的回调函数"),"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">catch()</code>'}}),"：用于指定发生错误时的回调函数"),"\n",t.createElement(a.li,null,"说明：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">then()</code>'}}),"方法可以有多个，按照先后顺序执行，通过回调函数返回值传递数据给下一个then"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'1 Promise\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 异步操作</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">\'done\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'3 resolved.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'2 Hi!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"异步读取图片示例："),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">loadImageAsync</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    image<span class="token punctuation">.</span>src <span class="token operator">=</span> url\n\n    <span class="token comment">// 图片加载成功</span>\n    image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 图片加载失败</span>\n    image<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Could not load image at \'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 推荐方式：</span>\n<span class="token function">loadImageAsync</span><span class="token punctuation">(</span><span class="token string">\'url\'</span><span class="token punctuation">)</span>\n  <span class="token comment">// 成功处理</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// 错误处理</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 其他方式：</span>\n<span class="token function">loadImageAsync</span><span class="token punctuation">(</span><span class="token string">\'url\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 成功，value 获取到 图片对象（image）</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 失败，error 获取到 错误信息</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"all-和-race",style:{position:"relative"}},t.createElement(a.a,{href:"#all-%E5%92%8C-race","aria-label":"all 和 race permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"all 和 race"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 所有请求发送成功：</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">\'http://vue.studyit.io/api/getlunbo\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">\'http://vue.studyit.io/api/getnewslist\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// res 是 all() 方法中所有异步操作的结果</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'两个异步请求完成：\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 哪个请求先发送成功：</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">\'http://vue.studyit.io/api/getlunbo\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">\'http://vue.studyit.io/api/getnewslist\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// res 是 race() 方法中先完成的异步操作的结果：</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'一个异步请求完成：\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.RP)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},o=s(1468),l=s(7947),r=s(1327),u=s(2171),i=s(9739);const k=n=>{let{data:a,pageContext:s,children:p}=n;const c=a.mdx,{title:k,postCopyright:m,author:d,siteUrl:h}=a.site.siteMetadata,{previous:g,next:E}=s,v=(0,o.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,i.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(l.A,{isFocus:!1,title:c.frontmatter.title,description:c.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},c.frontmatter.title),t.createElement("div",{className:"post-meta"},a.site.siteMetadata.author.name,"  /  ",t.createElement("span",{className:"post-time"},c.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(e.xA,null,p)),m&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,d.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:h+c.fields.slug}," ",h+c.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==c.frontmatter.tags.length&&c.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},g?t.createElement("a",{className:"prev",rel:"prev",href:g.fields.slug},g.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),E?t.createElement("a",{className:"next",rel:"next",href:E.fields.slug},E.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(u.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${v?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),c.frontmatter.toc&&t.createElement(r.A,null))))};function m(n){return t.createElement(k,n,t.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-es-6-常用内容介绍-md-747c3152ecd4095365fb.js.map