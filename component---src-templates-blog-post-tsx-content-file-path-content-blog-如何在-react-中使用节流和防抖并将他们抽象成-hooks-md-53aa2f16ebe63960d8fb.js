"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[366],{2342:function(n,a,s){s.r(a),s.d(a,{default:function(){return d}});var e=s(8453),t=s(6540);function p(n){const a=Object.assign({p:"p",h2:"h2",a:"a",span:"span",ul:"ul",li:"li",blockquote:"blockquote"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Hooks 是 React 很出色的一个功能更新。它极大的简化了之前在类组件中必须拆分到各个声明周期中的逻辑。"),"\n",t.createElement(a.p,null,"但是，Hooks 需要一种新的思维模式，尤其是对初学者来讲。"),"\n",t.createElement(a.h2,{id:"防抖和节流",style:{position:"relative"}},t.createElement(a.a,{href:"#%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81","aria-label":"防抖和节流 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"防抖和节流"),"\n",t.createElement(a.p,null,"网络上有太多太多关于防抖和节流的文章了，所以我不打算再深入讨论如何编写自己的防抖和节流功能。方便起见，我们考虑直接使用 Lodash 中提供的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">debounce</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">throttle</code>'}}),"。"),"\n",t.createElement(a.p,null,"这里我们带大家快速复习一下，防抖和节流两个函数都接收两个参数，一个回调函数以及一个以毫秒为单位的延迟（暂时称为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}}),"）,而且这两个函数都返回另外一个具有特定功能的函数："),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">debounce</code>'}}),": 返回一个可以调用任意次的函数（一般是快速的连续调用），但是这个函数实际只会在最后一次调用完 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}})," 毫秒后，调用回调函数。"),"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">throttle</code>'}}),": 返回一个可以调用任意次的函数（一般是快速的连续调用），但是每 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}})," 毫秒间隔内最多只会调用一次回调函数。"),"\n"),"\n",t.createElement(a.h2,{id:"案例",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%A1%88%E4%BE%8B","aria-label":"案例 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"案例"),"\n",t.createElement(a.p,null,"我们有一个迷你博客编辑器（",t.createElement(a.a,{href:"https://github.com/wtjs/react-debounce-throttle-hooks/"},"Github仓库地址"),"），在这个编辑器中，我们需要在用户每次输入停止1秒后将博客内容存储到数据库内。"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"如果你想看最终版本的代码，直接访问 ",t.createElement(a.a,{href:"https://codesandbox.io/s/github/wtjs/react-debounce-throttle-hooks"},"Codesandbox")," 就可以\n我们的编辑器最小版的代码应该是这样："),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">\'lodash.debounce\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>dbValue<span class="token punctuation">,</span> saveToDb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// would be an API call normally</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setValue</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>main<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Blog<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      <span class="token operator">&lt;</span>textarea value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> rows<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span> cols<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">"panels"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token function">这是编辑器端的内容</span> <span class="token punctuation">(</span>Client<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n          <span class="token punctuation">{</span>value<span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token function">这是存储好了的内容</span> <span class="token punctuation">(</span><span class="token constant">DB</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n          <span class="token punctuation">{</span>dbValue<span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"上面这段代码里，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">saveToDb</code>'}})," 实际上应该是对后端 API 的调用，但是这里为了让代码保持简洁，我把数据存储在 state 中，且为了方便大家观看，我直接将其渲染到了页面上。"),"\n",t.createElement(a.p,null,"因为我们只想在用户停止输入 1s 后执行这个存储操作，所以这里应该使用防抖。"),"\n",t.createElement(a.p,null,"大家可以",t.createElement(a.a,{href:"https://github.com/wtjs/react-debounce-throttle-hooks/tree/starter"},"在这里"),"查看起始代码。"),"\n",t.createElement(a.h2,{id:"创建一个防抖函数",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0","aria-label":"创建一个防抖函数 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"创建一个防抖函数"),"\n",t.createElement(a.p,null,"首先，我们需要一个防抖函数来封装对 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">saveToDb</code>'}})," 函数的调用："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">\'lodash.debounce\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>dbValue<span class="token punctuation">,</span> saveToDb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// would be an API call normally</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> nextValue <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>\n    <span class="token function">setValue</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> debouncedSave <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">saveToDb</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="gatsby-highlight-code-line">    <span class="token function">debouncedSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment">/* Same as before */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"但是，这样其实是不能正常工作的，大家自习观察就会发现，我们是在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">handleChange</code>'}})," 函数中创建的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">debouncedSave</code>'}})," 函数，那这就意味着，每次按键触发 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">handleChange</code>'}})," 事件都会重新创建一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">debouncedSave</code>'}})," 函数，引用不一致就会导致防抖功能失效了。"),"\n",t.createElement(a.h2,{id:"usecallback",style:{position:"relative"}},t.createElement(a.a,{href:"#usecallback","aria-label":"usecallback permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"useCallback"),"\n",t.createElement(a.p,null,"在我们给子组件传递回调函数的时候，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useCallback</code>'}})," 可以用来优化性能。但是我们可以利用他的另外一个特性，就是会对回调函数进行缓存，在依赖不发生任何变更的情况下，能保证每次调用的都是同一个。这样就能保证我们每次调用的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">debounceSave</code>'}})," 都是同一个了。"),"\n",t.createElement(a.p,null,"这样就跟我们预想的一样了："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">\'lodash.debounce\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>dbValue<span class="token punctuation">,</span> saveToDb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// would be an API call normally</span>\n\n<span class="gatsby-highlight-code-line">  <span class="token keyword">const</span> debouncedSave <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span></span><span class="gatsby-highlight-code-line">    <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">nextValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">saveToDb</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="gatsby-highlight-code-line">    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// will be created only once initially</span></span><span class="gatsby-highlight-code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> nextValue <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>\n    <span class="token function">setValue</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Even though handleChange is created on each render and executed</span>\n    <span class="token comment">// it references the same debouncedSave that was created initially</span>\n    <span class="token function">debouncedSave</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment">/* Same as before */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"useref",style:{position:"relative"}},t.createElement(a.a,{href:"#useref","aria-label":"useref permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"useRef"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useRef</code>'}})," 可以用来创建一个可修改的对象，我们传递给 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useRef</code>'}}),"的参数会作为初始值赋值给这个对象的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.current</code>'}})," 属性。最关键的是，如果我们不去手动的更改，那么这个值会组件的生命周期内持续存在。"),"\n",t.createElement(a.p,null,"同样，这样也能和我们预期的一样："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">\'lodash.debounce\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>dbValue<span class="token punctuation">,</span> saveToDb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// would be an API call normally</span>\n\n  <span class="token comment">// This remains same across renders</span>\n<span class="gatsby-highlight-code-line">  <span class="token keyword">const</span> debouncedSave <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span></span><span class="gatsby-highlight-code-line">    <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">nextValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">saveToDb</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span><span class="gatsby-highlight-code-line">  <span class="token punctuation">)</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span></span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> nextValue <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>\n    <span class="token function">setValue</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Even though handleChange is created on each render and executed</span>\n    <span class="token comment">// it references the same debouncedSave that was created initially</span>\n    <span class="token function">debouncedSave</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment">/* Same as before */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"封装一个自定义-hook",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89-hook","aria-label":"封装一个自定义 hook permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"封装一个自定义 Hook"),"\n",t.createElement(a.p,null,"上面两个方法中，我们用到了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useCallback</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useRef</code>'}}),"，而且都能很好的帮我们实现需求。对于一次性案例来讲，这样挺好，但是如果写法能变得更简洁岂不是更棒？如果我们不使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useCallback</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useRef</code>'}})," 的话，我们的代码会变得可读性更高。我们当然可以把这个逻辑抽象到一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useDebounce</code>'}})," Hook 中。"),"\n",t.createElement(a.p,null,"下面的代码是我们使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useCallback</code>'}})," 来实现我们的构思："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">"lodash.debounce"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">useDebounce</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> debouncedFn <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>delay<span class="token punctuation">]</span> <span class="token comment">// will recreate if delay changes</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> debouncedFn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>dbValue<span class="token punctuation">,</span> saveToDb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// would be an API call normally</span>\n\n  <span class="token keyword">const</span> debouncedSave <span class="token operator">=</span> <span class="token function">useDebounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">nextValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">saveToDb</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> nextValue <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>\n    <span class="token function">setValue</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">debouncedSave</span><span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment">/* Same as before */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这个代码确实能正常运行也能完成我们要的功能，但是很奇怪的，我的 TypeScript Linter 报了一个错误："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">React Hook useCallback received a <span class="token keyword">function</span> whose dependencies are unknown.\nPass an inline <span class="token keyword">function</span> instead. eslint<span class="token punctuation">(</span>react-hooks/exhaustive-deps<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"但是这个代码能在 JavaScript 环境下正常运行，并且没有任何错误（使用的是 create-react-app 模板）。不管怎么样，下边给大家提供一个替代方案，使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useRef</code>'}})," 来实现的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useDebounce</code>'}})," Hook:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useDebounce</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Memoizing the callback because if it\'s an arrow function</span>\n  <span class="token comment">// it would be different on each render</span>\n  <span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> debouncedFn <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token function">debounce</span><span class="token punctuation">(</span>memoizedCallback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    debouncedFn<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>memoizedCallback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>memoizedCallback<span class="token punctuation">,</span> debouncedFn<span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> debouncedFn<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这个代码没有上面使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useCallback</code>'}})," 实现的简洁，很有可能我那个 Linter 的错误是一个 Gug, 说不定过不了多久就能修复了。"),"\n",t.createElement(a.p,null,"在这篇文章里，我只是简单的介绍了防抖，但是节流也可以用同样的方式来实现。一样的，你也可以做一个自己的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useThrottle</code>'}})," Hook。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.RP)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},c=s(1468),l=s(7947),u=s(1327),r=s(2171),k=s(9739);const i=n=>{let{data:a,pageContext:s,children:p}=n;const o=a.mdx,{title:i,postCopyright:d,author:m,siteUrl:g}=a.site.siteMetadata,{previous:h,next:b}=s,y=(0,c.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,k.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(l.A,{isFocus:!1,title:o.frontmatter.title,description:o.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},o.frontmatter.title),t.createElement("div",{className:"post-meta"},a.site.siteMetadata.author.name,"  /  ",t.createElement("span",{className:"post-time"},o.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(e.xA,null,p)),d&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,m.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:g+o.fields.slug}," ",g+o.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==o.frontmatter.tags.length&&o.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},h?t.createElement("a",{className:"prev",rel:"prev",href:h.fields.slug},h.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),b?t.createElement("a",{className:"next",rel:"next",href:b.fields.slug},b.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(r.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${y?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),o.frontmatter.toc&&t.createElement(u.A,null))))};function d(n){return t.createElement(i,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-如何在-react-中使用节流和防抖并将他们抽象成-hooks-md-53aa2f16ebe63960d8fb.js.map