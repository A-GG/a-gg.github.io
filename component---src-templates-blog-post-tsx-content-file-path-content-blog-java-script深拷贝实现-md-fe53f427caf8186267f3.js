"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[5711],{6642:function(n,a,s){s.r(a),s.d(a,{default:function(){return d}});var t=s(8453),p=s(6540);function e(n){const a=Object.assign({p:"p",h2:"h2",a:"a",span:"span",h3:"h3",ul:"ul",li:"li",h4:"h4"},(0,t.RP)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"在实际开发当中，我们经常会遇到要对对象进行深拷贝的情况。而且深拷贝这个问题在面试过程中也经常会遇到，下面就对本人在学习过程中的收获，做以简单的总结。"),"\n",p.createElement(a.h2,{id:"什么是浅拷贝什么是深拷贝",style:{position:"relative"}},p.createElement(a.a,{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E6%8B%B7%E8%B4%9D","aria-label":"什么是浅拷贝什么是深拷贝 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"什么是浅拷贝，什么是深拷贝？"),"\n",p.createElement(a.h3,{id:"什么是浅拷贝",style:{position:"relative"}},p.createElement(a.a,{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D","aria-label":"什么是浅拷贝 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"什么是浅拷贝"),"\n",p.createElement(a.p,null,"关于浅拷贝的概念，我在网上看到一种说法，直接上代码。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jason"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">car</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">"Ferrari"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"430"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> person<span class="token punctuation">;</span> \t\t<span class="token comment">//他们认为这是浅拷贝</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"但是我个人认为，上面这个根本不涉及拷贝，只是一个简单的引用赋值。以我的理解，浅拷贝应该是不考虑对象的引用类型的属性，只对当前对象的所有成员进行拷贝，代码如下："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> objCopy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\tobjCopy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> objCopy<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jason"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">car</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">"Ferrari"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"430"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> personCopy <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"上面这段代码中，",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">person</code>'}}),"对象拥有两个基本类型的属性",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}}),"和",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">age</code>'}}),"，一个引用类型的属性",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">car</code>'}}),"，当使用如上方法进行拷贝的时候，",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}}),"和",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">age</code>'}}),"属性会被正常的拷贝，但是",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">car</code>'}}),"属性，只会进行引用的拷贝，这样会导致拷贝出来的对象",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">personCopy</code>'}}),"和",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">person</code>'}}),"会共用一个",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">car</code>'}}),"对象。这样就是所谓的浅拷贝。"),"\n",p.createElement(a.h3,{id:"什么是深拷贝",style:{position:"relative"}},p.createElement(a.a,{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E6%8B%B7%E8%B4%9D","aria-label":"什么是深拷贝 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"什么是深拷贝"),"\n",p.createElement(a.p,null,"深拷贝的就是在拷贝的时候，需要将当前要拷贝的对象内的所有引用类型的属性进行完整的拷贝，也就是说拷贝出来的对象和原对象之间没有任何数据是共享的，所有的东西都是自己独占的一份。"),"\n",p.createElement(a.h2,{id:"如何实现深拷贝",style:{position:"relative"}},p.createElement(a.a,{href:"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D","aria-label":"如何实现深拷贝 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"如何实现深拷贝"),"\n",p.createElement(a.h3,{id:"实现深拷贝需要考虑的问题",style:{position:"relative"}},p.createElement(a.a,{href:"#%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E7%9A%84%E9%97%AE%E9%A2%98","aria-label":"实现深拷贝需要考虑的问题 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"实现深拷贝需要考虑的问题"),"\n",p.createElement(a.p,null,"实现深拷贝需要考虑如下几个因素："),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"传入的对象是使用对象字面量",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{}</code>'}}),"创建的对象还是由构造函数生成的对象"),"\n",p.createElement(a.li,null,"如果对象是由构造函数创建出来的，那么是否要拷贝原型链上的属性"),"\n",p.createElement(a.li,null,"如果要拷贝原型链上的属性，那么如果原型链上存在多个同名的属性，保留哪个"),"\n",p.createElement(a.li,null,"处理循环引用的问题"),"\n"),"\n",p.createElement(a.h3,{id:"第三方库实现深拷贝",style:{position:"relative"}},p.createElement(a.a,{href:"#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D","aria-label":"第三方库实现深拷贝 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"第三方库实现深拷贝"),"\n",p.createElement(a.h4,{id:"jquery的extend",style:{position:"relative"}},p.createElement(a.a,{href:"#jquery%E7%9A%84extend","aria-label":"jquery的extend permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"jQuery的$.extend()"),"\n",p.createElement(a.p,null,"我们可以通过",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$.extend()</code>'}}),"方法来完成深复制。值得庆幸的是，我们在",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jQuery</code>'}}),"中可以通过添加一个参数来实现递归",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extend</code>'}}),"。调用",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$.extend(true, {}, ...)</code>'}}),"就可以实现深复制，参考下面的例子:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> y <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">//shallow copy</span>\n    z <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//deep copy</span>\n\ny<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> x<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f       <span class="token comment">// true</span>\nz<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> x<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f       <span class="token comment">// false</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"但是jQuery的这个",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$.extend()</code>'}}),"方法，有弊端，什么弊端呢？我们看下面的例子："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nobjA<span class="token punctuation">.</span>b <span class="token operator">=</span> objB<span class="token punctuation">;</span>\nobjB<span class="token punctuation">.</span>a <span class="token operator">=</span> objA<span class="token punctuation">;</span>\n\n$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//这个时候就出现异常了</span>\n<span class="token comment">//Uncaught RangeError: Maximum call stack size exceeded(…)</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"也就是说，jQuery中的",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$.extend()</code>'}}),"并没有处理循环引用的问题。"),"\n",p.createElement(a.h3,{id:"使用json对象实现深拷贝",style:{position:"relative"}},p.createElement(a.a,{href:"#%E4%BD%BF%E7%94%A8json%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D","aria-label":"使用json对象实现深拷贝 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"使用JSON对象实现深拷贝"),"\n",p.createElement(a.p,null,"使用",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">JSON</code>'}}),"全局对象的",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">parse</code>'}}),"和",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stringify</code>'}}),"方法来实现深复制也算是一个简单讨巧的方法。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">jsonClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">jsonClone</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"然而使用这种方法会有一些隐藏的坑，它能正确处理的对象只有 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Number</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Boolean</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Array</code>'}}),", 扁平对象，即那些能够被 json 直接表示的数据结构。"),"\n",p.createElement(a.h3,{id:"自己造轮子",style:{position:"relative"}},p.createElement(a.a,{href:"#%E8%87%AA%E5%B7%B1%E9%80%A0%E8%BD%AE%E5%AD%90","aria-label":"自己造轮子 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"自己造轮子"),"\n",p.createElement(a.p,null,"下面我们给出一个简单的解决方案，当然这个方案是参考别人的方式来实现的。希望对大家有用。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//这个方法用来获取对象的类型 返回值为字符串类型 "Object RegExp Date Array..."</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">classof</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token string">"null"</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token string">"undefined"</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">// 这里的Object.prototype.toString很可能用的就是Object.prototype.constructor.name</span>\n\t\t<span class="token comment">// 这里使用Object.prototype.toString来生成类型字符串</span>\n\t\t<span class="token keyword">var</span> className <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> className<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//这里这个变量我们用来存储已经保存过的属性，目的在于处理循环引用的问题</span>\n\t<span class="token keyword">var</span> references <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//遇到不同类型的对象的处理方式</span>\n\t<span class="token keyword">var</span> handlers <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//正则表达式的处理</span>\n\t\t<span class="token string-property property">\'RegExp\'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">var</span> flags <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\t\t\tflags <span class="token operator">+=</span> reg<span class="token punctuation">.</span>global <span class="token operator">?</span> <span class="token string">\'g\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\t\t\tflags <span class="token operator">+=</span> reg<span class="token punctuation">.</span>multiline <span class="token operator">?</span> <span class="token string">\'m\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\t\t\tflags <span class="token operator">+=</span> reg<span class="token punctuation">.</span>ignoreCase <span class="token operator">?</span> <span class="token string">\'i\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token comment">//时间对象处理</span>\n\t\t<span class="token string-property property">\'Date\'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token comment">//数组处理 第二个参数为是否做浅拷贝</span>\n\t\t<span class="token string-property property">\'Array\'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> shallow</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t\ti<span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\tnewArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token comment">//这里我们通过reference数组来处理循环引用问题</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>references<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t<span class="token keyword">continue</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t\t<span class="token keyword">var</span> handler <span class="token operator">=</span> handlers<span class="token punctuation">[</span><span class="token function">classof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\treferences<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t\tnewArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\tnewArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">return</span> newArr<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token comment">//正常对象的处理 第二个参数为是否做浅拷贝</span>\n\t\t<span class="token string-property property">\'Object\'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> shallow</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> prop<span class="token punctuation">,</span> handler<span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">//关于原型中属性的处理太过复杂，我们这里暂时不做处理</span>\n\t\t\t\t<span class="token comment">//所以只对对象本身的属性做拷贝</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\tnewObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t<span class="token comment">//这里还是处理循环引用的问题</span>\n\t\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>references<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t\t<span class="token keyword">continue</span><span class="token punctuation">;</span>\n\t\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t\t\t\n\t\t\t\t\t\thandler <span class="token operator">=</span> handlers<span class="token punctuation">[</span><span class="token function">classof</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t\t\t\t<span class="token comment">//如果没有对应的处理方式，那么就直接复制</span>\n\t\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t\treferences<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t\t\tnewObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t\tnewObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">return</span> newObj<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> shallow</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//首先重置我们用来处理循环引用的这个变量</span>\n\t\treferences <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//我们默认处理为浅拷贝</span>\n\t\tshallow <span class="token operator">=</span> shallow <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">var</span> handler <span class="token operator">=</span> handlers<span class="token punctuation">[</span><span class="token function">classof</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> handler <span class="token operator">?</span> <span class="token function">handler</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> shallow<span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//下面是一些测试代码</span>\n\t<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello word</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">\'this ia a string\'</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token literal-property property">o</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token literal-property property">wow</span><span class="token operator">:</span> <span class="token string">\'aha\'</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> refer1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> refer2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">refer</span><span class="token operator">:</span> refer1\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\trefer1<span class="token punctuation">.</span>refer <span class="token operator">=</span> refer2<span class="token punctuation">;</span>\n\n\t<span class="token keyword">var</span> cloneDate <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> cloneReg <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> cloneObj <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date <span class="token operator">!==</span> cloneDate<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> cloneDate<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cloneReg <span class="token operator">!==</span> reg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> cloneReg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">!==</span> cloneObj<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>arr <span class="token operator">!==</span> cloneObj<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>o <span class="token operator">!==</span> cloneObj<span class="token punctuation">.</span>o<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token function">clone</span><span class="token punctuation">(</span>refer2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"I\'m not dead yet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">// Output:</span>\n\t<span class="token comment">// true</span>\n\t<span class="token comment">// true</span>\n\t<span class="token comment">// true</span>\n\t<span class="token comment">// I\'m not dead yet!</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.RP)(),n.components);return a?p.createElement(a,n,p.createElement(e,n)):e(n)},c=s(1468),l=s(7947),u=s(1327),r=s(2171),k=s(9739);const i=n=>{let{data:a,pageContext:s,children:e}=n;const o=a.mdx,{title:i,postCopyright:d,author:m,siteUrl:g}=a.site.siteMetadata,{previous:h,next:y}=s,E=(0,c.d4)((n=>n.isDarkMode));return(0,p.useEffect)((()=>{(0,k.A)(".post-content img",{background:"#292a2d"})}),[]),p.createElement(l.A,{isFocus:!1,title:o.frontmatter.title,description:o.frontmatter.description},p.createElement("div",{className:"container"},p.createElement("article",{className:"post-wrap"},p.createElement("header",{className:"post-header"},p.createElement("h1",{className:"post-title"},o.frontmatter.title),p.createElement("div",{className:"post-meta"},p.createElement("span",{className:"post-time"},o.frontmatter.date)," ")),p.createElement("div",{className:"post-content"},p.createElement(t.xA,null,e)),d&&p.createElement("section",{className:"post-copyright"},p.createElement("p",{className:"copyright-item"},p.createElement("span",null,"Author: "),p.createElement("span",null,m.name)),p.createElement("p",{className:"copyright-item"},p.createElement("span",null,"Permalink:"),p.createElement("span",null,p.createElement("a",{href:g+o.fields.slug}," ",g+o.fields.slug," "))),p.createElement("p",{className:"copyright-item"},p.createElement("span",null,"License: "),p.createElement("span",null,p.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),p.createElement("section",{className:"post-tags"},p.createElement("div",null,p.createElement("span",null,"Tag(s):"),p.createElement("span",{className:"tag"},0!==o.frontmatter.tags.length&&o.frontmatter.tags.map((n=>p.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),p.createElement("div",null,p.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),p.createElement("span",null," · "),p.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),p.createElement("section",{className:"post-nav"},h?p.createElement("a",{className:"prev",rel:"prev",href:h.fields.slug},h.frontmatter.title):p.createElement("span",{className:"prev"},"No More"),y?p.createElement("a",{className:"next",rel:"next",href:y.fields.slug},y.frontmatter.title):p.createElement("span",{className:"next"},"No More")),p.createElement(r.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${E?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),o.frontmatter.toc&&p.createElement(u.A,null))))};function d(n){return p.createElement(i,n,p.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-java-script深拷贝实现-md-fe53f427caf8186267f3.js.map