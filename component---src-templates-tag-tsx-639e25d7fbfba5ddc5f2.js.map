{"version":3,"file":"component---src-templates-tag-tsx-639e25d7fbfba5ddc5f2.js","mappings":"mIAwCA,IArCkBA,IAAsC,IAArC,UAAEC,EAAS,YAAEC,EAAW,IAAEC,GAAKH,EAC5CI,EAAmB,EACnBC,EAAiBJ,EACjBK,EAAa,GACbL,EAAY,IACdG,EAAWF,EAAc,EACzBG,EAASH,EAAc,EACnBE,EAAW,IACbC,GAAU,EAAID,EACdA,EAAW,GAETC,EAASJ,IACXG,GAAYC,EAASJ,EACrBI,EAASJ,IAGb,IAAK,IAAIM,EAAYH,EAAUG,GAAKF,EAAQE,IAAK,CAC/C,IAAIC,EAEFA,EADEN,GAAeK,EAEfE,EAAAA,cAAA,QAAMC,UAAU,sBAAsBC,IAAKJ,GACxCA,GAKHE,EAAAA,cAACG,EAAAA,KAAI,CAACF,UAAU,cAAcG,GAAI,GAAGV,KAAY,GAALI,EAAS,GAAKA,IAAKI,IAAKJ,GACjEA,GAIPD,EAAWQ,KAAKN,EAClB,CAEA,OAAOC,EAAAA,cAAA,OAAKC,UAAU,cAAcJ,EAAiB,C,wDCXvD,IAxBkBN,IAA8B,IAC1Ce,GADa,MAAEC,EAAK,aAAEC,GAAcjB,EAExC,OACES,EAAAA,cAAA,OAAKC,UAAU,qBACZO,GACCR,EAAAA,cAAA,MAAIC,UAAU,cAAa,KAAQO,EAAa,MAEjDD,EAAME,KAAIC,IACT,MAAMC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,IAAIC,EAAUC,IAAO,IAAIC,KAAKP,EAAKE,YAAYM,OAAOC,OAEtD,OACEnB,EAAAA,cAAA,WAASC,UAAU,eAAeC,IAAKQ,EAAKG,OAAOC,MAChDR,KAAcA,EAAWS,GAAWf,EAAAA,cAAA,UAAKe,GAAgB,GAC1Df,EAAAA,cAAA,KAAGC,UAAU,oBAAoBmB,KAAM,GAAGV,EAAKG,OAAOC,QACnDH,EACDX,EAAAA,cAAA,QAAMC,UAAU,qBAAqBS,EAAKE,YAAYM,OAEhD,IAGV,C,yECDV,UAfY3B,IAAc,IAAb,KAAE8B,GAAM9B,EACf+B,EAAM,GAIV,MAHsB,oBAAXC,SACTD,EAAME,mBAAmBD,OAAOE,SAASC,SAASC,QAAQ,QAAS,MAGnE3B,EAAAA,cAAC4B,EAAAA,EAAM,CAACjB,MAAOW,EAAKO,YAAaP,GAC/BtB,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAC8B,EAAAA,EAAS,CAACvB,MAAOc,EAAKU,OAAOC,MAAOxB,aAAcc,IACnDtB,EAAAA,cAACiC,EAAAA,EAASC,OAAAC,OAAA,GAAKd,EAAKU,OAAOK,SAAQ,CAAE1C,IAAI,gBAEpC,C","sources":["webpack://w1zd-lair/./src/components/paginator.tsx","webpack://w1zd-lair/./src/components/postslist.tsx","webpack://w1zd-lair/./src/templates/tag.tsx"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Paginator = ({ pageCount, currentPage, url }) => {\n  let startNum: number = 1\n  let endNum: number = pageCount\n  let indicators = []\n  if (pageCount > 7) {\n    startNum = currentPage - 3\n    endNum = currentPage + 3\n    if (startNum < 1) {\n      endNum += 1 - startNum\n      startNum = 1\n    }\n    if (endNum > pageCount) {\n      startNum -= endNum - pageCount\n      endNum = pageCount\n    }\n  }\n  for (let i: number = startNum; i <= endNum; i++) {\n    let indicate: React.ReactNode\n    if (currentPage == i) {\n      indicate = (\n        <span className=\"page-number current\" key={i}>\n          {i}\n        </span>\n      )\n    } else {\n      indicate = (\n        <Link className=\"page-number\" to={`${url}/${i == 1 ? \"\" : i}`} key={i}>\n          {i}\n        </Link>\n      )\n    }\n    indicators.push(indicate)\n  }\n\n  return <nav className=\"pagination\">{indicators}</nav>\n}\n\nexport default Paginator\n","import React from \"react\"\nimport moment from \"moment\"\nconst PostsList = ({ posts, catOrTagname }) => {\n  let lastYear\n  return (\n    <div className=\"post-wrap archive\">\n      {catOrTagname && (\n        <h2 className=\"post-title\">-&nbsp;{catOrTagname}&nbsp;-</h2>\n      )}\n      {posts.map(node => {\n        const title = node.frontmatter.title || node.fields.slug\n        let curYear = moment(new Date(node.frontmatter.date)).year()\n\n        return (\n          <article className=\"archive-item\" key={node.fields.slug}>\n            {lastYear !== (lastYear = curYear) ? <h3>{curYear}</h3> : \"\"}\n            <a className=\"archive-item-link\" href={`${node.fields.slug}`}>\n              {title}\n              <span className=\"archive-item-date\">{node.frontmatter.date}</span>\n            </a>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\nexport default PostsList\n","import React from \"react\"\nimport Paginator from \"../components/paginator\"\nimport PostsList from \"../components/postslist\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Tag = ({ data }) => {\n  let tag = \"\"\n  if (typeof window !== `undefined`) {\n    tag = decodeURIComponent(window.location.pathname.replace(\"/tag/\", \"\"))\n  }\n  return (\n    <Layout title={tag} description={tag}>\n      <div className=\"container\">\n        <PostsList posts={data.allMdx.nodes} catOrTagname={tag}></PostsList>\n        <Paginator {...data.allMdx.pageInfo} url=\"/category\"></Paginator>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Tag\nexport const pageQuery = graphql`\n  query tagsQuery($limit: Int!, $skip: Int!, $tag: String!) {\n    allMdx(\n      limit: $limit\n      skip: $skip\n      filter: { frontmatter: { tags: { glob: $tag } } }\n      sort: { frontmatter: { date: ASC } }\n    ) {\n      pageInfo {\n        currentPage\n        pageCount\n      }\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMMM DD, YYYY\")\n          tags\n        }\n        id\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","pageCount","currentPage","url","startNum","endNum","indicators","i","indicate","React","className","key","Link","to","push","lastYear","posts","catOrTagname","map","node","title","frontmatter","fields","slug","curYear","moment","Date","date","year","href","data","tag","window","decodeURIComponent","location","pathname","replace","Layout","description","PostsList","allMdx","nodes","Paginator","Object","assign","pageInfo"],"sourceRoot":""}