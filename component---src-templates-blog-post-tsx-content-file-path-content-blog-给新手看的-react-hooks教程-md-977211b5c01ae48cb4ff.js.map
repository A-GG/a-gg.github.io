{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-blog-给新手看的-react-hooks教程-md-977211b5c01ae48cb4ff.js","mappings":"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","sources":["webpack://w1zd-lair/./content/blog/给新手看的React-Hooks教程.md","webpack://w1zd-lair/./src/templates/blog-post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-42-11-0f76f4f01901829907f9af90ae1aa770-reacthooks-586d4b.png\",\n    alt: \"\"\n  }), \"\\n\\\"Hooks 到底是个啥玩意儿？？？\\\"\"), \"\\n\", React.createElement(_components.p, null, \"你是不是有这样的疑惑？在你自认为已经了解了差不多 React 所有的内容的时候，Hooks 就这么出现了。\"), \"\\n\", React.createElement(_components.p, null, \"这就是前端开发人员的日常，技术从未停止更新。\"), \"\\n\", React.createElement(_components.p, null, \"学习新东西是一件很棒的事情吗？当然是！但有的时候我们又不得不思考：”为什么要学它？这个新东西有啥意义？我是必须得学他吗？“。\"), \"\\n\", React.createElement(_components.p, null, \"针对 Hooks 而言，上面的这个问题答案是否定的，你不需要立马就学它。如果您一直在使用 React，并且迄今为止一直在使用基于类的组件，那么就不必急于转向 Hooks。Hooks 是可选的，可以与现有组件配合使用。我相信当你因为要使用新东西而不得不重写整个代码库，你整个人都是崩溃的。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"在函数组件中使用状态\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%9C%A8%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81\",\n    \"aria-label\": \"在函数组件中使用状态 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"在函数组件中使用状态\"), \"\\n\", React.createElement(_components.p, null, \"在使用 Hooks 之前，我们不能在函数组件中使用状态。这就意味着，如果您有一个经过精心设计和测试的函数组件，突然需要存储状态，那么你就不得不把他重构为一个类组件。\"), \"\\n\", React.createElement(_components.p, null, \"牛逼的来了，Hooks 让函数组件也能使用状态，就意味着我们不需要重构之前自己的写的代码，\", React.createElement(_components.a, {\n    href: \"https://scotch.io/courses/5-essential-react-concepts-to-know-before-learning-redux/presentational-and-container-component-pattern-in-react\"\n  }, \"可以点击这篇文章查看更多\"), \"。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"类组件很笨重\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%BE%88%E7%AC%A8%E9%87%8D\",\n    \"aria-label\": \"类组件很笨重 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"类组件很笨重\"), \"\\n\", React.createElement(_components.p, null, \"我们不的不承认的是，类组件附带了太多的东西。constructor，binding，“this”无处不在。使用函数组件可以消除许多这种情况，能让我们的代码更容易维护。\"), \"\\n\", React.createElement(_components.p, null, \"可以在\", React.createElement(_components.a, {\n    href: \"https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines\"\n  }, \"React文档中了解更多相关内容\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"更高的可读性\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E6%9B%B4%E9%AB%98%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7\",\n    \"aria-label\": \"更高的可读性 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"更高的可读性\"), \"\\n\", React.createElement(_components.p, null, \"由于 Hooks 允许我们在函数组件中使用状态，因此和类组件相比，这意味同样的功能，我们写出来的代码会更好。 这也会让我们的代码更具可读性。 我们再也不用担心方法是不是绑定了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \"，也不必记住 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 之间的关系等等。 我们可以专心写代码了。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"react-state-hook\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#react-state-hook\",\n    \"aria-label\": \"react state hook permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"React State Hook\"), \"\\n\", React.createElement(_components.p, null, \"状态，是React生态系统的基础。接下来我将通过介绍最常见的 Hook —— \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useState()</code>\"\n    }\n  }), \" 来让大家初步了解 Hooks。\"), \"\\n\", React.createElement(_components.p, null, \"我们先来看一下具有状态的类组件。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">'./styles.css'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Counter</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token literal-property property\\\">count</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>initialValue<span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token function-variable function\\\">setCount</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">count</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h2</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">This is a counter using a class</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h2</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\n\\t\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>setCount<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click to Increment</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> Counter<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"有了React Hooks 之后，我们可以重写这个类组件并删除很多内容，使其更易理解\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> useState <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">CounterWithHooks</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>initialValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t<span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>h2<span class=\\\"token operator\\\">></span>This is a counter using hooks<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Click to Increment<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n\\t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> CounterWithHooks<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"代码变少了，但这到底是啥情况呢？\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"react-state-syntax\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#react-state-syntax\",\n    \"aria-label\": \"react state syntax permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"React State Syntax\"), \"\\n\", React.createElement(_components.p, null, \"在上面的代码里，我们已经用到了人生中第一个 React Hook\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"简单来讲，这里使用了数组的结构赋值。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useState()</code>\"\n    }\n  }), \" 函数为我们提供了两个东西:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"一个保存状态值的变量，在本例中称为count;\"), \"\\n\", React.createElement(_components.li, null, \"一个更改值的函数，在本例中称为setCount。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"当然，你可以为这两个东西起任何你想要的名字。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>myCount<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"而且，你也可以在你的代码中像使用正常变量/函数一样去用他们。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">CounterWithHooks</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h2</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">This is a counter using hooks</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h2</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click to Increment</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t\\t</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"注意最上面的的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useState</code>\"\n    }\n  }), \" Hook。 我们声明、结构了2个东西：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"counter：是用来保存状态的\"), \"\\n\", React.createElement(_components.li, null, \"setCounter：是用来更改计数器变量的函数\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"往下看代码，您会看到这一行：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这是一个使用 Hooks 变量的例子。在JSX中，我们将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count</code>\"\n    }\n  }), \" 变量放在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{}</code>\"\n    }\n  }), \" 中，然后作为JavaScript执行它，最后将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count</code>\"\n    }\n  }), \" 的值将展示在页面上。\"), \"\\n\", React.createElement(_components.p, null, \"我们来对照一下我们之前在类组件中使用状态的方式：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"你会发现，我么再也不需要关注 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 的使用了，这使我们的编码工作变得更加轻松了。\"), \"\\n\", React.createElement(_components.p, null, \"比如，当你没定义 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{count}</code>\"\n    }\n  }), \" 的时候，VS Code编辑器直接就给你报警告了，你就更早的发现错误。 但是在运行代码之前，VS Code 可不会知道 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{this.state.count}</code>\"\n    }\n  }), \" 是不是定义了。\"), \"\\n\", React.createElement(_components.p, null, \"我们继续往下看\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click to Increment</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在这行代码中，我们使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setCount</code>\"\n    }\n  }), \" 函数来更改 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count</code>\"\n    }\n  }), \" 变量。\"), \"\\n\", React.createElement(_components.p, null, \"单击按钮的时侯，我们把 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count</code>\"\n    }\n  }), \" 变量更新为1。由于状态变化，因此会触发视图重新渲染，React 会用新的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count </code>\"\n    }\n  }), \"值为我们更新视图。 真香！\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"那我怎么给数据一个初始值呢\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%82%A3%E6%88%91%E6%80%8E%E4%B9%88%E7%BB%99%E6%95%B0%E6%8D%AE%E4%B8%80%E4%B8%AA%E5%88%9D%E5%A7%8B%E5%80%BC%E5%91%A2\",\n    \"aria-label\": \"那我怎么给数据一个初始值呢 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"那我怎么给数据一个初始值呢？\"), \"\\n\", React.createElement(_components.p, null, \"您可以通过给\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useState()</code>\"\n    }\n  }), \"传递参数来设置初始状态。 可以是一个硬编码的值：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"或者你也可以用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props</code>\"\n    }\n  }), \" 传进来的值作为初始值：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>initialValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"不论你的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props.initialValue</code>\"\n    }\n  }), \"是啥，都会赋值给 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count</code>\"\n    }\n  }), \" 作为初始值。\"), \"\\n\", React.createElement(_components.p, null, \"总结一下：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useState</code>\"\n    }\n  }), \" 最爽的地方在于，你可以像使用正常变量、函数一样处理你的状态。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"那如果我有多个状态数据咋办\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%82%A3%E5%A6%82%E6%9E%9C%E6%88%91%E6%9C%89%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E5%92%8B%E5%8A%9E\",\n    \"aria-label\": \"那如果我有多个状态数据咋办 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"那如果我有多个状态数据咋办?\"), \"\\n\", React.createElement(_components.p, null, \"这是就是Hooks另外一个牛逼的地方了，在组件里，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useState</code>\"\n    }\n  }), \"你想用多少次，就用多少次：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>initialValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>title<span class=\\\"token punctuation\\\">,</span> setTitle<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"This is my title\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>age<span class=\\\"token punctuation\\\">,</span> setAge<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如你所见，我们现在有3个独立的状态对象。例如，如果我们想更新年龄，只需调用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setAge()</code>\"\n    }\n  }), \"函数。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">count</code>\"\n    }\n  }), \"和\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">title</code>\"\n    }\n  }), \"也是一样。我们不再受制于旧的笨重的类组件方式——用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setState()</code>\"\n    }\n  }), \"来管理一个超大的状态对象.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">count</span><span class=\\\"token operator\\\">:</span> props<span class=\\\"token punctuation\\\">.</span>initialValue<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">title</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"This is my title\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">age</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">25</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"那数据更新的时候我要做一些事情怎么做\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%82%A3%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%B6%E5%80%99%E6%88%91%E8%A6%81%E5%81%9A%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85%E6%80%8E%E4%B9%88%E5%81%9A\",\n    \"aria-label\": \"那数据更新的时候我要做一些事情怎么做 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"那数据更新的时候，我要做一些事情怎么做？\"), \"\\n\", React.createElement(_components.p, null, \"在使用函数组件 + React Hooks 这种模式下，我们再也不用去管什么生命周期了，什么 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">componentDidMount</code>\"\n    }\n  }), \"、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">componentDidUpdate</code>\"\n    }\n  }), \"都可以统统见鬼去了。\"), \"\\n\", React.createElement(_components.p, null, \"你可能会问，那我用啥？？？别慌，兄弟！ React 给我们提供了另外一个钩子来干这事儿。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"useeffect\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#useeffect\",\n    \"aria-label\": \"useeffect permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"useEffect\"), \"\\n\", React.createElement(_components.p, null, \"效果钩子 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" 是我们处理“副作用”的地方。\"), \"\\n\", React.createElement(_components.p, null, \"呃,副作用？那是啥?\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"副作用\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%89%AF%E4%BD%9C%E7%94%A8\",\n    \"aria-label\": \"副作用 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"副作用\"), \"\\n\", React.createElement(_components.p, null, \"那我们就先偏离一下正题，讨论一下副作用到底是什么。这有助于我们理解 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect()</code>\"\n    }\n  }), \" 的作用以及为什么他很有用。\"), \"\\n\", React.createElement(_components.p, null, \"一个你看不懂的无聊的正规解释应该是：\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"​\\t“在编程中，副作用是指在程序处理过程改变了程序范围之外的变量”\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"用 React 术语来说，副作用其实意味着“当组件的变量或状态因某些外部事物而改变”。 例如：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"组件接受了一个改变组件本身状态的props\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"当组件进行接口调用并在接口返回结果是执行了某些操作（例如，更改了组件的状态）\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"那么为什么称之为副作用呢？\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, React.createElement(_components.strong, null, \"我们不能确定这些代码的执行结果是什么\")), \"。 我们永远无法百分百确定我们的组件会接收到什么样的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props </code>\"\n    }\n  }), \"，也无法确定接口调用返回的结果数据是什么。 而且，我们无法确定这将如何影响我们的组件。\"), \"\\n\", React.createElement(_components.p, null, \"当然，我们也可以编写代码校验、处理错误等，但是我们最终还是不能确定这样的事情带来的副作用是什么。\"), \"\\n\", React.createElement(_components.p, null, \"所以可以这么说，当组件的状态因为一些外界因素改变的时候，这就可以称作副作用。\"), \"\\n\", React.createElement(_components.p, null, \"好了，我们可以回正题了。继续来看\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \"这个Hook。\"), \"\\n\", React.createElement(_components.p, null, \"在使用函数组件时，我们不再使用生命周期钩子函数，例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">componentDidMount</code>\"\n    }\n  }), \"，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">componentDidUpdate</code>\"\n    }\n  }), \"等。因此，可以这么说，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" Hook 代替了之前我们用到的React钩子函数。\"), \"\\n\", React.createElement(_components.p, null, \"让我们比较一下基于类的组件和\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" Hooks的使用方式\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'I have just mounted!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Insert JSX here</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"用了\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \"之后\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">App</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'I have just mounted!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Insert JSX here</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在继续往下之前，我们必须要知道一件事儿，在默认情况下，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" Hook 在每次渲染和重新渲染时都会执行。\"), \"\\n\", React.createElement(_components.p, null, \"因此，只要组件中的状态发生变化或组件收到新的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props</code>\"\n    }\n  }), \"时，组件都会重新渲染并导致`useEffect Hook 再次运行。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"能不能只执行一次useeffect--就像-componentdidmount-一样\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%83%BD%E4%B8%8D%E8%83%BD%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1useeffect--%E5%B0%B1%E5%83%8F-componentdidmount-%E4%B8%80%E6%A0%B7\",\n    \"aria-label\": \"能不能只执行一次useeffect  就像 componentdidmount 一样 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"能不能只执行一次useEffect  (就像 componentDidMount 一样)\"), \"\\n\", React.createElement(_components.p, null, \"如果 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" Hook 在组件每次渲染时都运行，那么我们怎么才能做到 Hook 在挂载组件时仅运行一次？\"), \"\\n\", React.createElement(_components.p, null, \"例如，如果组件从接口获取数据，我们肯定不希望每次重新渲染组件时都去重新请求下数据吧？\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect()</code>\"\n    }\n  }), \" 钩子接受第二个参数，是一个数组，其中包含导致 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" 钩子运行的依赖项的列表。当这些依赖项更改时，它将触发 Effect Hook。如果想要只运行一次 Effect Hook，那直接给他传递一个空数组，就OK啦！！\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'This only runs once'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这就意味着 useEffect Hook 将在第一次渲染时正常运行。然而，当你的组件重新渲染时，useEffect 会想 “好吧，我已经运行了，数组中啥也没有，我没啥依赖项，谁变都跟我没关系了，所以我不必再运行了。” 然后就什么也不做了。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"总结： 空数组就意味着useEffect Hook只在挂载时运行一次\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"当有内容更新时使用effect-就像componentdidupdate一样\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%BD%93%E6%9C%89%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0%E6%97%B6%E4%BD%BF%E7%94%A8effect-%E5%B0%B1%E5%83%8Fcomponentdidupdate%E4%B8%80%E6%A0%B7\",\n    \"aria-label\": \"当有内容更新时使用effect 就像componentdidupdate一样 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"当有内容更新时使用effect (就像componentDidUpdate一样)\"), \"\\n\", React.createElement(_components.p, null, \"我们已经介绍了如何确保 useEffect Hook仅运行一次，但是当我们的组件收到新的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props</code>\"\n    }\n  }), \" 时该怎么办？ 或者我们要在状态更改时运行一些代码？ 其实Hooks 也能处理！\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"> <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name props has changed!\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"请注意，这次我们如何将东西传递给useEffect数组的，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props.name</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"在这种情况下，useEffect Hook 将像往常一样在首次加载时运行。 每当您的组件从其父组件收到新的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props.name</code>\"\n    }\n  }), \"时，都会触发useEffect Hook，并且运行其中的代码。\"), \"\\n\", React.createElement(_components.p, null, \"我们也可以使用状态变量来做同样的事情：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">,</span> setName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Chris\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name state variable has changed!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"每当\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">name</code>\"\n    }\n  }), \"发生变化时，组件就会重新渲染 ，useEffect Hook 就会运行并输出消息。而且因为这是一个数组，我们其实可以向它添加多个东西：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">,</span> setName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Chris\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Something has changed!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这样，当 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">name</code>\"\n    }\n  }), \" 状态变量更改或 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">props.name</code>\"\n    }\n  }), \" 更改时，useEffect Hook 都将运行并显示控制台消息。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"那我们能用componentwillunmount吗\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%82%A3%E6%88%91%E4%BB%AC%E8%83%BD%E7%94%A8componentwillunmount%E5%90%97\",\n    \"aria-label\": \"那我们能用componentwillunmount吗 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"那我们能用componentWillUnmount吗？\"), \"\\n\", React.createElement(_components.p, null, \"想要在组件即将卸载时运行一个Hook，我们只需从\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">useEffect</code>\"\n    }\n  }), \" Hook 返回一个函数\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'running effect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'unmounting'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"那我们可以多个不同的-hooks-一起使用吗\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%82%A3%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84-hooks-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E5%90%97\",\n    \"aria-label\": \"那我们可以多个不同的 hooks 一起使用吗 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"那我们可以多个不同的 Hooks 一起使用吗？\"), \"\\n\", React.createElement(_components.p, null, \"当然! 你可以在组件中使用任意数量的Hooks，并根据需要混合使用\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">,</span> setName<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>age<span class=\\\"token punctuation\\\">,</span> setAge<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"component has changed\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">(</span>\\n\\t\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Some jsx here...</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n\\t)\\n}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"小结--接下来干啥呢\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%B0%8F%E7%BB%93--%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%B9%B2%E5%95%A5%E5%91%A2\",\n    \"aria-label\": \"小结  接下来干啥呢 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"小结- 接下来干啥呢？\"), \"\\n\", React.createElement(_components.p, null, \"你这不已经学会React Hooks了么，Hooks允许我们使用老式的JavaScript函数来创建更简单的React组件，并减少大量代码。\"), \"\\n\", React.createElement(_components.p, null, \"接下来，手不痒痒么？当然是自己赶紧动手那Hooks做项目体验去啊！\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/给新手看的React-Hooks教程.md\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport Layout from \"../components/layout\";\nimport TOC from \"../components/toc\";\nimport {useEffect} from \"react\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Giscus from \"@giscus/react\";\nimport mediumZoom from \"medium-zoom\";\nconst BlogPostTemplate = _ref => {\n  let {data, pageContext, children} = _ref;\n  const post = data.mdx;\n  const {title: siteTitle, postCopyright, author, siteUrl} = data.site.siteMetadata;\n  const {previous, next} = pageContext;\n  const isDarkmode = useSelector(state => state.isDarkMode);\n  useEffect(() => {\n    mediumZoom(\".post-content img\", {\n      background: \"#292a2d\"\n    });\n  }, []);\n  return React.createElement(Layout, {\n    isFocus: false,\n    title: post.frontmatter.title,\n    description: post.frontmatter.description\n  }, React.createElement(\"div\", {\n    className: \"container\"\n  }, React.createElement(\"article\", {\n    className: \"post-wrap\"\n  }, React.createElement(\"header\", {\n    className: \"post-header\"\n  }, React.createElement(\"h1\", {\n    className: \"post-title\"\n  }, post.frontmatter.title), React.createElement(\"div\", {\n    className: \"post-meta\"\n  }, data.site.siteMetadata.author.name, \"\\xA0 / \\xA0\", React.createElement(\"span\", {\n    className: \"post-time\"\n  }, post.frontmatter.date), \"\\xA0\")), React.createElement(\"div\", {\n    className: \"post-content\"\n  }, React.createElement(MDXProvider, null, children)), postCopyright && React.createElement(\"section\", {\n    className: \"post-copyright\"\n  }, React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Author:\\xA0\"), React.createElement(\"span\", null, author.name)), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Permalink:\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: siteUrl + post.fields.slug\n  }, \" \", siteUrl + post.fields.slug, \" \"))), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"License:\\xA0\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: \"http://creativecommons.org/licenses/by-nc/4.0/\"\n  }, \"CC-BY-NC-4.0\")))), React.createElement(\"section\", {\n    className: \"post-tags\"\n  }, React.createElement(\"div\", null, React.createElement(\"span\", null, \"Tag(s):\"), React.createElement(\"span\", {\n    className: \"tag\"\n  }, post.frontmatter.tags.length !== 0 && post.frontmatter.tags.map(item => {\n    return React.createElement(\"a\", {\n      key: item,\n      href: `/tag/${item}`\n    }, \"#\", item);\n  }))), React.createElement(\"div\", null, React.createElement(\"a\", {\n    href: \"#/\",\n    onClick: () => {\n      window.history.back();\n    }\n  }, \"back\"), React.createElement(\"span\", null, \" \\xB7 \"), React.createElement(\"a\", {\n    href: data.site.siteMetadata.siteUrl\n  }, \"home\"))), React.createElement(\"section\", {\n    className: \"post-nav\"\n  }, previous ? React.createElement(\"a\", {\n    className: \"prev\",\n    rel: \"prev\",\n    href: previous.fields.slug\n  }, previous.frontmatter.title) : React.createElement(\"span\", {\n    className: \"prev\"\n  }, \"No More\"), next ? React.createElement(\"a\", {\n    className: \"next\",\n    rel: \"next\",\n    href: next.fields.slug\n  }, next.frontmatter.title) : React.createElement(\"span\", {\n    className: \"next\"\n  }, \"No More\")), React.createElement(Giscus, {\n    id: \"comment\",\n    repo: \"w1zd/w1zd.github.io\",\n    repoId: \"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=\",\n    category: \"Announcements\",\n    categoryId: \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy\",\n    mapping: \"og:title\",\n    theme: `https://wizd.dev/giscus-themes/${isDarkmode ? \"dark\" : \"light\"}.css`,\n    reactionsEnabled: \"1\",\n    loading: \"lazy\"\n  }), post.frontmatter.toc && React.createElement(TOC, null))));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"60074105\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","img","h2","a","span","ul","li","h3","blockquote","em","strong","_provideComponents","components","React","src","alt","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","BlogPostTemplate","_ref","data","pageContext","children","post","mdx","title","siteTitle","postCopyright","author","siteUrl","site","siteMetadata","previous","next","isDarkmode","useSelector","state","isDarkMode","useEffect","mediumZoom","background","Layout","isFocus","frontmatter","description","name","date","MDXProvider","fields","slug","tags","length","map","item","key","onClick","window","history","back","rel","Giscus","repo","repoId","category","categoryId","mapping","theme","reactionsEnabled","loading","toc","TOC","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}