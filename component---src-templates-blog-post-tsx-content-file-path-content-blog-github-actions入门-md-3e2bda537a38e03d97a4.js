"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[2022],{7725:function(n,a,e){e.r(a),e.d(a,{default:function(){return m}});var s=e(8453),t=e(6540);function l(n){const a=Object.assign({img:"img",p:"p",span:"span",h2:"h2",a:"a",blockquote:"blockquote",ul:"ul",li:"li",h3:"h3",ol:"ol"},(0,s.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-12-ff8131d6e5212fdddaddb1f20be4e03e-github-actions-fd25c1.png",alt:"github-actions"}),"\n",t.createElement(a.p,null,"这个博客站是我自己用 Gatsby 随便拼凑了一下造出来的，前几天发现好久都没有更新博客了，心里还是很愧疚的 🤣，那就更新一篇吧。"),"\n",t.createElement(a.p,null,"之前用 Gatsby 写博客要么是在 OS 系统下，要么是在 Linux 系统下，从来没用过 Windows。但是由于工作环境的变化，手头只有 Windows 可用，讲道理这种纯前端该没什么平台限制，但是在我一通 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">npm</code>'}})," 命令之后，博客并没有按照我的预期正常跑起来，这里不对这个问题做深究（Windows 文件路径大小写不敏感，而且盘符根目录都是大写字母 C D E，会导致 Gatsby 脚手架部分功能异常）。"),"\n",t.createElement(a.p,null,"经过一番努力之后，终于正常跑起来了，但是由于使用的 Windows 系统配置特别差，CPU 动不动就要飙到 100%，Gatsby 最终生成静态站点的过程及其痛苦。"),"\n",t.createElement(a.p,null,"由于所在网络环境的问题，最终将生成的静态内容推送到 Github Pages 服务的过程也是很糟心 😢。"),"\n",t.createElement(a.p,null,"遂决定，使用 Github Actions 自动打包自动部署。趁有空花了一下午时间，把 Github Lab 中的 Github actions 的内容都过了一遍，这里就做个简单的记录。"),"\n",t.createElement(a.h2,{id:"github-actions-简介",style:{position:"relative"}},t.createElement(a.a,{href:"#github-actions-%E7%AE%80%E4%BB%8B","aria-label":"github actions 简介 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Github Actions 简介"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow."),"\n"),"\n",t.createElement(a.p,null,"Github Actions 可以粗略的理解为集成在 Github 中的 CI/CD 服务， 和 Jenkins、Travis CI 等类似。"),"\n",t.createElement(a.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-29-98b9955a8eb015e58811a8ac81a195d3-cicd-749ce1.png",alt:"ci/cd"}),"\n",t.createElement(a.p,null,"Github Actions 目前可以用来做以下这些事情："),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"自动化测试（持续集成）"),"\n",t.createElement(a.li,null,"持续交付和部署"),"\n",t.createElement(a.li,null,"触发 Code Review"),"\n",t.createElement(a.li,null,"管理分支"),"\n",t.createElement(a.li,null,"分类 Issue 和 PR"),"\n"),"\n",t.createElement(a.p,null,"简单的来说，就是之前我们需要在本地电脑上进行的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">npm run build</code>'}})," ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">npm run test</code>'}}),"，都可以通过使用 Github Actions 在云平台中进行，而且在打包和测试完成之后，还能自动帮你进行部署。"),"\n",t.createElement(a.p,null,"这就意味着，我们不需要自己购买以及配置相关的构建服务器，Github 提供了免费云环境供大家使用。而且，由于是和 Github 集成的，所有的工作流都可以设置 Github 相关事件触发（push, issues, label, pull request 等等）。"),"\n",t.createElement(a.p,null,"在 Gihub 中有一个 ",t.createElement(a.a,{href:"https://github.com/marketplace?type=actions"},"Action 市场"),"，还有别人整理的一个 ",t.createElement(a.a,{href:"https://github.com/sdras/awesome-actions"},"Awesome Acitons"),"，里面有很多别人已经写好的 Action，可以直接拿过来用，不要太爽。"),"\n",t.createElement(a.h2,{id:"快速入门",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8","aria-label":"快速入门 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"快速入门"),"\n",t.createElement(a.h3,{id:"准备工作",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C","aria-label":"准备工作 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"准备工作"),"\n",t.createElement(a.p,null,"你需要一个 Github 仓库，新建一个仓库，或者使用一个已有的仓库都可以。"),"\n",t.createElement(a.h3,{id:"创建你的第一个-workflow-文件",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA-workflow-%E6%96%87%E4%BB%B6","aria-label":"创建你的第一个 workflow 文件 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"创建你的第一个 workflow 文件"),"\n",t.createElement(a.p,null,"在你的本地仓库根目录创建 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.github/workflows</code>'}})," 文件夹，使用 Windows 操作系统的同学自行创建，Linux 操作系统的同学可以使用下面的命令。（当然你也可以不使用本地仓库，直接在 Github 网页中进行创建文件的操作）"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p .github/workflows\n<span class="token builtin class-name">cd</span> .github/workflows</code></pre></div>'}}),"\n",t.createElement(a.p,null,"创建文件 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">your-first-workflow.yml</code>'}})),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">touch</span> your-first-workflow.yml</code></pre></div>'}}),"\n",t.createElement(a.p,null,"将下面的内容复制到你的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">your-first-workflow.yml</code>'}})," 文件中，并保存。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Actions Demo\n<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">Explore-GitHub-Actions</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "🎉 你的工作流被 $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.event_name <span class="token punctuation">}</span><span class="token punctuation">}</span> 事件自动触发了."\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "🐧 本工作流运行在 Github 托管的 $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.os <span class="token punctuation">}</span><span class="token punctuation">}</span> 服务器上<span class="token tag">!</span>"\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "🔎 你的分支名是 $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.ref <span class="token punctuation">}</span><span class="token punctuation">}</span>，你的 github 仓库是 $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.repository <span class="token punctuation">}</span><span class="token punctuation">}</span>."\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Check out repository code\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "💡 仓库 $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.repository <span class="token punctuation">}</span><span class="token punctuation">}</span> 已经被克隆到 ubuntu 了"\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "🖥️ 工作流已经准备好在 ubuntu 上对你的代码进行测试了"\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> List files in the repository\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          ls ${{ github.workspace }}</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "🍏 当前工作流的状态是 $<span class="token punctuation">{</span><span class="token punctuation">{</span> job.status <span class="token punctuation">}</span><span class="token punctuation">}</span>."</code></pre></div>'}}),"\n",t.createElement(a.p,null,"将当前改动推送到你的 Github 仓库中。（如果你是 Github 页面直接新建文件操作的直接跳过）"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> push -u 你的仓库地址 master</code></pre></div>'}}),"\n",t.createElement(a.p,null,"然后打开 Github 中的 Actions 页面，你会发现你的工作流已经在运行了。"),"\n",t.createElement(a.h2,{id:"github-actions-基本概念",style:{position:"relative"}},t.createElement(a.a,{href:"#github-actions-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5","aria-label":"github actions 基本概念 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Github Actions 基本概念"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"workflow(工作流)：每个 workflow 文件就代表一个工作流，会在特定的条件下触发。"),"\n",t.createElement(a.li,null,"jobs(工作)：一个工作流中可以包含很多工作，字面意思很好理解（乔布斯哈哈哈）"),"\n",t.createElement(a.li,null,"steps(步骤)：每个工作可以有很多步骤组成"),"\n",t.createElement(a.li,null,"action(行为)：每个步骤中可以执行一个或多个行为（或者叫命令更好？实在不知道怎么翻译更好 😅）"),"\n"),"\n",t.createElement(a.h2,{id:"workflow-文件详解",style:{position:"relative"}},t.createElement(a.a,{href:"#workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3","aria-label":"workflow 文件详解 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"workflow 文件详解"),"\n",t.createElement(a.h3,{id:"name",style:{position:"relative"}},t.createElement(a.a,{href:"#name","aria-label":"name permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"name"),"\n",t.createElement(a.p,null,"工作流的名称，会展示在你的 Gihub Actions 页面中， 如果你不给名字，默认会使用你的文件路径"),"\n",t.createElement(a.p,null,"比如快速入门中，我们的工作流名称就是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GitHub Actions Demo</code>'}})),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Actions Demo</code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"on",style:{position:"relative"}},t.createElement(a.a,{href:"#on","aria-label":"on permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"on"),"\n",t.createElement(a.p,null,"触发你工作流的 Gihub 事件名称，可以是单个事件，也可以是个事件数组。\n",t.createElement(a.a,{href:"https://docs.github.com/en/actions/reference/events-that-trigger-workflows"},"能触发工作的流的事件看这里")),"\n",t.createElement(a.p,null,"快速入门中，我们的设置的触发事件是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">push</code>'}}),"，那就意味着，当我们向 Github 仓库中推送内容的时候，就会自动触发我们的工作流。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>\n<span class="token comment"># 你也可以用如下的形式</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span> push</code></pre></div>'}}),"\n",t.createElement(a.p,null,"我们也可以设置在指定的分支上 push 时才触发"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> master</code></pre></div>'}}),"\n",t.createElement(a.p,null,"我们还可以设置让工作流定时执行，这就很强了！比如你写个爬虫，定时去跑，当然这属于薅羊毛操作，之前好像有不少人因为不明原因被取消了使用资格。正常情况下不会有这样的事情，官方的限制可以看看",t.createElement(a.a,{href:"https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration"},"这里"),"。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">"*/30 5,17 * * *"</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"上面的定时计划是，在每天的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5:30</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">17:30</code>'}})," 自动执行，这里使用的时间计划是",t.createElement(a.a,{href:"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07"},"POSIX cron syntax"),"，感兴趣的同学自行了解。"),"\n",t.createElement(a.h3,{id:"jobs",style:{position:"relative"}},t.createElement(a.a,{href:"#jobs","aria-label":"jobs permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"jobs"),"\n",t.createElement(a.p,null,"上面关于工作流整体的配置基本 ok 了，那么接下来就是具体的工作流里面要做的事情了。",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jobs</code>'}})," 就是用来设置当前工作流中具体的工作内容的。"),"\n",t.createElement(a.p,null,"每个工作需要有自己的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">id</code>'}}),"，同时还需要一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}}),":"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span> <span class="token comment"># 这里 job1 就是 id</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1 <span class="token comment"># 这里是 job 的 name</span>\n  <span class="token key atrule">job2</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job</code></pre></div>'}}),"\n",t.createElement(a.p,null,"当有多项工作的时候，避免不了的会出现工作项之间的依赖关系，比如 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job2</code>'}})," 要在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job1</code>'}})," 完成之后才能执行，那我们就需要为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job2</code>'}})," 设置 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">needs</code>'}})," 选项："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span> <span class="token comment"># 这里 job1 就是 id</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1 <span class="token comment"># 这里是 job 的 name</span>\n  <span class="token key atrule">job2</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job\n    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1 <span class="token comment"># 注意这里使用的是 id，不是 name</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"在执行构建任务或者测试任务时，需要指定对应的执行环境，也就是对应的操作系统，我们可以通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">runs-on</code>'}})," 来指定当前 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jobs</code>'}})," 需要执行的环境。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</code></pre></div>'}}),"\n",t.createElement(a.p,null,"目前 Github 能提供的环境如下："),"\n",t.createElement(a.p,null,"| Virtual environment  | YAML workflow label            |\n| -------------------- | ------------------------------ |\n| Windows Server 2019  | windows-latest or windows-2019 |\n| Ubuntu 20.04         | ubuntu-latest or ubuntu-20.04  |\n| Ubuntu 18.04         | ubuntu-18.04                   |\n| Ubuntu 16.04         | ubuntu-16.04                   |\n| macOS Big Sur 11.0   | macos-11.0                     |\n| macOS Catalina 10.15 | macos-latest or macos-10.15    |"),"\n",t.createElement(a.p,null,"有的时候需要在不同环境下测试一套代码，有同学可能会想，那我是不是要来多个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job</code>'}})," 来在不同的环境中进行操作。其实不需要，Github Action 帮我们解决了这个问题，使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">strategy</code>'}}),"，就可以让当前 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job</code>'}})," 在不同环境中运行。"),"\n",t.createElement(a.p,null,"下面的配置就可以让我们在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">unbuntu-latest</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">windows-2016</code>'}})," 中分别执行 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job1</code>'}}),"，而且！而且！而且！会分别在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">node 12.x</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">node 14.x</code>'}})," 的版本中执行。 也就是我们的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job1</code>'}})," 最终会执行 4 次哦！"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>\n        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">,</span> windows<span class="token punctuation">-</span><span class="token number">2016</span><span class="token punctuation">]</span>\n        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>12.x<span class="token punctuation">,</span> 14.x<span class="token punctuation">]</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"steps",style:{position:"relative"}},t.createElement(a.a,{href:"#steps","aria-label":"steps permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"steps"),"\n",t.createElement(a.p,null,"每个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job</code>'}})," 中需要进行的操作，我们需要使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">steps</code>'}})," 来定义。"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">step</code>'}})," 中也有 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}})," 来定义每一步的名称，用来声明这一步在做什么。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>\n        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">,</span> windows<span class="token punctuation">-</span><span class="token number">2016</span><span class="token punctuation">]</span>\n        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>12.x<span class="token punctuation">,</span> 14.x<span class="token punctuation">]</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Print a greeting</code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">step</code>'}})," 中最关键的是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">run</code>'}}),"，用来执行具体的命令。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>\n        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">,</span> windows<span class="token punctuation">-</span><span class="token number">2016</span><span class="token punctuation">]</span>\n        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>12.x<span class="token punctuation">,</span> 14.x<span class="token punctuation">]</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Print a greeting\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          echo Hello World.</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">step</code>'}})," 中还可以添加环境变量 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">env</code>'}}),"，这样在执行的命令中可以使用这些环境变量，就像下面这样。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>\n        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">,</span> windows<span class="token punctuation">-</span><span class="token number">2016</span><span class="token punctuation">]</span>\n        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>12.x<span class="token punctuation">,</span> 14.x<span class="token punctuation">]</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Print a greeting\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token key atrule">MY_VAR</span><span class="token punctuation">:</span> Hi there<span class="token tag">!</span> My name is\n          <span class="token key atrule">FIRST_NAME</span><span class="token punctuation">:</span> Mona\n          <span class="token key atrule">MIDDLE_NAME</span><span class="token punctuation">:</span> The\n          <span class="token key atrule">LAST_NAME</span><span class="token punctuation">:</span> Octocat\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"除了执行指定的命令外，我们也可以使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">uses</code>'}})," 在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">step</code>'}})," 中调用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">action</code>'}}),"（",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">aciton</code>'}}),"可以自己写，也可以去市场找）。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">job1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> This is the job1\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>\n        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">,</span> windows<span class="token punctuation">-</span><span class="token number">2016</span><span class="token punctuation">]</span>\n        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>12.x<span class="token punctuation">,</span> 14.x<span class="token punctuation">]</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2 <span class="token comment"># 这里就是使用市场中提供的 action 将当前的仓库代码检出到虚拟机</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">{</span><span class="token punctuation">{</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> ./.github/actions/setup<span class="token punctuation">-</span>node <span class="token comment"># 这里是使用自己写的 action 安装 node 环境（实际不存在，只是给大家演示写法，实际使用的还是市场提供的 actions/setup-node@v1）</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span> <span class="token comment"># with 为这个 action 提供相应的参数</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> npm install<span class="token punctuation">,</span> and test\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          npm install\n          npm test</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"使用-github-actions-发布-gatsby-到-github-pages",style:{position:"relative"}},t.createElement(a.a,{href:"#%E4%BD%BF%E7%94%A8-github-actions-%E5%8F%91%E5%B8%83-gatsby-%E5%88%B0-github-pages","aria-label":"使用 github actions 发布 gatsby 到 github pages permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"使用 Github Actions 发布 Gatsby 到 Github Pages"),"\n",t.createElement(a.p,null,"本来打算自己写一个发布的 action，结果发现已经有人已经造好了轮子，那我们就在巨人肩上玩玩吧。"),"\n",t.createElement(a.p,null,"下面是我完整的 workflow 文件。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Gatsby Publish\n\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> master <span class="token comment"># master 分支是我得 Gatsby 代码</span>\n\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">build</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1 <span class="token comment"># 这里还是使用市场提供的 action 检出代码到虚拟机</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> enriikke/gatsby<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>action@v2 <span class="token comment"># 这里就是巨人造好得轮子，可以构建 Gatsby 静态页面，并且发布到 Github Pages</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">access-token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 我们需要提供相应的参数，这个 token 提供我会在下面讲到</span>\n          <span class="token key atrule">deploy-branch</span><span class="token punctuation">:</span> page <span class="token comment"># 这里是指定提供 Github Pages 的分支，最终构件好的静态页面就会发布到这个分支</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"整个 workflow 运行流程如下："),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"本地写好文章后，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">push</code>'}})," 到 github"),"\n",t.createElement(a.li,null,"由于 workflow 中 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">on: push</code>'}})," 的存在，会自动触发该工作流"),"\n",t.createElement(a.li,null,"当前 workflow 只有一个job，在虚拟机环境 ubuntu-latest 中"),"\n",t.createElement(a.li,null,"第一步使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">actions/checkout</code>'}})," 获取源码"),"\n",t.createElement(a.li,null,"第二步使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">enriikke/gatsby-gh-pages-action@v2</code>'}})," 构建静态站点并进行部署"),"\n"),"\n",t.createElement(a.p,null,"也就是在我们每次本地写好 Markdown 文章之后，推送到 Github，我们的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">workflow</code>'}})," 就会自动帮我们生成静态页面，并且发布到 Github Pages。"),"\n",t.createElement(a.h3,{id:"-secretsaccess_token-",style:{position:"relative"}},t.createElement(a.a,{href:"#-secretsaccess_token-","aria-label":" secretsaccess_token  permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"${{ secrets.ACCESS_TOKEN }}"),"\n",t.createElement(a.p,null,"在上面的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">steps</code>'}})," 第二步中，我们用到了一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">${{ secrets.ACCESS_TOKEN }}</code>'}}),"， 这是由于该 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">action</code>'}})," 需要将构件好的静态页面 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">push</code>'}})," 到我们的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">page</code>'}})," 分支，所以需要 Github 的访问权限，我们需要",t.createElement(a.a,{href:"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token"},"自己生成 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Access_Token</code>'}})),"，并在项目设置页面中提供。"),"\n",t.createElement(a.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-36-677e12d2d7b9db2aaab9fb3070b7329d-access_token-aba4e5.png",alt:"access_token"}),"\n",t.createElement(a.h2,{id:"总结",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%80%BB%E7%BB%93","aria-label":"总结 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"总结"),"\n",t.createElement(a.p,null,"本文只是讲解了一些日常用法，关于 Github Actions 更深层次的学习，大家可以参考",t.createElement(a.a,{href:"https://docs.github.com/en/actions/learn-github-actions"},"官网文档"),"。"),"\n",t.createElement(a.p,null,"Github Actions 使得定制开发工作流如此简单，在 DevOps 方面还有很多的可能性，必然会是日后发展的趋势（当然我是说它这种模式，毕竟，它是要收钱的🤣 🤣 🤣）。"))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.RP)(),n.components);return a?t.createElement(a,n,t.createElement(l,n)):l(n)},o=e(1468),p=e(7947),u=e(1327),r=e(2171),i=e(9739);const k=n=>{let{data:a,pageContext:e,children:l}=n;const c=a.mdx,{title:k,postCopyright:m,author:g,siteUrl:h}=a.site.siteMetadata,{previous:d,next:y}=e,E=(0,o.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,i.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(p.A,{isFocus:!1,title:c.frontmatter.title,description:c.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},c.frontmatter.title),t.createElement("div",{className:"post-meta"},a.site.siteMetadata.author.name,"  /  ",t.createElement("span",{className:"post-time"},c.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(s.xA,null,l)),m&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,g.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:h+c.fields.slug}," ",h+c.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==c.frontmatter.tags.length&&c.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},d?t.createElement("a",{className:"prev",rel:"prev",href:d.fields.slug},d.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),y?t.createElement("a",{className:"next",rel:"next",href:y.fields.slug},y.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(r.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${E?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),c.frontmatter.toc&&t.createElement(u.A,null))))};function m(n){return t.createElement(k,n,t.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-github-actions入门-md-3e2bda537a38e03d97a4.js.map