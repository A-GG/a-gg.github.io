"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[5249],{5952:function(n,a,s){s.r(a),s.d(a,{default:function(){return g}});var e=s(8453),t=s(6540);function c(n){const a=Object.assign({p:"p",span:"span",strong:"strong",h2:"h2",a:"a",em:"em",h3:"h3",blockquote:"blockquote"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"JavaScript是解释型的语言，但是他并不是真的在运行的时候逐句的往下解析执行。"),"\n",t.createElement(a.p,null,"我们来看下面这个例子："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Funciton has been called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"在上面这段代码中，函数func的调用是在其声明之前，如果说JavaScript代码真的是逐句的解析执行，那么在第一句调用的时候就会出错，然而事实并非如此，上面的代码可以正常执行，并且alert出来",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Function has been called</code>'}}),"。"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"所以，可以得出结论，JavaScript并非仅在运行时简简单单的逐句解析执行！")),"\n",t.createElement(a.h2,{id:"javascript-预解析",style:{position:"relative"}},t.createElement(a.a,{href:"#javascript-%E9%A2%84%E8%A7%A3%E6%9E%90","aria-label":"javascript 预解析 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"JavaScript 预解析"),"\n",t.createElement(a.p,null,"JavaScript引擎在对JavaScript代码进行解释执行之前，会对JavaScript代码进行预解析，在预解析阶段，会将以关键字",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}}),"和",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">function</code>'}}),"开头的语句块提前进行处理。"),"\n",t.createElement(a.p,null,t.createElement(a.em,null,"关键问题是怎么处理呢？")),"\n",t.createElement(a.p,null,"当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。"),"\n",t.createElement(a.p,null,"重新来看上面的那段代码"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Funciton has been called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"由于JavaScript的预解析机制，上面的代码就等效于："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Funciton has been called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"看完函数声明的提升，再来看一个变量声明提升的例子："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"由于JavaScript的预解析机制，上面这段代码，alert出来的值是",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">undefined</code>'}}),"，如果没有预解析，代码应该会直接报错",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">a is not defined</code>'}}),"，而不是输出值。"),"\n",t.createElement(a.p,null,"Wait a minute, 不是说要提前的吗？那不是应该alert出来1，为什么是",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">undefined</code>'}}),"?"),"\n",t.createElement(a.p,null,"那么在这里有必要说一下",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">声明</code>'}}),"、",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">定义</code>'}}),"、",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">初始化</code>'}}),"的区别。其实这几个概念是C系语言的人应该都比较了解的。"),"\n",t.createElement(a.p,null,"| 行为 | 说明 |\n|--|--|\n|声明|告诉编译器/解析器有这个变量存在,这个行为是不分配内存空间的,在JavaScript中，声明一个变量的操作为：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var a;</code>'}}),"|\n|定义|为变量分配内存空间，在C语言中，一般声明就包含了定义，比如：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">int a;</code>'}}),",但是在JavaScript中，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var a;</code>'}}),"这种形式就只是声明了。|\n|初始化|在定义变量之后，系统为变量分配的空间内存储的值是不确定的，所以需要对这个空间进行初始化，以确保程序的安全性和确定性|\n|赋值|赋值就是变量在分配空间之后的某个时间里，对变量的值进行的刷新操作（修改存储空间内的数据)|"),"\n",t.createElement(a.p,null,"所以我们说的提升，是",t.createElement(a.strong,null,"声明"),"的提升。"),"\n",t.createElement(a.p,null,"那么再回过头看，上面的代码就等效于："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">//这里是声明</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//变量声明之后并未有初始化和赋值操作，所以这里是 undefined</span>\na <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"复杂点的情况分析",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%A4%8D%E6%9D%82%E7%82%B9%E7%9A%84%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90","aria-label":"复杂点的情况分析 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"复杂点的情况分析"),"\n",t.createElement(a.p,null,"通过上一小节的内容，我们对变量、函数声明提升已经有了一个最基本的理解。那么接下来，我们就来分析一些略复杂的情况。"),"\n",t.createElement(a.h3,{id:"函数同名",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%87%BD%E6%95%B0%E5%90%8C%E5%90%8D","aria-label":"函数同名 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"函数同名"),"\n",t.createElement(a.p,null,"观察下面这段代码:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'This is func1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'This is last func1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"输出结果为："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">This is last func1\nThis is last func1</code></pre></div>'}}),"\n",t.createElement(a.p,null,"原因分析：由于预解析机制，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func1</code>'}}),"的声明会被提升，提升之后的代码为："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'This is func1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'This is last func1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"同名的函数，后面的会覆盖前面的，所以两次输出结果都是",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">This is last func1</code>'}}),"。"),"\n",t.createElement(a.h3,{id:"变量和函数同名",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%90%8C%E5%90%8D","aria-label":"变量和函数同名 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"变量和函数同名"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"我们还是来吧预解析之后的代码展现出来:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfoo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"再来看一种"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">num</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"代码执行结果为："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">Uncaught TypeError: num is not a function</code></pre></div>'}}),"\n",t.createElement(a.p,null,"直接上预解析后的代码："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nnum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"预解析是分作用域的",style:{position:"relative"}},t.createElement(a.a,{href:"#%E9%A2%84%E8%A7%A3%E6%9E%90%E6%98%AF%E5%88%86%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84","aria-label":"预解析是分作用域的 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"预解析是分作用域的"),"\n",t.createElement(a.p,null,"声明提升并不是将所有的声明都提升到window对象下面，提升原则是提升到变量运行的环境(作用域)中去。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">{</span> \n    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">\'This is message\'</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// msg未定义</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"还是直接把预解析之后的代码写出来："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">{</span> \n    <span class="token keyword">var</span> msg<span class="token punctuation">;</span>\n    msg <span class="token operator">=</span> <span class="token string">\'This is message\'</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// msg未定义</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"预解析是分段的",style:{position:"relative"}},t.createElement(a.a,{href:"#%E9%A2%84%E8%A7%A3%E6%9E%90%E6%98%AF%E5%88%86%E6%AE%B5%E7%9A%84","aria-label":"预解析是分段的 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"预解析是分段的"),"\n",t.createElement(a.p,null,"分段，其实就分script标签的"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="markup"><pre class="language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 AA2;</span>\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'AA1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'AA2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'AA3\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"在上面代码中，第一个script标签中的两个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func</code>'}}),"进行了提升，第二个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func</code>'}}),"覆盖了第一个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func</code>'}}),"，但是第二个script标签中的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func</code>'}}),"并没有覆盖上面的第二个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func</code>'}}),"。所以说预解析是分段的。"),"\n",t.createElement(a.p,null,"tip:但是要注意，分段只是单纯的针对函数，变量并不会分段预解析。"),"\n",t.createElement(a.h2,{id:"函数表达式并不会被提升",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B9%B6%E4%B8%8D%E4%BC%9A%E8%A2%AB%E6%8F%90%E5%8D%87","aria-label":"函数表达式并不会被提升 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"函数表达式并不会被提升"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我被提升了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里会直接报错，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">func is not a function</code>'}}),"，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> func<span class="token punctuation">;</span>\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我被提升了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"条件式函数声明",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%9D%A1%E4%BB%B6%E5%BC%8F%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E","aria-label":"条件式函数声明 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"条件式函数声明"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"上面这段代码，就是所谓的条件式函数声明，这段代码在Gecko引擎中打印",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">"undefined"</code>'}}),"、",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">"function"</code>'}}),"；而在其他浏览器中则打印",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">"function"</code>'}}),"、",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">"function"</code>'}}),"。"),"\n",t.createElement(a.p,null,"原因在于Gecko加入了ECMAScript以外的一个feature：条件式函数声明。"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"Conditionally created functions Functions can be conditionally declared, that is, a function declaration can be nested within an if statement."),"\n"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"Note: Although this kind of function looks like a function declaration, it is actually an expression (or statement), since it is nested within another statement. See differences between function declarations and function expressions."),"\n"),"\n",t.createElement(a.p,null,"Note中的文字说明，条件式函数声明的处理和函数表达式的处理方式一样，所以条件式函数声明没有声明提升的特性。"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.RP)(),n.components);return a?t.createElement(a,n,t.createElement(c,n)):c(n)},l=s(1468),o=s(7947),u=s(1327),i=s(2171),r=s(9739);const k=n=>{let{data:a,pageContext:s,children:c}=n;const p=a.mdx,{title:k,postCopyright:g,author:d,siteUrl:m}=a.site.siteMetadata,{previous:h,next:E}=s,f=(0,l.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,r.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(o.A,{isFocus:!1,title:p.frontmatter.title,description:p.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},p.frontmatter.title),t.createElement("div",{className:"post-meta"},t.createElement("span",{className:"post-time"},p.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(e.xA,null,c)),g&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,d.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:m+p.fields.slug}," ",m+p.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==p.frontmatter.tags.length&&p.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},h?t.createElement("a",{className:"prev",rel:"prev",href:h.fields.slug},h.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),E?t.createElement("a",{className:"next",rel:"next",href:E.fields.slug},E.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(i.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${f?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),p.frontmatter.toc&&t.createElement(u.A,null))))};function g(n){return t.createElement(k,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-java-script预解析-md-28ebb1fe8bd20f45eff6.js.map