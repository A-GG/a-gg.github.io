"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[3141],{1140:function(n,a,e){e.r(a),e.d(a,{default:function(){return k}});var s=e(8453),t=e(6540);function p(n){const a=Object.assign({h2:"h2",a:"a",span:"span",blockquote:"blockquote",p:"p",h3:"h3"},(0,s.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h2,{id:"题目",style:{position:"relative"}},t.createElement(a.a,{href:"#%E9%A2%98%E7%9B%AE","aria-label":"题目 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"题目"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"给定一个整数数组 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nums</code>'}})," 和一个目标值 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">target</code>'}}),"，请你在该数组中找出和为目标值的那 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">两个</code>'}})," 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。"),"\n"),"\n",t.createElement(a.h2,{id:"示例",style:{position:"relative"}},t.createElement(a.a,{href:"#%E7%A4%BA%E4%BE%8B","aria-label":"示例 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"示例"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="markdown"><pre class="language-markdown"><code class="language-markdown">给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"答案",style:{position:"relative"}},t.createElement(a.a,{href:"#%E7%AD%94%E6%A1%88","aria-label":"答案 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"答案"),"\n",t.createElement(a.p,null,"本题要求其实算是比较简单，只需要我们找出数组中任意两个相加之和等于目标数值的元素的下标即可。\n而且题目说我们可以假设输入只会对应一个答案，也就是说不会出现多组数据相加都能得出目标数值的情况，我们只需要找一组，大大降低了难度。"),"\n",t.createElement(a.h3,{id:"方案一-双层for循环",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%96%B9%E6%A1%88%E4%B8%80-%E5%8F%8C%E5%B1%82for%E5%BE%AA%E7%8E%AF","aria-label":"方案一 双层for循环 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"方案一： 双层for循环"),"\n",t.createElement(a.p,null,"最简单的方案则是双层for循环，进行遍历判断，但是这种方案时间复杂度相对来说比较高 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">O(n^2)</code>'}})),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    retrun <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"方案二-hashmap",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%96%B9%E6%A1%88%E4%BA%8C-hashmap","aria-label":"方案二 hashmap permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"方案二： hashmap"),"\n",t.createElement(a.p,null,"相比上面的双层for循环，这个方法的时间复杂度会比较低 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">O(n)</code>'}})),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hashMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hashMap<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        hashMap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.RP)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},o=e(1468),l=e(7947),r=e(1327),u=e(2171),i=e(9739);const m=n=>{let{data:a,pageContext:e,children:p}=n;const c=a.mdx,{title:m,postCopyright:k,author:h,siteUrl:d}=a.site.siteMetadata,{previous:g,next:E}=e,v=(0,o.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,i.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(l.A,{isFocus:!1,title:c.frontmatter.title,description:c.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},c.frontmatter.title),t.createElement("div",{className:"post-meta"},a.site.siteMetadata.author.name,"  /  ",t.createElement("span",{className:"post-time"},c.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(s.xA,null,p)),k&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,h.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:d+c.fields.slug}," ",d+c.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==c.frontmatter.tags.length&&c.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},g?t.createElement("a",{className:"prev",rel:"prev",href:g.fields.slug},g.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),E?t.createElement("a",{className:"next",rel:"next",href:E.fields.slug},E.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(u.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${v?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),c.frontmatter.toc&&t.createElement(r.A,null))))};function k(n){return t.createElement(m,n,t.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-leet-code刷题系列-两数之和-md-b45d30e884430e319935.js.map