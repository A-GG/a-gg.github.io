{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-blog-block机制详解-md-c3b4c48ef7928bbb800d.js","mappings":"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","sources":["webpack://w1zd-lair/./content/blog/Block机制详解.md","webpack://w1zd-lair/./src/templates/blog-post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"block机制详解\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#block%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3\",\n    \"aria-label\": \"block机制详解 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Block机制详解\"), \"\\n\", React.createElement(_components.p, null, \"我们知道在\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Block</code>\"\n    }\n  }), \"使用中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Block</code>\"\n    }\n  }), \"内部能够读取外部局部变量的值。但我们需要改变这个变量的值时，我们需要给它附加上\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"修饰符。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"另外一个比较多的使用场景是，为了避免某些情况下Block循环引用的问题，我们也可以给相应对象加上\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"修饰符。\"), \"\\n\", React.createElement(_components.p, null, \"为什么不使用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"就不能在\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Block</code>\"\n    }\n  }), \"内部修改外部的局部变量？\"), \"\\n\", React.createElement(_components.p, null, \"我们把以下代码通过 clang -rewrite-objc 源代码文件名重写：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> argc<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span> argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">@</span>autoreleasepool <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">int</span> val <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">^</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">NSLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">@\\\"%d\\\"</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">block</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"可得到如下代码：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">struct</span> __Block_byref_val_0 <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">*</span>__isa<span class=\\\"token punctuation\\\">;</span>\\n   __Block_byref_val_0 <span class=\\\"token operator\\\">*</span>__forwarding<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">int</span> __flags<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">int</span> __size<span class=\\\"token punctuation\\\">;</span>\\n   NSInteger val<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">struct</span> __main_block_impl_0 <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">struct</span> __block_impl impl<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">struct</span> __main_block_desc_0<span class=\\\"token operator\\\">*</span> Desc<span class=\\\"token punctuation\\\">;</span>\\n    __Block_byref_val_0 <span class=\\\"token operator\\\">*</span>val<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// by ref</span>\\n    <span class=\\\"token function\\\">__main_block_impl_0</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">*</span>fp<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">struct</span> __main_block_desc_0 <span class=\\\"token operator\\\">*</span>desc<span class=\\\"token punctuation\\\">,</span> __Block_byref_val_0 <span class=\\\"token operator\\\">*</span>_val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> flags<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">val</span><span class=\\\"token punctuation\\\">(</span>_val<span class=\\\"token operator\\\">-></span>__forwarding<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    impl<span class=\\\"token punctuation\\\">.</span>isa <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>_NSConcreteStackBlock<span class=\\\"token punctuation\\\">;</span>\\n    impl<span class=\\\"token punctuation\\\">.</span>Flags <span class=\\\"token operator\\\">=</span> flags<span class=\\\"token punctuation\\\">;</span>\\n    impl<span class=\\\"token punctuation\\\">.</span>FuncPtr <span class=\\\"token operator\\\">=</span> fp<span class=\\\"token punctuation\\\">;</span>\\n    Desc <span class=\\\"token operator\\\">=</span> desc<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">__main_block_func_0</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0 <span class=\\\"token operator\\\">*</span>__cself<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  __Block_byref_val_0 <span class=\\\"token operator\\\">*</span>val <span class=\\\"token operator\\\">=</span> __cself<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// bound by ref</span>\\n  <span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token operator\\\">-></span>__forwarding<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">__main_block_copy_0</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span>dst<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span>src<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">_Block_object_assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;</span>dst<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>src<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token comment\\\">/*BLOCK_FIELD_IS_BYREF*/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">__main_block_dispose_0</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span>src<span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">_Block_object_dispose</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>src<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token comment\\\">/*BLOCK_FIELD_IS_BYREF*/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">struct</span> __main_block_desc_0 <span class=\\\"token punctuation\\\">{</span>\\n  size_t reserved<span class=\\\"token punctuation\\\">;</span>\\n  size_t Block_size<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>copy<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>dispose<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> \\n__main_block_desc_0_DATA <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">sizeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> __main_block_copy_0<span class=\\\"token punctuation\\\">,</span> __main_block_dispose_0<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> argc<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span> argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">{</span>   \\n    __AtAutoreleasePool __autoreleasepool<span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token function\\\">__attribute__</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">__blocks__</span><span class=\\\"token punctuation\\\">(</span>byref<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> __Block_byref_val_0 val <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>__Block_byref_val_0 <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;</span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">sizeof</span><span class=\\\"token punctuation\\\">(</span>__Block_byref_val_0<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;</span><span class=\\\"token function\\\">__main_block_impl_0</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>__main_block_func_0<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span>__main_block_desc_0_DATA<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>__Block_byref_val_0 <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;</span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">570425344</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>__block_impl <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>__block_impl <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span>FuncPtr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>__block_impl <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">NSLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>NSString <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;</span>__NSConstantStringImpl__val_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_d7fc4b_mi_0<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">.</span>__forwarding<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们发现由\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"修饰的变量变成了一个\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__Block_byref_val_0</code>\"\n    }\n  }), \"结构体类型的实例。该结构体的声明如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">struct</span> __Block_byref_val_0 <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">*</span>__isa<span class=\\\"token punctuation\\\">;</span>\\n   __Block_byref_val_0 <span class=\\\"token operator\\\">*</span>__forwarding<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">int</span> __flags<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">int</span> __size<span class=\\\"token punctuation\\\">;</span>\\n   NSInteger val<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"注意到这个结构体中包含了该实例本身的引用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"。\\n我们从上述被转化的代码中可以看出 Block 本身也一样被转换成了\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__main_block_impl_0</code>\"\n    }\n  }), \"结构体实例，该实例持有\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__Block_byref_val_0</code>\"\n    }\n  }), \"结构体实例的指针。\\n我们再看一下赋值和执行部分代码被转化后的结果：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">__main_block_func_0</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0 <span class=\\\"token operator\\\">*</span>__cself<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  __Block_byref_val_0 <span class=\\\"token operator\\\">*</span>val <span class=\\\"token operator\\\">=</span> __cself<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// bound by ref</span>\\n  <span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token operator\\\">-></span>__forwarding<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>__block_impl <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>__block_impl <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span>FuncPtr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>__block_impl <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们从\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__cself</code>\"\n    }\n  }), \"找到\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__Block_byref_val_0</code>\"\n    }\n  }), \"结构体实例，然后通过该实例的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"访问成员变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">val</code>\"\n    }\n  }), \"。成员变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">val</code>\"\n    }\n  }), \"是该实例自身持有的变量，指向的是原来的局部变量。\"), \"\\n\", React.createElement(_components.p, null, \"上面部分我们展示了\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量在Block查看和修改的过程，那么问题来了：\\n当block作为回调执行时，局部变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">val</code>\"\n    }\n  }), \"已经出栈了，这个时候代码为什么还能正常工作呢?\\n我们为什么是通过成员变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"而不是直接去访问结构体中我们需要修改的变量呢? \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"被设计出来的原因又是什么呢？\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"存储域\"), \"\\n通过上面的描述我们知道Block和\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量实质就是一个相应结构体的实例。\"), \"\\n\", React.createElement(_components.p, null, \"我们在上述转换过的代码中可以发现\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__main_block_impl_0</code>\"\n    }\n  }), \"结构体构造函数中， \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">isa</code>\"\n    }\n  }), \"指向的是\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_NSConcreteStackBlock</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"Block还有另外两个与之相似的类:\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_NSConcreteStackBlock</code>\"\n    }\n  }), \"保存在栈中的block，出栈时会被销毁\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_NSConcreteGlobalBlock</code>\"\n    }\n  }), \"全局的静态block，不会访问任何外部变量\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_NSConcreteMallocBlock</code>\"\n    }\n  }), \"保存在堆中的block，当引用计数为0时会被销毁\"), \"\\n\", React.createElement(_components.p, null, \"上述示例代码中，Block是被设为\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_NSConcreteStackBlock</code>\"\n    }\n  }), \"，在栈上生成。\"), \"\\n\", React.createElement(_components.p, null, \"当我们把Block作为全局变量使用时，对应生成的Block将被设为\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_NSConcreteGlobalBlock</code>\"\n    }\n  }), \"，如:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">^</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">NSLog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">@\\\"This is a Global Block\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> argc<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token keyword\\\">char</span> <span class=\\\"token operator\\\">*</span> argv<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">@</span>autoreleasepool <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">block</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"该代码转换后的代码中，Block结构体的成员变量isa的初始化如下:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\">impl<span class=\\\"token punctuation\\\">.</span>isa <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>_NSConcreteGlobalBlock<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"那么_NSConcreteMallocBlock在什么时候被使用呢？\")), \"\\n\", React.createElement(_components.p, null, \"分配在全局变量上的Block，在变量作用域外也可以通过指针安全的访问。但分配在栈上的Block，如果它所属的变量作用域结束，该Block就被废弃。同样地，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量也分配在栈上，当超过该变量的作用域时，该\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量也会被废弃。\"), \"\\n\", React.createElement(_components.p, null, \"这个时候_NSConcreteMallocBlock就登场了，Blocks提供了将Block和\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量从栈上复制到堆上的方法来解决这个问题。将分配到栈上的Block复制到堆上，这样但栈上的Block超过它原本作用域时，堆上的Block还可以继续存在。\"), \"\\n\", React.createElement(_components.p, null, \"复制到堆上的Block，它的结构体成员变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">isa</code>\"\n    }\n  }), \"将变为:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\">impl<span class=\\\"token punctuation\\\">.</span>isa <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>_NSConcreteMallocBlock<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"而\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_block</code>\"\n    }\n  }), \"变量中结构体成员\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"就在此时保证了从栈上复制到堆上能够正确访问\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量。在这种情况下，只要栈上的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_block</code>\"\n    }\n  }), \"变量的成员变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"指向堆上的实例，我们就能够正确访问。\"), \"\\n\", React.createElement(_components.p, null, \"我们一般可以使用copy方法手动将 Block 或者\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量从栈复制到堆上。比如我们把Block做为类的属性访问时，我们一般把该属性设为copy。有些情况下我们可以不用手动复制,比如Cocoa框架中使用含有\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">usingBlock</code>\"\n    }\n  }), \"方法名的方法时，或者GCD的API中传递Block时。\"), \"\\n\", React.createElement(_components.p, null, \"当一个Block被复制到堆上时，与之相关的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量也会被复制到堆上，此时堆上的Block持有相应堆上的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量。当堆上的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量没有持有者时，它才会被废弃。(这里的思考方式和objc引用计数内存管理完全相同。)\\n而在栈上的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量被复制到堆上之后，会将成员变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__forwarding</code>\"\n    }\n  }), \"的值替换为堆上的\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量的地址。这个时候我们可以通过以下代码访问:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\">val<span class=\\\"token punctuation\\\">.</span>__forwarding<span class=\\\"token operator\\\">-></span>val</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量和循环引用问题\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"修饰符可以指定任何类型的局部变量，上面的转换代码中，有如下代码:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">__main_block_copy_0</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span>dst<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span>src<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">_Block_object_assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;</span>dst<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>src<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token comment\\\">/*BLOCK_FIELD_IS_BYREF*/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">__main_block_dispose_0</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">struct</span> __main_block_impl_0<span class=\\\"token operator\\\">*</span>src<span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">_Block_object_dispose</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>src<span class=\\\"token operator\\\">-></span>val<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token comment\\\">/*BLOCK_FIELD_IS_BYREF*/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"当Block从栈复制到堆时，会使用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_Block_object_assign</code>\"\n    }\n  }), \"函数持有该变量(相当于\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">retain</code>\"\n    }\n  }), \")。当堆上的Block被废弃时，会使用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_Block_object_dispose</code>\"\n    }\n  }), \"函数释放该变量(相当于\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">release</code>\"\n    }\n  }), \")。\"), \"\\n\", React.createElement(_components.p, null, \"由上文描述可知，我们可以使用下述代码解除Block循环引用的问题:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"objc\\\"><pre class=\\\"language-objc\\\"><code class=\\\"language-objc\\\"><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">^</span>block<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">{</span>\\n  tmp <span class=\\\"token operator\\\">=</span> nil<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">block</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"通过执行block方法，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nil</code>\"\n    }\n  }), \"被赋值到\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_block</code>\"\n    }\n  }), \"变量\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tmp</code>\"\n    }\n  }), \"中。这个时候\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_block</code>\"\n    }\n  }), \"变量对\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">self</code>\"\n    }\n  }), \"的强引用失效，从而避免循环引用的问题。使用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量的优点是:\\n通过\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量可以控制对象的生命周期\\n在不能使用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__weak</code>\"\n    }\n  }), \"修饰符的环境中，我们可以避免使用\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__unsafe_unretained</code>\"\n    }\n  }), \"修饰符\\n在执行Block时可动态地决定是否将nil或者其它对象赋值给\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">__block</code>\"\n    }\n  }), \"变量\\n但是这种方法有一个明显的缺点就是，我们必须去执行Block才能够解除循环引用问题，否则就会出现问题。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/Block机制详解.md\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport Layout from \"../components/layout\";\nimport TOC from \"../components/toc\";\nimport {useEffect} from \"react\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Giscus from \"@giscus/react\";\nimport mediumZoom from \"medium-zoom\";\nconst BlogPostTemplate = _ref => {\n  let {data, pageContext, children} = _ref;\n  const post = data.mdx;\n  const {title: siteTitle, postCopyright, author, siteUrl} = data.site.siteMetadata;\n  const {previous, next} = pageContext;\n  const isDarkmode = useSelector(state => state.isDarkMode);\n  useEffect(() => {\n    mediumZoom(\".post-content img\", {\n      background: \"#292a2d\"\n    });\n  }, []);\n  return React.createElement(Layout, {\n    isFocus: false,\n    title: post.frontmatter.title,\n    description: post.frontmatter.description\n  }, React.createElement(\"div\", {\n    className: \"container\"\n  }, React.createElement(\"article\", {\n    className: \"post-wrap\"\n  }, React.createElement(\"header\", {\n    className: \"post-header\"\n  }, React.createElement(\"h1\", {\n    className: \"post-title\"\n  }, post.frontmatter.title), React.createElement(\"div\", {\n    className: \"post-meta\"\n  }, data.site.siteMetadata.author.name, \"\\xA0 / \\xA0\", React.createElement(\"span\", {\n    className: \"post-time\"\n  }, post.frontmatter.date), \"\\xA0\")), React.createElement(\"div\", {\n    className: \"post-content\"\n  }, React.createElement(MDXProvider, null, children)), postCopyright && React.createElement(\"section\", {\n    className: \"post-copyright\"\n  }, React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Author:\\xA0\"), React.createElement(\"span\", null, author.name)), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Permalink:\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: siteUrl + post.fields.slug\n  }, \" \", siteUrl + post.fields.slug, \" \"))), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"License:\\xA0\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: \"http://creativecommons.org/licenses/by-nc/4.0/\"\n  }, \"CC-BY-NC-4.0\")))), React.createElement(\"section\", {\n    className: \"post-tags\"\n  }, React.createElement(\"div\", null, React.createElement(\"span\", null, \"Tag(s):\"), React.createElement(\"span\", {\n    className: \"tag\"\n  }, post.frontmatter.tags.length !== 0 && post.frontmatter.tags.map(item => {\n    return React.createElement(\"a\", {\n      key: item,\n      href: `/tag/${item}`\n    }, \"#\", item);\n  }))), React.createElement(\"div\", null, React.createElement(\"a\", {\n    href: \"#/\",\n    onClick: () => {\n      window.history.back();\n    }\n  }, \"back\"), React.createElement(\"span\", null, \" \\xB7 \"), React.createElement(\"a\", {\n    href: data.site.siteMetadata.siteUrl\n  }, \"home\"))), React.createElement(\"section\", {\n    className: \"post-nav\"\n  }, previous ? React.createElement(\"a\", {\n    className: \"prev\",\n    rel: \"prev\",\n    href: previous.fields.slug\n  }, previous.frontmatter.title) : React.createElement(\"span\", {\n    className: \"prev\"\n  }, \"No More\"), next ? React.createElement(\"a\", {\n    className: \"next\",\n    rel: \"next\",\n    href: next.fields.slug\n  }, next.frontmatter.title) : React.createElement(\"span\", {\n    className: \"next\"\n  }, \"No More\")), React.createElement(Giscus, {\n    id: \"comment\",\n    repo: \"w1zd/w1zd.github.io\",\n    repoId: \"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=\",\n    category: \"Announcements\",\n    categoryId: \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy\",\n    mapping: \"og:title\",\n    theme: `https://wizd.dev/giscus-themes/${isDarkmode ? \"dark\" : \"light\"}.css`,\n    reactionsEnabled: \"1\",\n    loading: \"lazy\"\n  }), post.frontmatter.toc && React.createElement(TOC, null))));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"60074105\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","span","p","strong","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","BlogPostTemplate","_ref","data","pageContext","children","post","mdx","title","siteTitle","postCopyright","author","siteUrl","site","siteMetadata","previous","next","isDarkmode","useSelector","state","isDarkMode","useEffect","mediumZoom","background","Layout","isFocus","frontmatter","description","name","date","MDXProvider","fields","slug","tags","length","map","item","key","onClick","window","history","back","rel","Giscus","repo","repoId","category","categoryId","mapping","theme","reactionsEnabled","loading","toc","TOC","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}