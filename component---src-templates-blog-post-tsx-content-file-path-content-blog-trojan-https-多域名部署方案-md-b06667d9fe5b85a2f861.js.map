{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-blog-trojan-https-多域名部署方案-md-b06667d9fe5b85a2f861.js","mappings":"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","sources":["webpack://w1zd-lair/./content/blog/trojan-https-多域名部署方案.md","webpack://w1zd-lair/./src/templates/blog-post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"trojan-原理简介\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#trojan-%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B\",\n    \"aria-label\": \"trojan 原理简介 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Trojan 原理简介\"), \"\\n\", React.createElement(_components.p, null, \"最简单来讲， Trojan 是通过 HTTPS 的方式进行穿墙操作的， 也就是所有的请求， 先通过 Trojan 客户端加工之后， 以正常 HTTPS 请求的方式发往墙外服务器， 然后在 Trojan 服务端， 对请求内容进行解析后， 将原请求转发给目标服务器，再将目标服务器返回的数据包装成正常的 HTTPS 响应包返回给 Trojan 客户端。\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-23-9a16a4b0495228a521a9d199a5726835-TrojanDataFlow-a4e62d.png\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"trojan-和-nginx-的配合模式\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#trojan-%E5%92%8C-nginx-%E7%9A%84%E9%85%8D%E5%90%88%E6%A8%A1%E5%BC%8F\",\n    \"aria-label\": \"trojan 和 nginx 的配合模式 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Trojan 和 Nginx 的配合模式\"), \"\\n\", React.createElement(_components.p, null, \"由于整个穿墙操作借助的是 TLS， 所以 Trojan 需要监听 443 端口， 而 Nginx 则是在 Trojan 后面提供网页服务的。 也就是说其实 Trojan 会导致 Nginx 无法使用 HTTPS， Trojan 会独占 443 端口， 只为穿墙域名提供 HTTPS 服务， Nginx 只能使用 HTTP。 这就很蛋疼了， 为了穿墙导致其他域名全部无法使用 HTTPS， 如果这台服务器单纯就是用来扶墙的还好， 但是如果还有别的站点需要进行托管， 那就很不爽了。\"), \"\\n\", React.createElement(_components.p, null, \"我们可以通过一张图来看一下 Trojan 和 Nginx 的配合模式。\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-02-f7ba184481751dd1b336a655ffdc0d1d-trojan-nginx-cff97a.png\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.p, null, \"单看图，是不是觉得挺好啊，Trojan 这不是能识别 Trojan 请求和非 Trojan 请求么？ 那其他需要托管的站点通过浏览器访问的时候，不都应该是正常的么？ 想法是美好的，当然如果你不在乎是不是 HTTPS，现实也很美好。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"问题是什么\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%97%AE%E9%A2%98%E6%98%AF%E4%BB%80%E4%B9%88\",\n    \"aria-label\": \"问题是什么 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"问题是什么\"), \"\\n\", React.createElement(_components.p, null, \"Trojan 只能为一个域名配置 HTTPS，而它本身又独占了 443 端口， 就导致你的\", React.createElement(\"font\", {\n    color: \"red\"\n  }, React.createElement(_components.em, null, React.createElement(_components.strong, null, \"整台服务器上就只能有一个 HTTPS 域名服务\"))), \", 多个 HTTPS 配置不了。\"), \"\\n\", React.createElement(_components.p, null, \"那么，如何在使用 Trojan 的时候， 部署多个 HTTPS 站点呢？\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"解决方案\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\",\n    \"aria-label\": \"解决方案 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"解决方案\"), \"\\n\", React.createElement(_components.p, null, \"在\", React.createElement(_components.a, {\n    href: \"#Trojan-%E5%92%8C-Nginx-%E7%9A%84%E9%85%8D%E5%90%88%E6%A8%A1%E5%BC%8F\"\n  }, \"Trojan 和 Nginx 的配合模式\"), \"一节中我们知道， 所有请求先是经过 Trojan， 然后由 Trojan 进行甄别之后决定是否要交给 Nginx 进行处理。\"), \"\\n\", React.createElement(_components.p, null, \"我们把处理流程进行一下更改，其实就能是实现我们的需求了。 如图:\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-14-071491d6e3b416d08e1f717e6efeebdc-nginxinfront-a56ad6.png\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.p, null, \"这样的话，我们就把 443 端口从 Trojan 中解放出来交还给了 Nginx。 所有请求先到达 Nginx， Nginx 中进行处理， 如果请求的是为 Trojan 配置的域名， 那么就将请求转发给 Trojan， 如果不是则由 Nginx 自行处理。\"), \"\\n\", React.createElement(_components.p, null, \"使用 Nginx \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ngx_stream_ssl_preread_module</code>\"\n    }\n  }), \" 这个模块就能满足我们的诉求。 \", React.createElement(_components.a, {\n    href: \"https://github.com/trojan-gfw/trojan/issues/131#issuecomment-535122993\"\n  }, \"看这儿\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"具体配置\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE\",\n    \"aria-label\": \"具体配置 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"具体配置\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, React.createElement(_components.strong, null, \"/etc/nginx/nginx.conf\"))), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"nginx\\\"><pre class=\\\"language-nginx\\\"><code class=\\\"language-nginx\\\">...\\n<span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">stream</span></span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">map</span> <span class=\\\"token variable\\\">$ssl_preread_server_name</span> <span class=\\\"token variable\\\">$name</span></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">trojan.xxx.com</span> trojan</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">anotherdomain.com</span> nginx</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">upstream</span> trojan</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">server</span> 127.0.0.1:8889</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">upstream</span> nginx</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">server</span> 127.0.0.1:8888</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">server</span></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">listen</span>      <span class=\\\"token number\\\">443</span></span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">listen</span>      [::]:443</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">proxy_pass</span>  <span class=\\\"token variable\\\">$name</span></span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">ssl_preread</span> <span class=\\\"token boolean\\\">on</span></span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">http</span></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">server</span></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">server</span></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">listen</span>       <span class=\\\"token number\\\">8888</span> ssl</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">listen</span>       [::]:8888 ssl</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">server_name</span>  anotherdomain.com</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">ssl_certificate</span>  xxxxxx.crt</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">ssl_certificate_key</span> xxxxxxx.key</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">sl_protocols</span>       TLSv1 TLSv1.1 TLSv1.2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token directive\\\"><span class=\\\"token keyword\\\">ssl_ciphers</span>         HIGH:!aNULL:!MD5</span><span class=\\\"token punctuation\\\">;</span>\\n        ...\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n...</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, React.createElement(_components.strong, null, \"/usr/src/trojan/server.conf\"))), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"run_type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"server\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"local_addr\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0.0.0.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"local_port\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">8889</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"remote_addr\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"127.0.0.1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"remote_port\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">80</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    ...\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"后续更新\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%90%8E%E7%BB%AD%E6%9B%B4%E6%96%B0\",\n    \"aria-label\": \"后续更新 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"后续更新\"), \"\\n\", React.createElement(_components.p, null, \"这里要注意一下，可能是不同方式安装的 Nginx 版本不一致的问题，可能会导致安装之后 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ngx_stream_ssl_preread_module</code>\"\n    }\n  }), \" 模块找不到的问题。\"), \"\\n\", React.createElement(_components.p, null, \"可以通过以下两种方式解决：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"通过 yum 安装 Nginx（推荐）\", React.createElement(_components.a, {\n    href: \"https://wizd.dev/CentOS7%E5%AE%89%E8%A3%85Nginx/\"\n  }, \"可以参考之前的文章\")), \"\\n\", React.createElement(_components.li, null, \"自行下载编译 Nginx\\n...\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"还可能会遇到\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">nginx: [emerg] unknown directive \\\"stream\\\" in /etc/nginx/nginx.conf:18</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"只需要\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">yum install nginx-mod-stream.x86_64</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/trojan-https-多域名部署方案.md\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport Layout from \"../components/layout\";\nimport TOC from \"../components/toc\";\nimport {useEffect} from \"react\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Giscus from \"@giscus/react\";\nimport mediumZoom from \"medium-zoom\";\nconst BlogPostTemplate = _ref => {\n  let {data, pageContext, children} = _ref;\n  const post = data.mdx;\n  const {title: siteTitle, postCopyright, author, siteUrl} = data.site.siteMetadata;\n  const {previous, next} = pageContext;\n  const isDarkmode = useSelector(state => state.isDarkMode);\n  useEffect(() => {\n    mediumZoom(\".post-content img\", {\n      background: \"#292a2d\"\n    });\n  }, []);\n  return React.createElement(Layout, {\n    isFocus: false,\n    title: post.frontmatter.title,\n    description: post.frontmatter.description\n  }, React.createElement(\"div\", {\n    className: \"container\"\n  }, React.createElement(\"article\", {\n    className: \"post-wrap\"\n  }, React.createElement(\"header\", {\n    className: \"post-header\"\n  }, React.createElement(\"h1\", {\n    className: \"post-title\"\n  }, post.frontmatter.title), React.createElement(\"div\", {\n    className: \"post-meta\"\n  }, React.createElement(\"span\", {\n    className: \"post-time\"\n  }, post.frontmatter.date), \"\\xA0\")), React.createElement(\"div\", {\n    className: \"post-content\"\n  }, React.createElement(MDXProvider, null, children)), postCopyright && React.createElement(\"section\", {\n    className: \"post-copyright\"\n  }, React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Author:\\xA0\"), React.createElement(\"span\", null, author.name)), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Permalink:\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: siteUrl + post.fields.slug\n  }, \" \", siteUrl + post.fields.slug, \" \"))), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"License:\\xA0\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: \"http://creativecommons.org/licenses/by-nc/4.0/\"\n  }, \"CC-BY-NC-4.0\")))), React.createElement(\"section\", {\n    className: \"post-tags\"\n  }, React.createElement(\"div\", null, React.createElement(\"span\", null, \"Tag(s):\"), React.createElement(\"span\", {\n    className: \"tag\"\n  }, post.frontmatter.tags.length !== 0 && post.frontmatter.tags.map(item => {\n    return React.createElement(\"a\", {\n      key: item,\n      href: `/tag/${item}`\n    }, \"#\", item);\n  }))), React.createElement(\"div\", null, React.createElement(\"a\", {\n    href: \"#/\",\n    onClick: () => {\n      window.history.back();\n    }\n  }, \"back\"), React.createElement(\"span\", null, \" \\xB7 \"), React.createElement(\"a\", {\n    href: data.site.siteMetadata.siteUrl\n  }, \"home\"))), React.createElement(\"section\", {\n    className: \"post-nav\"\n  }, previous ? React.createElement(\"a\", {\n    className: \"prev\",\n    rel: \"prev\",\n    href: previous.fields.slug\n  }, previous.frontmatter.title) : React.createElement(\"span\", {\n    className: \"prev\"\n  }, \"No More\"), next ? React.createElement(\"a\", {\n    className: \"next\",\n    rel: \"next\",\n    href: next.fields.slug\n  }, next.frontmatter.title) : React.createElement(\"span\", {\n    className: \"next\"\n  }, \"No More\")), React.createElement(Giscus, {\n    id: \"comment\",\n    repo: \"w1zd/w1zd.github.io\",\n    repoId: \"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=\",\n    category: \"Announcements\",\n    categoryId: \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy\",\n    mapping: \"og:title\",\n    theme: `https://wizd.dev/giscus-themes/${isDarkmode ? \"dark\" : \"light\"}.css`,\n    reactionsEnabled: \"1\",\n    loading: \"lazy\"\n  }), post.frontmatter.toc && React.createElement(TOC, null))));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"60074105\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","span","p","img","em","strong","h3","ol","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","src","alt","color","wrapper","MDXLayout","BlogPostTemplate","_ref","data","pageContext","children","post","mdx","title","siteTitle","postCopyright","author","siteUrl","site","siteMetadata","previous","next","isDarkmode","useSelector","state","isDarkMode","useEffect","mediumZoom","background","Layout","isFocus","frontmatter","description","date","MDXProvider","name","fields","slug","tags","length","map","item","key","onClick","window","history","back","rel","Giscus","repo","repoId","category","categoryId","mapping","theme","reactionsEnabled","loading","toc","TOC","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}