"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[2956],{1082:function(n,a,s){s.r(a),s.d(a,{default:function(){return m}});var t=s(8453),p=s(6540);function e(n){const a=Object.assign({h2:"h2",a:"a",span:"span",p:"p",ol:"ol",li:"li",ul:"ul"},(0,t.RP)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.h2,{id:"js原生ajax",style:{position:"relative"}},p.createElement(a.a,{href:"#js%E5%8E%9F%E7%94%9Fajax","aria-label":"js原生ajax permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"JS原生Ajax"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ajax</code>'}}),"：一种请求数据的方式，不需要刷新整个页面。\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ajax</code>'}}),"的技术核心是",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">XMLHttpRequest</code>'}}),"对象。\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ajax</code>'}}),"请求过程：创建",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">XMLHttpRequest</code>'}}),"对象、连接服务器、发送请求、接收响应数据。\n下面简单封装一个函数，之后稍作解释"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"./TestXHR.aspx"</span><span class="token punctuation">,</span> <span class="token comment">//请求地址</span>\n<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token comment">//请求方式</span>\n<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"super"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//请求参数</span>\n<span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>\n<span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> xml</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 此处放成功后执行的代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 此处放失败后执行的代码</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\noptions <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\noptions<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\noptions<span class="token punctuation">.</span>dataType <span class="token operator">=</span> options<span class="token punctuation">.</span>dataType <span class="token operator">||</span> <span class="token string">"json"</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">formatParams</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//创建 - 非IE6 - 第一步</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//IE6及其以下版本浏览器</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">\'Microsoft.XMLHTTP\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//接收 - 第三步</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">var</span> status <span class="token operator">=</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\noptions<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseXML<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\noptions<span class="token punctuation">.</span>fail <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//连接 和 发送 - 第二步</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> params<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//设置表单提交时的内容类型</span>\nxhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//格式化参数</span>\n<span class="token keyword">function</span> <span class="token function">formatParams</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"v="</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"创建","\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"IE7及其以上版本中支持原生的 XHR 对象，因此可以直接用： var oAjax = new XMLHttpRequest();"),"\n",p.createElement(a.li,null,"IE6及其之前的版本中，XHR对象是通过MSXML库中的一个ActiveX对象实现的。有的书中细化了IE中此类对象的三种不同版本，即MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MSXML2.XMLHttp.6.0；个人感觉太麻烦，可以直接使用下面的语句创建： var oAjax=new ActiveXObject(’Microsoft.XMLHTTP’);"),"\n"),"\n"),"\n",p.createElement(a.li,null,"连接和发送","\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"open()函数的三个参数：请求方式、请求地址、是否异步请求(同步请求的情况极少，至今还没用到过)；"),"\n",p.createElement(a.li,null,"GET 请求方式是通过URL参数将数据提交到服务器的，POST则是通过将数据作为 send 的参数提交到服务器；"),"\n",p.createElement(a.li,null,"POST 请求中，在发送数据之前，要设置表单提交的内容类型；"),"\n",p.createElement(a.li,null,"提交到服务器的参数必须经过 encodeURIComponent() 方法进行编码，实际上在参数列表”key=value”的形式中，key 和 value 都需要进行编码，因为会包含特殊字符。每次请求的时候都会在参数列表中拼入一个 “v=xx” 的字符串，这样是为了拒绝缓存，每次都直接请求到服务器上。\nencodeURI() ：用于整个 URI 的编码，不会对本身属于 URI 的特殊字符进行编码，如冒号、正斜杠、问号和井号；其对应的解码函数 decodeURI()；\nencodeURIComponent() ：用于对 URI 中的某一部分进行编码，会对它发现的任何非标准字符进行编码；其对应的解码函数 decodeURIComponent()；"),"\n"),"\n"),"\n",p.createElement(a.li,null,"接收","\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"接收到响应后，响应的数据会自动填充XHR对象，相关属性如下\nresponseText：响应返回的主体内容，为字符串类型；\nresponseXML：如果响应的内容类型是 “text/xml” 或 “application/xml”，这个属性中将保存着相应的xml 数据，是 XML 对应的 document 类型；\nstatus：响应的HTTP状态码；\nstatusText：HTTP状态的说明；"),"\n",p.createElement(a.li,null,"XHR对象的readyState属性表示请求/响应过程的当前活动阶段，这个属性的值如下\n0-未初始化，尚未调用open()方法；\n1-启动，调用了open()方法，未调用send()方法；\n2-发送，已经调用了send()方法，未接收到响应；\n3-接收，已经接收到部分响应数据；\n4-完成，已经接收到全部响应数据；\n只要 readyState 的值变化，就会调用 readystatechange 事件，(其实为了逻辑上通顺，可以把readystatechange放到send之后，因为send时请求服务器，会进行网络通信，需要时间，在send之后指定readystatechange事件处理程序也是可以的，我一般都是这样用，但为了规范和跨浏览器兼容性，还是在open之前进行指定吧)。"),"\n",p.createElement(a.li,null,"在readystatechange事件中，先判断响应是否接收完成，然后判断服务器是否成功处理请求，xhr.status 是状态码，状态码以2开头的都是成功，304表示从缓存中获取，上面的代码在每次请求的时候都加入了随机数，所以不会从缓存中取值，故该状态不需判断。"),"\n"),"\n"),"\n",p.createElement(a.li,null,"ajax请求是不能跨域的！"),"\n"),"\n",p.createElement(a.h2,{id:"jsonp",style:{position:"relative"}},p.createElement(a.a,{href:"#jsonp","aria-label":"jsonp permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"JSONP"),"\n",p.createElement(a.p,null,"JSONP(JSON with Padding) 是一种跨域请求方式。主要原理是利用了",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">script</code>'}}),"标签可以跨域请求的特点，由其",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src</code>'}}),"属性发送请求到服务器，服务器返回 js 代码，网页端接受响应，然后就直接执行了，这和通过 script 标签引用外部文件的原理是一样的。"),"\n",p.createElement(a.p,null,"JSONP由两部分组成：回调函数和数据，回调函数一般是由网页端控制，作为参数发往服务器端，服务器端把该函数和数据拼成字符串返回。"),"\n",p.createElement(a.p,null,"比如网页端创建一个",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">script</code>'}}),"标签，并给其",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src</code>'}}),"赋值为",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">http://www.superfiresun.com/json/?callback=process</code>'}}),"，此时网页端就发起一个请求。服务端将要返回的数据拼好最为函数的参数传入，服务端返回的数据格式类似",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">process({'name':'superfiresun'})</code>"}}),"，网页端接收到了响应值，因为请求者是 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">script</code>'}}),"，所以相当于直接调用 process 方法，并且传入了一个参数。"),"\n",p.createElement(a.p,null,"单看响应返回的数据，JSONP 比 ajax 方式就多了一个回调函数。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\toptions <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>url <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"参数不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">//创建 script 标签并加入到页面中</span>\n\t<span class="token keyword">var</span> callbackName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">\'jsonp_\'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> oHead <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'head\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\toptions<span class="token punctuation">.</span>data<span class="token punctuation">[</span>options<span class="token punctuation">.</span>callback<span class="token punctuation">]</span> <span class="token operator">=</span> callbackName<span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">formatParams</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> oS <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'script\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\toHead<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//创建jsonp回调函数</span>\n\twindow<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\toHead<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">clearTimeout</span><span class="token punctuation">(</span>oS<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\twindow<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t\toptions<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//发送请求</span>\n\toS<span class="token punctuation">.</span>src <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">\'?\'</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>\n\n\t<span class="token comment">//超时处理</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\toS<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\twindow<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t\t\toHead<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\toptions<span class="token punctuation">.</span>fail <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"超时"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//格式化参数</span>\n<span class="token keyword">function</span> <span class="token function">formatParams</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'=\'</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"因为 script 标签的 src 属性只在第一次设置的时候起作用，导致 script 标签没法重用，所以每次完成操作之后要移除；"),"\n",p.createElement(a.li,null,"JSONP这种请求方式中，参数依旧需要编码；"),"\n",p.createElement(a.li,null,"如果不设置超时，就无法得知此次请求是成功还是失败；"),"\n"),"\n",p.createElement(a.h2,{id:"模仿jquery中的ready事件",style:{position:"relative"}},p.createElement(a.a,{href:"#%E6%A8%A1%E4%BB%BFjquery%E4%B8%AD%E7%9A%84ready%E4%BA%8B%E4%BB%B6","aria-label":"模仿jquery中的ready事件 permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"模仿JQuery中的ready()事件"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"DOMContentLoaded事件，在DOM树加载完成之后立即执行，始终会在load之前执行。\nIE9+、FF、Chrome、Safari3.1+和Opera9+都支持该事件。\n对于不支持该事件的浏览器，可以使用如下代码："),"\n"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n　　<span class="token comment">// 代码块</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"DOMContentLoaded 事件只能通过 DOM2 级方式添加，即采用addEventListener()/attachEvent() 方式添加才能够使用。事件对象不会提供任何额外信息。\n2. readystatechange事件\nIE为DOM文档中的某些部分(区别于 XHR 对象的 readystatechange 事件)提供了该事件，这个事件的目的是提供与文档或元素的加载状态有关的信息，但这个事件的行为有时候也很难预料。支持该事件的对象都有一个readyState属性，注意，不是 event 事件对象。IE、Firefox4+和Opera 支持该事件。\nreadyState属性的值如下：\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">uninitialized</code>'}})," – 未初始化：对象存在但尚未初始化；\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">loading</code>'}})," – 正在加载：对象正在加载数据；\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">loaded</code>'}})," – 加载完毕，对象加载数据完毕；\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">interactive</code>'}})," – 交互：可以操作对象了，但还没有完全加载；\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">complete</code>'}})," – 完成：对象已经加载完成；\n2.1、并非所有的对象都会经历readyState的这几个阶段，如果这个阶段不适用某个对象，则该对象完全可能跳过该阶段，并没有规定哪个阶段适用于哪个对象。这意味着 readystatechange 事件经常会少于4次，相对应的 readyState 属性值也不是连续的。\n2.2、对于 document 而言，interactive 和 complete 阶段会在于 DOMContentLoaded 大致相同的时刻触发 readystatechange 事件；\nload 事件和 readystatechange 事件的触发顺序会因页面的外部资源的多少而变化，也就是说，readystatechange 事件并不会一直在 load 事件之前执行。外部资源越多，对 readystatechange 事件就越有利。\ninteractive 和 complete 的顺序也是不一致的，谁都有可能先执行，引用的外部资源越多，对交互阶段越有利。所以为了尽可能早的执行代码，两个状态要同时判断。\n3. doScroll\nIE5.5+支持，当页面中有滚动条时，可以用 doScroll(“right”)/doScroll(“down”) 等来移动滚动条，这个方法只有等DOM加载完成以后才能用，所以在IE低版本浏览器中可以通过这个属性判断 DOM 结构是否加载完成。介绍这个属性主要是模仿 jquery 中的解决方案。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token parameter">readyFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//非IE浏览器</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tdocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'DOMContentLoaded\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\treadyFn <span class="token operator">&amp;&amp;</span> <span class="token function">readyFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//方案1和2 哪个快用哪一个</span>\n\t\t<span class="token keyword">var</span> bReady <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//方案1</span>\n\t\tdocument<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">\'onreadystatechange\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>bReady<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">\'complete\'</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"interactive"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\tbReady <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t\t\treadyFn <span class="token operator">&amp;&amp;</span> <span class="token function">readyFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token comment">//方案2</span>\n\t\t<span class="token comment">//jquery也会担心doScroll会在iframe内失效，此处是判断当前页是否被放在了iframe里</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>frameElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">setTimeout</span><span class="token punctuation">(</span>checkDoScroll<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">function</span> <span class="token function">checkDoScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t\t\tdocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>bReady<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">return</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\tbReady <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t\t\treadyFn <span class="token operator">&amp;&amp;</span> <span class="token function">readyFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 不断检查 doScroll 是否可用 - DOM结构是否加载完成</span>\n\t\t\t<span class="token function">setTimeout</span><span class="token punctuation">(</span>checkDoScroll<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"注：\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setTimeout(checkDoScroll, 1);</code>'}})," 目的是让浏览器尽快执行",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">checkDoScroll</code>'}}),"函数，间隔时间设置为 1ms，对当下的浏览器来说是不太可能的。每个浏览器都有自己默认的最小间隔时间，即使时间设置为最小间隔时间，也只是代表隔这些时间过去之后，JavaScript 会把",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">checkDoScroll</code>'}}),"加入到执行队列中，如果此时 JavaScript 进程空闲，则会立即执行该代码。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.RP)(),n.components);return a?p.createElement(a,n,p.createElement(e,n)):e(n)},c=s(1468),l=s(7947),u=s(1327),i=s(2171),r=s(9739);const k=n=>{let{data:a,pageContext:s,children:e}=n;const o=a.mdx,{title:k,postCopyright:m,author:d,siteUrl:g}=a.site.siteMetadata,{previous:y,next:h}=s,f=(0,c.d4)((n=>n.isDarkMode));return(0,p.useEffect)((()=>{(0,r.A)(".post-content img",{background:"#292a2d"})}),[]),p.createElement(l.A,{isFocus:!1,title:o.frontmatter.title,description:o.frontmatter.description},p.createElement("div",{className:"container"},p.createElement("article",{className:"post-wrap"},p.createElement("header",{className:"post-header"},p.createElement("h1",{className:"post-title"},o.frontmatter.title),p.createElement("div",{className:"post-meta"},p.createElement("span",{className:"post-time"},o.frontmatter.date)," ")),p.createElement("div",{className:"post-content"},p.createElement(t.xA,null,e)),m&&p.createElement("section",{className:"post-copyright"},p.createElement("p",{className:"copyright-item"},p.createElement("span",null,"Author: "),p.createElement("span",null,d.name)),p.createElement("p",{className:"copyright-item"},p.createElement("span",null,"Permalink:"),p.createElement("span",null,p.createElement("a",{href:g+o.fields.slug}," ",g+o.fields.slug," "))),p.createElement("p",{className:"copyright-item"},p.createElement("span",null,"License: "),p.createElement("span",null,p.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),p.createElement("section",{className:"post-tags"},p.createElement("div",null,p.createElement("span",null,"Tag(s):"),p.createElement("span",{className:"tag"},0!==o.frontmatter.tags.length&&o.frontmatter.tags.map((n=>p.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),p.createElement("div",null,p.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),p.createElement("span",null," · "),p.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),p.createElement("section",{className:"post-nav"},y?p.createElement("a",{className:"prev",rel:"prev",href:y.fields.slug},y.frontmatter.title):p.createElement("span",{className:"prev"},"No More"),h?p.createElement("a",{className:"next",rel:"next",href:h.fields.slug},h.frontmatter.title):p.createElement("span",{className:"next"},"No More")),p.createElement(i.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${f?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),o.frontmatter.toc&&p.createElement(u.A,null))))};function m(n){return p.createElement(k,n,p.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-原生js实现ajax、jsonp及dom加载完成事件-md-9c328d771cad5614ecc0.js.map