{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-nand-as-universal-gate-mdx","path":"/NAND-as-Universal-Gate/","result":{"data":{"site":{"siteMetadata":{"title":"Wizard's Lair","postCopyright":true,"siteUrl":"https://wizd.dev","author":{"name":"w1zd"}}},"mdx":{"id":"3de07a61-2d10-5fa3-ac84-0e3252bc15c2","excerpt":"NAND Gate 又叫与非门，可以理解为与门和非门的组合，用逻辑表达式为：Y=a⋅b‾Y=\\overline{a\\cdot b}Y=a⋅b NAND as NOT\n\nNOT 是一个单输入的逻辑门，用逻辑表达式为：Y=a‾Y=\\overline{a}Y=a 。\n\n因为 a⋅a=aa\\cdot a = aa⋅a=a 所以 Y…","body":"\nNAND Gate 又叫与非门，可以理解为与门和非门的组合，用逻辑表达式为：$Y=\\overline{a\\cdot b}$\n\n## NAND as NOT\n\nNOT 是一个单输入的逻辑门，用逻辑表达式为：$Y=\\overline{a}$ 。\n\n因为 $a\\cdot a = a$ 所以 $Y = \\overline{a\\cdot a} = \\overline{a}$\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-09-12-48e2df1cf8e864478f784e00ba475da8-NOT-GATE-7bc3cc.png)\n\n```nand2tetris-hdl\n/**\n * Not gate:\n * out = not in\n */\n\nCHIP Not {\n    IN in;\n    OUT out;\n\n    PARTS:\n    // Put your code here:\n    Nand(a = in, b = in, out = out);\n}\n```\n\n## NAND as AND\n\nAND Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=a\\cdot b$, 其中 $a$ 和 $b$ 分别是输入的两个端口。\n\nNAND Gate 逻辑表达式为：$Y=\\overline{a\\cdot b}$ ，我们想要得到 $a\\cdot b$ ，只需要对 $Y$ 做一个取反操作即可，即：$Y' =\\overline{\\overline{a\\cdot b}} = a\\cdot b$\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-00-bebb701c23e2a068c6277fff14c22a7d-AND-GATE-a8a6a7.png)\n\n```nand2tetris-hdl\n/**\n * And gate:\n * out = a and b\n */\n\nCHIP And {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    // Put your code here:\n    Nand(a = a, b = b, out = nandOut);\n    Nand(a = nandOut, b = nandOut, out = out); // Not(in = nandOut, out = out);\n```\n\n## NAND as OR\n\nOR Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=a+b$, 其中 $a$ 和 $b$ 分别是输入的两个端口。\n\nNAND Gate 逻辑表达式为：$Y=\\overline{a\\cdot b}$ ，根据 DeMorgan's law，我们可以得到 $Y = \\overline{a\\cdot b} = \\overline{a}+\\overline{b}$ ，那如果我们在输入 $a$ 和 $b$ 的时候，<u>分别对他们进行取反操作让输入变成</u> $\\overline{a}$ 和 $\\overline{b}$, 则可得到：\n\n$$\nY=\\overline{\\overline{a}\\cdot \\overline{b}} = \\overline{\\overline{a}}+\\overline{\\overline{b}}=a+b\n$$\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-25-06f41ba4e59bf8312619831a257e3060-OR-GATE-f3d009.png)\n\n```nand2tetris-hdl\n/**\n * Or gate:\n * out = a or b\n */\n\nCHIP Or {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    // Put your code here:\n    Nand(a = a, b = a, out = nota);\n    Nand(a = b, b = b, out = notb);\n    Nand(a = nota, b = notb, out = out);\n}\n```\n\n## NAND as NOR\n\nNOR Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=\\overline{a+b}$, 其中 $a$ 和 $b$ 分别是输入的两个端口。\n\n上面已经有了 OR 的实现和 NOT 的实现，直接用 OR 和 NOT 就可以得到 NOR 的实现，即：\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-43-25f10b34ee68752199aadd0d459bbc64-NOR-GATE-1ab0cd.png)\n\n```nand2tetris-hdl\n/**\n * Nor gate:\n * out = a nor b\n */\n\nCHIP Nor {\n  IN a, b;\n  OUT out;\n\n  PARTS:\n  // Put your code here:\n  //Or(a = a, b = b, out = out);\n  Nand(a = a, b = a, out = nota);\n  Nand(a = b, b = b, out = notb);\n  Nand(a = nota, b = notb, out = orOut);\n  Nand(a = orOut, b = orOut, out = out);\n```\n\n## NAND as XOR\n\nXOR Gate 是一个两输入的逻辑门，用逻辑表达式为：$Y=a\\oplus b=a\\cdot \\overline{b}+\\overline{a}\\cdot b$, 其中 $a$ 和 $b$ 分别是输入的两个端口。\n\n这里我们需要用到两个 AND，两个 NOT，一个 OR，所以一共需要九个Nand，即：\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-10-58-dc900b7758d54247c8e9ee4a6b877fcc-XOR-GATE-9-bcf2ba.png)\n\n```nand2tetris-hdl\n/**\n * Xor gate:\n * out = a xor b\n */\n\nCHIP Xor {\n  IN a, b;\n  OUT out;\n\n  PARTS:\n  // Put your code here:\n  Nand(a = b, b = b, out = notb);\n  Nand(a = a, b = notb, out = nandanotb);\n  Nand(a = nandab, b = nandab, out = aandnotb);\n  Nand(a = a, b = a, out = nota);\n  Nand(a = nota, b = b, out = nandnotab);\n  Nand(a = nandnotab, b = nandnotab, out = notaandb);\n  Nand(a = aandnotb, b = aandnotb, out = NOTaandnotb);\n  Nand(a = notaandb, b = notaandb, out = NOTnotaandb);\n  Nand(a = NOTaandnotb, b = NOTnotaandb, out = out);\n}\n```\n\n这个实现用到了过多的 NAND，我们想办法优化一下，注意观察图中红框里的部分，这部分是明显就是两次 NOT：\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-17-08-1c5ce4d174b8376903a0e1a862578ca9-XOR-GATE-9-INFO-98ff40.png)\n这两次 NOT 叠加之后就相当于什么事情都没干，所以我们可以把这部分干掉，就剩下五个 Nand，即：\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-15-55-916c3a61c8cf02b9c6727c4543e1c6ae-XOR-GATE-5-ed7333.png)\n其实我们还可以对这个门进行一次简化，用四个 NAND 来实现 XOR（这里如果全部用逻辑运算写的话太复杂，我直接在公式里使用 NAND 了）:\n$$\n\\begin{aligned}\nY &=a\\oplus b\\\\\n&  =a\\cdot \\overline{b}+\\overline{a}\\cdot b\\\\\n&  =NAND\\big(\\overline{(a\\cdot \\overline{b})}, \\overline{(\\overline{a}\\cdot b)}\\big)\\\\\n&  =NAND(\\overline{a}+b, \\overline{b}+a)\\\\\n&  =NAND\\big(\\overline{a}+(a\\cdot b), \\overline{b}+(a\\cdot b)\\big)\\\\\n&  =NAND\\Big(NAND\\big(a\\cdot (\\overline{a\\cdot b})\\big), NAND\\big(b\\cdot (\\overline{a\\cdot b})\\big)\\Big)\\\\\n&  =NAND\\Bigg(NAND\\Big(a\\cdot\\big(NAND(a,b)\\big)\\Big), NAND\\Big(b\\cdot\\big(NAND(a,b)\\big)\\Big)\\Bigg)\\\\\n\\end{aligned}\n$$\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/18/16-18-48-145a55345ab36b1cb39652e8ff9fa102-XOR-GATE-4-9e85a7.png)\n\n```nand2tetris-hdl{9}{numberLines: true}\n/**\n * Xor gate:\n * out = a xor b\n */\nCHIP Xor {\n  IN a, b;\n  OUT out;\n  PARTS:\n  // Put your code here:\n  Nand(a = a, b = b, out = nandAB);\n  Nand(a = a, b = nandAB, out = nandABA);\n  Nand(a = b, b = nandAB, out = nandABB);\n  Nand(a = nandABA, b = nandABB, out = out);\n```","fields":{"slug":"/NAND-as-Universal-Gate/"},"frontmatter":{"title":"NAND as Universal Gate","date":"May 18, 2022","description":"最近在看 Nand2Tetris 的课程，这里简单记录下如何用与非门实现其他逻辑门，也就是标题 NAND as Universal Gate。A universal gate is a gate which can implement any Boolean function without need to use any other gate type.","categories":["技术文章"],"tags":["Comupte"],"toc":true}}},"pageContext":{"slug":"/NAND-as-Universal-Gate/","previous":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/在-Gatsby-MDX-中使用-LaTeX.mdx"},"fields":{"slug":"/在-Gatsby-MDX-中使用-LaTeX/"},"frontmatter":{"title":"在 Gatsby MDX 中使用 LaTeX"}},"next":null,"frontmatter":{"title":"NAND as Universal Gate","date":"2022-05-18T10:19:49.284Z","tags":["Comupte"],"categories":["技术文章"],"description":"最近在看 Nand2Tetris 的课程，这里简单记录下如何用与非门实现其他逻辑门，也就是标题 NAND as Universal Gate。A universal gate is a gate which can implement any Boolean function without need to use any other gate type.","toc":true}}},"staticQueryHashes":["2786614800","3000541721","3828236571"],"slicesMap":{}}