{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-深入了解-vue-js源码-1-md","path":"/深入了解Vue-js源码-1/","result":{"data":{"site":{"siteMetadata":{"title":"Wizard's Lair","postCopyright":true,"siteUrl":"https://wizd.dev","author":{"name":"w1zd"}}},"mdx":{"id":"4aa7d685-a4f8-5b8c-b4fe-fdca8b91094f","excerpt":"本系列文章详细介绍了Vue.js源代码，对其中的JavaScript代码进行了详细的说明。 并且尝试将概念分解为JavaScript初学者可以理解的水平。 Vue 构造函数\n\nVue 实例是深入了解 Vue.js 源代码的最合适的切入点。 正如 Vue.js 指南所解释的那样，“每个 Vue 应用程序都是通过使用…","body":"\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-42-38-5f75fb98c1e274b008e1820cfe81599d-vue-constructor-fdc04a.png)\n\n本系列文章详细介绍了Vue.js源代码，对其中的JavaScript代码进行了详细的说明。 并且尝试将概念分解为JavaScript初学者可以理解的水平。\n\n## Vue 构造函数\n\n Vue 实例是深入了解 Vue.js 源代码的最合适的切入点。 正如 Vue.js 指南所解释的那样，“每个 Vue 应用程序都是通过使用 Vue 构造函数创建一个新的 Vue 实例来开始的。”\n\n\n\n在 Vue.js 源代码中，创建新的 Vue 实例是通过使用 Vue 对象构造函数来实现的：\n\n```javascript\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n```\n\n我们可以将对象构造函数理解为用于创建的模板。而对象构造函数通常按约定以大写字母开头：\n\n```javascript\n// Vue 构造函数的声明\nfunction Vue (options) {\n\t// 构造函数函数体\n}\n```\n\n我们一般使用 `new` 关键字调用对象构造函数。 例如，您可以按如下方式调用Vue构造函数：\n\n```javascript\nvar vm = new Vue({\n  // options\n})\n```\n\n调用对象构造函数会返回一个新对象，并将函数内部的 `this` 关键字设置为最终返回的对象。\n\nVue 构造函数会接收一个参数：`options`。\n\n```javascript\nfunction Vue (options) {\n\t[. . . .]\n}\n```\n\nVue 对象构造函数中会使用 `if` 语句来判断当前环境是否为生产环境：\n\n```javascript\nif (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n   ) {\n  warn('Vue is a constructor and should be called with the `new` keyword');\n}\n```\n\n如果当前的环境为生产环境，则 `if` 语句中的 `&&` 短路运算会返回 `false`, 并且后续的表达式`!(this instanceof Vue)`将不会被执行。\n\n```javascript\nprocess.env.NODE_ENV !== 'production' &&\n```\n\n如果您在开发环境中，则构造函数中会检查 `this` 是否为 Vue 的实例。\n\n```javascript\n!(this instanceof Vue)\n```\n\n如果您在开发环境中并且 `this` 不是 Vue 的实例，则构造函数中会调用 `warn` 函数并传递一个字符串作为参数，通知开发人员应该使用 `new`关键字将 Vue 作为函数构造函数调用。\n\n\n\n我们将在另一篇文章中查看 `warn` 函数的实现细节。 如果您仔细观察，会发现传递给 `warn` 函数的参数使用到了单引号和反引号：\n\n```javascript\nwarn('Vue is a constructor and should be called with the `new` keyword');\n```\n\n在单引号中间使用反引号，可以防止单引号的引用过早结束。\n\n最后，Vue函数构造函数调用 `this._init` 方法，并将构造函数函数被调用时接收到的 `options`参数作为实参传递给该方法：\n\n```javascript\nfunction Vue (options) {\n  [....]\n  this._init(options);\n}\n```\n\n但是请大家思考一个问题， 这个我们调用的 `this._init` 是在哪里定义的呢？正如我们所看到的，构造函数内部并未对这个 `._init` 方法进行定义。\n\n快速进行全局搜索源码可以发现 `._init` 方法是在名为 `initMixin` 的函数中添加到 `Vue.prototype` 上的。\n\n下一篇文章，我将带领大家一起探究 `initMixin` 方法究竟做了什么事情。\n","fields":{"slug":"/深入了解Vue-js源码-1/"},"frontmatter":{"title":"深入了解Vue.js源码(#1-Vue构造函数)","date":"May 07, 2019","description":"本系列文章详细介绍了Vue.js源代码，对其中的JavaScript代码进行了详细的说明。 并且尝试将概念分解为JavaScript初学者可以理解的水平。","categories":["技术文章"],"tags":["Vue"],"toc":true}}},"pageContext":{"slug":"/深入了解Vue-js源码-1/","previous":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/CentOS使用yum安装MySQL.md"},"fields":{"slug":"/CentOS使用yum安装MySQL/"},"frontmatter":{"title":"CentOS使用yum安装MySQL"}},"next":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/LeetCode刷题系列-两数之和.md"},"fields":{"slug":"/LeetCode刷题系列-两数之和/"},"frontmatter":{"title":"LeetCode刷题系列-两数之和"}},"frontmatter":{"title":"深入了解Vue.js源码(#1-Vue构造函数)","date":"2019-05-07T18:31:02.284Z","tags":["Vue"],"categories":["技术文章"],"description":"本系列文章详细介绍了Vue.js源代码，对其中的JavaScript代码进行了详细的说明。 并且尝试将概念分解为JavaScript初学者可以理解的水平。","toc":true}}},"staticQueryHashes":["2786614800","3000541721","3828236571"],"slicesMap":{}}