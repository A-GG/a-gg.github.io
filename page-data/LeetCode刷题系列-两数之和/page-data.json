{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-leet-code刷题系列-两数之和-md","path":"/LeetCode刷题系列-两数之和/","result":{"data":{"site":{"siteMetadata":{"title":"Wizard's Lair","postCopyright":true,"siteUrl":"https://wizd.dev","author":{"name":"w1zd"}}},"mdx":{"id":"d71135e4-824a-5a61-b1eb-ffeb155fe78b","excerpt":"题目 给定一个整数数组  和一个目标值 ，请你在该数组中找出和为目标值的那  整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例\n答案\n\n本题要求其实算是比较简单，只需要我们找出数组中任意两个相加之和等于目标数值的元素的下标即可…","body":"\n## 题目\n\n> 给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那 `两个` 整数，并返回他们的数组下标。\n> 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n## 示例\n\n```markdown\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n## 答案\n\n本题要求其实算是比较简单，只需要我们找出数组中任意两个相加之和等于目标数值的元素的下标即可。\n而且题目说我们可以假设输入只会对应一个答案，也就是说不会出现多组数据相加都能得出目标数值的情况，我们只需要找一组，大大降低了难度。\n\n### 方案一： 双层for循环\n\n最简单的方案则是双层for循环，进行遍历判断，但是这种方案时间复杂度相对来说比较高 `O(n^2)`\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    for(var i = 0; i < nums.length; i ++){\n        for(var j = nums.length - 1; j > i; j --){\n            if(nums[i] + nums[j] == target){\n                return [i, j];\n            }\n        }\n    }\n    retrun []\n};\n```\n\n### 方案二： hashmap\n\n相比上面的双层for循环，这个方法的时间复杂度会比较低 `O(n)`\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    let hashMap = {};\n    for(var i = 0; i < nums.length; i ++){\n        if(hashMap.hasOwnProperty(target - nums[i])){\n            return [i, hashMap[target-nums[i]]];\n        }\n        hashMap[nums[i]] = i;\n    }\n};\n```\n","fields":{"slug":"/LeetCode刷题系列-两数之和/"},"frontmatter":{"title":"LeetCode刷题系列-两数之和","date":"July 23, 2019","description":"给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。","categories":["技术文章"],"tags":["Algorithm","LeetCode","JavaScript"],"toc":true}}},"pageContext":{"slug":"/LeetCode刷题系列-两数之和/","previous":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/深入了解Vue-js源码-1.md"},"fields":{"slug":"/深入了解Vue-js源码-1/"},"frontmatter":{"title":"深入了解Vue.js源码(#1-Vue构造函数)"}},"next":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/前端技能路线图-2019.md"},"fields":{"slug":"/前端技能路线图-2019/"},"frontmatter":{"title":"前端技能路线图-2019"}},"frontmatter":{"title":"LeetCode刷题系列-两数之和","date":"2019-07-23T20:14:49.284Z","tags":["Algorithm","LeetCode","JavaScript"],"categories":["技术文章"],"description":"给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。","toc":true}}},"staticQueryHashes":["2786614800","3000541721","3828236571"],"slicesMap":{}}