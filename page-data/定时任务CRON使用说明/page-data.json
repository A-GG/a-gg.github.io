{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-定时任务cron使用说明-md","path":"/定时任务CRON使用说明/","result":{"data":{"site":{"siteMetadata":{"title":"Wizard's Lair","postCopyright":true,"siteUrl":"https://wizd.dev","author":{"name":"w1zd"}}},"mdx":{"id":"a43b1ada-ed45-53c6-a9a9-26110daeec35","excerpt":"Cron 简介  是类 Unix 系统中用于执行定时任务的工具，我们可以通过  在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。 最常使用的是服务器运维和管理方向，当然也可用于其他地方，如：定期下载文件等。\n\nThe origin of the name cron is from the Greek…","body":"\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-45-00-28024130c0135066048c989955be90e4-cover-cron-fb63c9.png)\n\n## Cron 简介\n\n`Cron` 是类 Unix 系统中用于执行定时任务的工具，我们可以通过 `cron` 在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。`cron` 最常使用的是服务器运维和管理方向，当然也可用于其他地方，如：定期下载文件等。\n\n> The origin of the name *cron* is from the Greek word for time, χρόνος ([chronos](https://en.wikipedia.org/wiki/Chronos)).\n>\n> Cron 的名字来历是古希腊神话中代表时间的神 Chronos\n\n## Cron 使用\n\n`crond` 可以理解为是用来执行定时任务的服务，而 `crontab` 则是用来管理定时任务的。\n\n要使用 `Cron` 我们首先得确保自己系统的 `crond` 守护进程在运行，如果没有，则执行运行命令（什么？你没安装，[点这儿](https://google.com))\n\n```bash\n# 查看 crond 状态\nsystemctl status  crond.service\n# 启动 crond\nsystemctl start  crond.service\n```\n\n`Cron` 任务的管理工具 `crontab` ，使用格外简单：\n\n```bash\n# crontab [选项]\n\n#查看当前用户的 crontab，输入\ncrontab –l \n# 编辑 crontab\ncrontab –e \n# 删除 crontab\ncrontab –r  \n```\n\n\n\n我们直接 `crontab -e` 编辑当前用户的定时任务，这里需要用到 `Cron` 的语法（先直接用后面会讲具体用法）\n\n```bash\n# 当你执行了 crontab -e 之后，会自动调用VI编辑器打开一个空文件用作输入\n# 我们直接输入下面这一行内容，然后:wq 保存退出即可\n\n* * * * * echo `date` >> ~/hello.txt\n```\n\n保存成功后，使用 `crontab -l`，你会发现你的定时任务中已经多了一条，这条任务的作用就是每分钟向 `~/hello.txt`  中写入当前系统时间。\n\n```bash\n$crontab -l\n* * * * * echo `date` >> ~/hello.txt\n```\n\n静待一会儿，去查看`~/hello.txt` 你会发现已经有内容了，就意味着我们的定时任务ok啦。\n\n```bash\n$cat hello.txt\nThu Apr 29 11:07:01 CST 2021\nThu Apr 29 11:08:01 CST 2021\nThu Apr 29 11:09:01 CST 2021\nThu Apr 29 11:10:01 CST 2021\nThu Apr 29 11:11:01 CST 2021\n```\n\n如果你不想要这个定时任务了，直接执行 `crontab -r` 即可，这里如果你只有一个任务，那就直接删掉了。如果你有多个任务，他会自动打开 vi，你只需要删掉不想要的那一行，保存退出即可。\n\n\n\n## Cron 语法\n\n```bash\n┌──分钟（0 - 59）\n│ ┌──小时（0 - 23）\n│ │ ┌──日（1 - 31）\n│ │ │ ┌─月（1 - 12）\n│ │ │ │ ┌─星期（0 - 6，表示从周日到周六）\n│ │ │ │ │\n*  *  *  *  * <被执行的命令>\n```\n\n每部分的取值可以有如下表示方式：\n\n- 逗号（**`,`**）表示列举，例如： **`1,3,4,7 * * * * echo hello world`** 表示，在每小时的1、3、4、7分时，打印\"hello world\"。\n- 中划线（**`-`**）表示范围，例如：**`1-6 * * * * echo hello world`** ，表示，每小时的1到6分钟内，每分钟都会打印\"hello world\"。\n- 星号（**`*`**）代表任何可能的值。例如：在“小时”里的星号等于是“每一个小时”。\n- 百分号(**`%`**) 表示“每\"。例如：**`*%10 * * * * echo hello world`** 表示，每10分钟打印一回\"hello world\"。\n\n\n\n## Cron 注意事项(这部分不是特别关键)\n\n### 执行权限问题\n\n- **/etc/cron.allow** 如果这个文件存在，那么只有被添加到这个文件中的用户才能使用 cron\n- **/etc/cron.deny** 如果 **/etc/cron.allow** 不存在，但是这个文件存在，那么用户不在这个文件里才能使用cron\n\n### 定时任务查找位置\n\n* `/etc/crontab`：为系统任务时间表（crontab）。以前用于跑以日为单位、以周为单位、以月为单位的任务，现在用于跑 `anacron`。\n* `/etc/cron.d/`：该目录包含系统层次的任务时间表（crontabs），不同用户共同使用。\n* `/var/spool/cron/`：该路径包含用户通过 `crontab` 命令创建的任务时间表（crontables），这个不要手动去改哦，要改就通过 `crontab` 命令改。\n\n\n\n\n\n## 总结\n\n`Cron` 可以非常方便的帮我们在 Linux 系统中执行定时任务，还有很多其他有周期任务需求的系统中也都支持 `Cron` 语法，比如我前面写过的[[GithubActions入门]]，如果你想定时执行你的 Github Action 就可以使用 `Cron`。","fields":{"slug":"/定时任务CRON使用说明/"},"frontmatter":{"title":"定时任务 cron 使用说明","date":"April 29, 2021","description":"Cron 是类 Unix 系统中用于执行定时任务的工具，我们可以通过 Cron 在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。Cron 最常使用的是服务器运维和管理方向，当然也可用于其他地方，如：定期下载文件等。","categories":["技术文章"],"tags":["Linux","DevOps"],"toc":false}}},"pageContext":{"slug":"/定时任务CRON使用说明/","previous":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/斐讯K2刷OpenWrt+树莓派刷OpenWrt-01.md"},"fields":{"slug":"/斐讯K2刷OpenWrt+树莓派刷OpenWrt-01/"},"frontmatter":{"title":"树莓派刷OpenWrt-获取固件"}},"next":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/家庭布网实录.md"},"fields":{"slug":"/家庭布网实录/"},"frontmatter":{"title":"家庭布网实录"}},"frontmatter":{"title":"定时任务 cron 使用说明","date":"2021-04-29T11:45:12.284Z","tags":["Linux","DevOps"],"categories":["技术文章"],"description":"Cron 是类 Unix 系统中用于执行定时任务的工具，我们可以通过 Cron 在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。Cron 最常使用的是服务器运维和管理方向，当然也可用于其他地方，如：定期下载文件等。","toc":false}}},"staticQueryHashes":["2786614800","3000541721","3828236571"],"slicesMap":{}}