{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-trojan-https-多域名部署方案-md","path":"/trojan-https-多域名部署方案/","result":{"data":{"site":{"siteMetadata":{"title":"Wizard's Lair","postCopyright":true,"siteUrl":"https://wizd.dev","author":{"name":"w1zd"}}},"mdx":{"id":"727f6140-06df-5f18-adb0-4dbc03183194","excerpt":"Trojan 原理简介 最简单来讲， Trojan 是通过 HTTPS 的方式进行穿墙操作的， 也就是所有的请求， 先通过 Trojan 客户端加工之后， 以正常 HTTPS 请求的方式发往墙外服务器， 然后在 Trojan 服务端， 对请求内容进行解析后， 将原请求转发给目标服务器…","body":"\n## Trojan 原理简介\n\n最简单来讲， Trojan 是通过 HTTPS 的方式进行穿墙操作的， 也就是所有的请求， 先通过 Trojan 客户端加工之后， 以正常 HTTPS 请求的方式发往墙外服务器， 然后在 Trojan 服务端， 对请求内容进行解析后， 将原请求转发给目标服务器，再将目标服务器返回的数据包装成正常的 HTTPS 响应包返回给 Trojan 客户端。\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-23-9a16a4b0495228a521a9d199a5726835-TrojanDataFlow-a4e62d.png)\n\n## Trojan 和 Nginx 的配合模式\n\n由于整个穿墙操作借助的是 TLS， 所以 Trojan 需要监听 443 端口， 而 Nginx 则是在 Trojan 后面提供网页服务的。 也就是说其实 Trojan 会导致 Nginx 无法使用 HTTPS， Trojan 会独占 443 端口， 只为穿墙域名提供 HTTPS 服务， Nginx 只能使用 HTTP。 这就很蛋疼了， 为了穿墙导致其他域名全部无法使用 HTTPS， 如果这台服务器单纯就是用来扶墙的还好， 但是如果还有别的站点需要进行托管， 那就很不爽了。\n\n我们可以通过一张图来看一下 Trojan 和 Nginx 的配合模式。\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-02-f7ba184481751dd1b336a655ffdc0d1d-trojan-nginx-cff97a.png)\n\n单看图，是不是觉得挺好啊，Trojan 这不是能识别 Trojan 请求和非 Trojan 请求么？ 那其他需要托管的站点通过浏览器访问的时候，不都应该是正常的么？ 想法是美好的，当然如果你不在乎是不是 HTTPS，现实也很美好。\n\n## 问题是什么\n\nTrojan 只能为一个域名配置 HTTPS，而它本身又独占了 443 端口， 就导致你的<font color='red'>***整台服务器上就只能有一个 HTTPS 域名服务***</font>, 多个 HTTPS 配置不了。\n\n那么，如何在使用 Trojan 的时候， 部署多个 HTTPS 站点呢？\n\n## 解决方案\n\n在[Trojan 和 Nginx 的配合模式](#Trojan-和-Nginx-的配合模式)一节中我们知道， 所有请求先是经过 Trojan， 然后由 Trojan 进行甄别之后决定是否要交给 Nginx 进行处理。\n\n我们把处理流程进行一下更改，其实就能是实现我们的需求了。 如图:\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-14-071491d6e3b416d08e1f717e6efeebdc-nginxinfront-a56ad6.png)\n\n这样的话，我们就把 443 端口从 Trojan 中解放出来交还给了 Nginx。 所有请求先到达 Nginx， Nginx 中进行处理， 如果请求的是为 Trojan 配置的域名， 那么就将请求转发给 Trojan， 如果不是则由 Nginx 自行处理。\n\n使用 Nginx `ngx_stream_ssl_preread_module` 这个模块就能满足我们的诉求。 [看这儿](https://github.com/trojan-gfw/trojan/issues/131#issuecomment-535122993)\n\n### 具体配置\n\n***/etc/nginx/nginx.conf***\n\n```nginx\n...\nstream{\n        map $ssl_preread_server_name $name {\n            trojan.xxx.com trojan;\n            anotherdomain.com nginx;\n        }\n\n        upstream trojan {\n            server 127.0.0.1:8889;\n        }\n\n        upstream nginx {\n            server 127.0.0.1:8888;\n        }\n\n        server {\n            listen      443;\n            listen      [::]:443;\n            proxy_pass  $name;\n            ssl_preread on;\n        }\n}\nhttp {\n    server {\n        server {\n        listen       8888 ssl;\n        listen       [::]:8888 ssl;\n        server_name  anotherdomain.com;\n        ssl_certificate  xxxxxx.crt;\n        ssl_certificate_key xxxxxxx.key;\n        sl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers         HIGH:!aNULL:!MD5;\n        ...\n    }\n}\n...\n```\n\n***/usr/src/trojan/server.conf***\n\n```json\n{\n    \"run_type\": \"server\",\n    \"local_addr\": \"0.0.0.0\",\n    \"local_port\": 8889,\n    \"remote_addr\": \"127.0.0.1\",\n    \"remote_port\": 80,\n\n    ...\n}\n```\n\n## 后续更新\n\n这里要注意一下，可能是不同方式安装的 Nginx 版本不一致的问题，可能会导致安装之后 `ngx_stream_ssl_preread_module` 模块找不到的问题。\n\n可以通过以下两种方式解决：\n1. 通过 yum 安装 Nginx（推荐）[可以参考之前的文章](https://wizd.dev/CentOS7%E5%AE%89%E8%A3%85Nginx/)\n2. 自行下载编译 Nginx \n...\n\n还可能会遇到\n```\nnginx: [emerg] unknown directive \"stream\" in /etc/nginx/nginx.conf:18\n```\n只需要\n```\nyum install nginx-mod-stream.x86_64\n```\n","fields":{"slug":"/trojan-https-多域名部署方案/"},"frontmatter":{"title":"使用Trojan 的情况下多个 HTTPS 域名部署方案","date":"August 13, 2020","description":"Trojan 是目前比较便捷且可靠的扶墙工具， 但是其本身工作方式会导致在使用 Trojan 的同时， 多 HTTPS 域名部署会是一个小问题， 本文带你解决这个问题。","categories":["技术文章"],"tags":["Trojan","Linux","Nginx"],"toc":null}}},"pageContext":{"slug":"/trojan-https-多域名部署方案/","previous":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/PGP-是怎么工作的.md"},"fields":{"slug":"/PGP-是怎么工作的/"},"frontmatter":{"title":"PGP 是怎么工作的"}},"next":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/Headless-Server-是什么意思？.md"},"fields":{"slug":"/Headless-Server-是什么意思？/"},"frontmatter":{"title":"Headless Server 是个什么东西？"}},"frontmatter":{"title":"使用Trojan 的情况下多个 HTTPS 域名部署方案","date":"2020-08-13T16:32:59.284Z","tags":["Trojan","Linux","Nginx"],"categories":["技术文章"],"description":"Trojan 是目前比较便捷且可靠的扶墙工具， 但是其本身工作方式会导致在使用 Trojan 的同时， 多 HTTPS 域名部署会是一个小问题， 本文带你解决这个问题。"}}},"staticQueryHashes":["2786614800","3000541721","3828236571"],"slicesMap":{}}