{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-vue中的-global-event-bus-mdx","path":"/Vue中的Global-Event-Bus/","result":{"data":{"site":{"siteMetadata":{"title":"Wizard's Lair","postCopyright":true,"siteUrl":"https://wizd.dev","author":{"name":"w1zd"}}},"mdx":{"id":"dcb2b1df-e20f-56ed-9203-e7a25e1c72b8","excerpt":"适用场景 全局事件总线（Global Event Bus）一般用于远距离（非父子）组件之间的数据通信，是 Vue 中全局状态管理方案的一种。\n\n下图中的组件 B 和 组件 D 之间进行通信，则可以通过 Global Event Bus 来实现。\n\n基本原理\n\n全局事件总线（Global Event Bus…","body":"\n## 适用场景\n\n全局事件总线（Global Event Bus）一般用于远距离（非父子）组件之间的数据通信，是 Vue 中全局状态管理方案的一种。\n\n下图中的组件 B 和 组件 D 之间进行通信，则可以通过 Global Event Bus 来实现。\n\n![](https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-48-09-dac00e9525d0a78be5f994cf7254e432-comps-0a2b45.png)\n\n## 基本原理\n\n全局事件总线（Global Event Bus）本质上是通过在全局创建一个空的 Vue 实例，当前项目内所有的组件皆可向该实例上注册事件，相应的，在项目内任意组件内触发该事件，即可实现组件之间的通讯。\n\n## 使用方法\n\n### 第一步：创建实例\n\n创建一个空的 Vue 实例\n\n```javascript\nexport const EventBus = new Vue();\n```\n\n### 第二步：注册事件\n\n在组件 A 中使用 `$on` 方法向 `EventBus` 注册事件\n\n```html\n<template>\n  <div>{{ count }}</div>\n</template>\n\n<script>\nimport { EventBus } from \"../eventbus\";\nexport default {\n  data() {\n    return {\n      count: 0,\n    };\n  },\n  methods: {\n    increaseCount() {\n      this.count++;\n    },\n  },\n  created() {\n    EventBus.$on(\"increase-count\", this.increaseCount);\n  },\n};\n</script>\n```\n\n### 第三步： 触发事件\n\n在组件 D 中使用 `$emit` 方法触发注册在 `EventBus` 上的事件\n\n```html\n<template>\n  <div>\n    <button @click=\"clickHandler\">+1</button>\n  </div>\n</template>\n\n<script>\nimport { EventBus } from \"../eventbus\";\nexport default {\n  methods: {\n    clickHandler() {\n      EventBus.$emit(\"increase-count\");\n    },\n  },\n};\n</script>\n```\n\n\n\n### 第四步：解绑事件\n\n经过上面三步之后，我们已经可以实现组件 A 和组件 D 之间的通信啦！但是要注意，我们注册给 `EventBus` 的事件，需要在组件 A 销毁的时候取消注册\n\n在组件 A 的 `beforeDestory` 钩子函数中使用 `$off` 方法取消已注册的事件\n\n```html\n<template>\n  <div>{{ count }}</div>\n</template>\n\n<script>\nimport { EventBus } from \"../eventbus\";\nexport default {\n  data() {\n    return {\n      count: 0,\n    };\n  },\n  methods: {\n    increaseCount() {\n      this.count++;\n    },\n  },\n  created() {\n    EventBus.$on(\"increase-count\", this.increaseCount);\n  },\n  beforeDestory() {\n    EventBus.$off('increase-count', this.increaseCount);\n  }\n};\n</script>\n```\n\n## 核心 API \n\n### `$on`\n\n**参数**：\n`{string} event`  命名需要使用 Kebab Case\n`{Function} callback`\n\n**用法**：\n监听当前实例上的自定义事件。事件可以由 vm.$emit 触发。回调函数会接收所有传入事件触发函数的额外参数。\n\n**示例**：\n\n```javascript\nvm.$on('test', function (msg) {\n  console.log(msg)\n})\nvm.$emit('test', 'hi')\n// => \"hi\"\n```\n\n\n### `$emit`\n\n**参数**：\n\n`{string} eventName`\n`[...args]`\n触发当前实例上的事件。附加参数都会传给监听器回调。\n\n**示例**：\n\n只配合一个事件名使用 `$emit`：\n\n```javascript\nvm.$emit('事件名')\n```\n\n传递额外的参数使用 `$emit`:\n\n```javascript\nconst foo = (bar) => console.log(bar);\nvm.$on('trigger-foo', foo)\nvm.$emit('trigger-foo', 'Hello world')\n```\n\n\n\n### `$off`\n\n**参数**：\n\n`{string | Array<string>} event` (只在 2.2.2+ 支持数组)\n`{Function} [callback]`\n\n**用法**：\n\n移除自定义事件监听器。\n\n- 如果没有提供参数，则移除所有的事件监听器 `$emit()`\n- 如果只提供了事件，则移除该事件所有的监听器 `$emit('事件名称')`\n- 如果同时提供了事件与回调，则只移除这个回调的监听器 `$emit('事件名称', 事件处理函数)`\n\n## 总结\n\n借助 Vue 提供的相关 API，使用全局事件总线可以非常方便的实现非父子组件之间的通信。\n\n全局事件总线这种方案实际开发中使用的较少，几乎用不到，Vue3 中已经将其弃用，因为其存在如下问题：\n\n1. 破坏了项目数据流，会让项目后续维护困难\n2. 所有的事件都注册在同一对象上，无法做模块划分，且事件命名易产生冲突\n3. 使用`$off`取消注册事件需要和`$on`成对出现，但是经常会被忘记\n\nVueX 以及 Pinia 等工具提供了更为清晰完善的全局状态管理方案，若项目中遇到较为复杂的组件通信场景，首先考虑这些工具，而不是使用 Global Event Bus。","fields":{"slug":"/Vue中的Global-Event-Bus/"},"frontmatter":{"title":"Vue2 中的 Global Event Bus","date":"March 12, 2022","description":"全局事件总线（Global Event Bus）一般用于远距离（非父子）组件之间的数据通信，是 Vue 中全局状态管理方案的一种。","categories":["技术文章"],"tags":["FrontEnd","Vue"],"toc":true}}},"pageContext":{"slug":"/Vue中的Global-Event-Bus/","previous":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/AuthorziedKey配置小记.mdx"},"fields":{"slug":"/AuthorziedKey配置小记/"},"frontmatter":{"title":"AuthorziedKey配置小记"}},"next":{"internal":{"contentFilePath":"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/在-Gatsby-MDX-中使用-LaTeX.mdx"},"fields":{"slug":"/在-Gatsby-MDX-中使用-LaTeX/"},"frontmatter":{"title":"在 Gatsby MDX 中使用 LaTeX"}},"frontmatter":{"title":"Vue2 中的 Global Event Bus","date":"2022-03-12T11:27:32.284Z","tags":["FrontEnd","Vue"],"categories":["技术文章"],"description":"全局事件总线（Global Event Bus）一般用于远距离（非父子）组件之间的数据通信，是 Vue 中全局状态管理方案的一种。","toc":true}}},"staticQueryHashes":["2786614800","3000541721","3828236571"],"slicesMap":{}}