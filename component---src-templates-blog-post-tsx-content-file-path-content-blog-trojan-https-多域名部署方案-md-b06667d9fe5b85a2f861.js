"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[6330],{4519:function(e,n,a){a.r(n),a.d(n,{default:function(){return d}});var t=a(8453),s=a(6540);function l(e){const n=Object.assign({h2:"h2",a:"a",span:"span",p:"p",img:"img",em:"em",strong:"strong",h3:"h3",ol:"ol",li:"li"},(0,t.RP)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.h2,{id:"trojan-原理简介",style:{position:"relative"}},s.createElement(n.a,{href:"#trojan-%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B","aria-label":"trojan 原理简介 permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Trojan 原理简介"),"\n",s.createElement(n.p,null,"最简单来讲， Trojan 是通过 HTTPS 的方式进行穿墙操作的， 也就是所有的请求， 先通过 Trojan 客户端加工之后， 以正常 HTTPS 请求的方式发往墙外服务器， 然后在 Trojan 服务端， 对请求内容进行解析后， 将原请求转发给目标服务器，再将目标服务器返回的数据包装成正常的 HTTPS 响应包返回给 Trojan 客户端。"),"\n",s.createElement(n.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-23-9a16a4b0495228a521a9d199a5726835-TrojanDataFlow-a4e62d.png",alt:""}),"\n",s.createElement(n.h2,{id:"trojan-和-nginx-的配合模式",style:{position:"relative"}},s.createElement(n.a,{href:"#trojan-%E5%92%8C-nginx-%E7%9A%84%E9%85%8D%E5%90%88%E6%A8%A1%E5%BC%8F","aria-label":"trojan 和 nginx 的配合模式 permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Trojan 和 Nginx 的配合模式"),"\n",s.createElement(n.p,null,"由于整个穿墙操作借助的是 TLS， 所以 Trojan 需要监听 443 端口， 而 Nginx 则是在 Trojan 后面提供网页服务的。 也就是说其实 Trojan 会导致 Nginx 无法使用 HTTPS， Trojan 会独占 443 端口， 只为穿墙域名提供 HTTPS 服务， Nginx 只能使用 HTTP。 这就很蛋疼了， 为了穿墙导致其他域名全部无法使用 HTTPS， 如果这台服务器单纯就是用来扶墙的还好， 但是如果还有别的站点需要进行托管， 那就很不爽了。"),"\n",s.createElement(n.p,null,"我们可以通过一张图来看一下 Trojan 和 Nginx 的配合模式。"),"\n",s.createElement(n.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-02-f7ba184481751dd1b336a655ffdc0d1d-trojan-nginx-cff97a.png",alt:""}),"\n",s.createElement(n.p,null,"单看图，是不是觉得挺好啊，Trojan 这不是能识别 Trojan 请求和非 Trojan 请求么？ 那其他需要托管的站点通过浏览器访问的时候，不都应该是正常的么？ 想法是美好的，当然如果你不在乎是不是 HTTPS，现实也很美好。"),"\n",s.createElement(n.h2,{id:"问题是什么",style:{position:"relative"}},s.createElement(n.a,{href:"#%E9%97%AE%E9%A2%98%E6%98%AF%E4%BB%80%E4%B9%88","aria-label":"问题是什么 permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"问题是什么"),"\n",s.createElement(n.p,null,"Trojan 只能为一个域名配置 HTTPS，而它本身又独占了 443 端口， 就导致你的",s.createElement("font",{color:"red"},s.createElement(n.em,null,s.createElement(n.strong,null,"整台服务器上就只能有一个 HTTPS 域名服务"))),", 多个 HTTPS 配置不了。"),"\n",s.createElement(n.p,null,"那么，如何在使用 Trojan 的时候， 部署多个 HTTPS 站点呢？"),"\n",s.createElement(n.h2,{id:"解决方案",style:{position:"relative"}},s.createElement(n.a,{href:"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88","aria-label":"解决方案 permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"解决方案"),"\n",s.createElement(n.p,null,"在",s.createElement(n.a,{href:"#Trojan-%E5%92%8C-Nginx-%E7%9A%84%E9%85%8D%E5%90%88%E6%A8%A1%E5%BC%8F"},"Trojan 和 Nginx 的配合模式"),"一节中我们知道， 所有请求先是经过 Trojan， 然后由 Trojan 进行甄别之后决定是否要交给 Nginx 进行处理。"),"\n",s.createElement(n.p,null,"我们把处理流程进行一下更改，其实就能是实现我们的需求了。 如图:"),"\n",s.createElement(n.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-47-14-071491d6e3b416d08e1f717e6efeebdc-nginxinfront-a56ad6.png",alt:""}),"\n",s.createElement(n.p,null,"这样的话，我们就把 443 端口从 Trojan 中解放出来交还给了 Nginx。 所有请求先到达 Nginx， Nginx 中进行处理， 如果请求的是为 Trojan 配置的域名， 那么就将请求转发给 Trojan， 如果不是则由 Nginx 自行处理。"),"\n",s.createElement(n.p,null,"使用 Nginx ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ngx_stream_ssl_preread_module</code>'}})," 这个模块就能满足我们的诉求。 ",s.createElement(n.a,{href:"https://github.com/trojan-gfw/trojan/issues/131#issuecomment-535122993"},"看这儿")),"\n",s.createElement(n.h3,{id:"具体配置",style:{position:"relative"}},s.createElement(n.a,{href:"#%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE","aria-label":"具体配置 permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"具体配置"),"\n",s.createElement(n.p,null,s.createElement(n.em,null,s.createElement(n.strong,null,"/etc/nginx/nginx.conf"))),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="nginx"><pre class="language-nginx"><code class="language-nginx">...\n<span class="token directive"><span class="token keyword">stream</span></span><span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">map</span> <span class="token variable">$ssl_preread_server_name</span> <span class="token variable">$name</span></span> <span class="token punctuation">{</span>\n            <span class="token directive"><span class="token keyword">trojan.xxx.com</span> trojan</span><span class="token punctuation">;</span>\n            <span class="token directive"><span class="token keyword">anotherdomain.com</span> nginx</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token directive"><span class="token keyword">upstream</span> trojan</span> <span class="token punctuation">{</span>\n            <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8889</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token directive"><span class="token keyword">upstream</span> nginx</span> <span class="token punctuation">{</span>\n            <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8888</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n            <span class="token directive"><span class="token keyword">listen</span>      <span class="token number">443</span></span><span class="token punctuation">;</span>\n            <span class="token directive"><span class="token keyword">listen</span>      [::]:443</span><span class="token punctuation">;</span>\n            <span class="token directive"><span class="token keyword">proxy_pass</span>  <span class="token variable">$name</span></span><span class="token punctuation">;</span>\n            <span class="token directive"><span class="token keyword">ssl_preread</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">8888</span> ssl</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">listen</span>       [::]:8888 ssl</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">server_name</span>  anotherdomain.com</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">ssl_certificate</span>  xxxxxx.crt</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">ssl_certificate_key</span> xxxxxxx.key</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">sl_protocols</span>       TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">ssl_ciphers</span>         HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>\n        ...\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n...</code></pre></div>'}}),"\n",s.createElement(n.p,null,s.createElement(n.em,null,s.createElement(n.strong,null,"/usr/src/trojan/server.conf"))),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"run_type"</span><span class="token operator">:</span> <span class="token string">"server"</span><span class="token punctuation">,</span>\n    <span class="token property">"local_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"local_port"</span><span class="token operator">:</span> <span class="token number">8889</span><span class="token punctuation">,</span>\n    <span class="token property">"remote_addr"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n    <span class="token property">"remote_port"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>\n\n    ...\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.h2,{id:"后续更新",style:{position:"relative"}},s.createElement(n.a,{href:"#%E5%90%8E%E7%BB%AD%E6%9B%B4%E6%96%B0","aria-label":"后续更新 permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"后续更新"),"\n",s.createElement(n.p,null,"这里要注意一下，可能是不同方式安装的 Nginx 版本不一致的问题，可能会导致安装之后 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ngx_stream_ssl_preread_module</code>'}})," 模块找不到的问题。"),"\n",s.createElement(n.p,null,"可以通过以下两种方式解决："),"\n",s.createElement(n.ol,null,"\n",s.createElement(n.li,null,"通过 yum 安装 Nginx（推荐）",s.createElement(n.a,{href:"https://wizd.dev/CentOS7%E5%AE%89%E8%A3%85Nginx/"},"可以参考之前的文章")),"\n",s.createElement(n.li,null,"自行下载编译 Nginx\n..."),"\n"),"\n",s.createElement(n.p,null,"还可能会遇到"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">nginx: [emerg] unknown directive "stream" in /etc/nginx/nginx.conf:18</code></pre></div>'}}),"\n",s.createElement(n.p,null,"只需要"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">yum install nginx-mod-stream.x86_64</code></pre></div>'}}))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.RP)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},r=a(1468),o=a(7947),p=a(1327),i=a(2171),m=a(9739);const u=e=>{let{data:n,pageContext:a,children:l}=e;const c=n.mdx,{title:u,postCopyright:d,author:g,siteUrl:h}=n.site.siteMetadata,{previous:k,next:E}=a,v=(0,r.d4)((e=>e.isDarkMode));return(0,s.useEffect)((()=>{(0,m.A)(".post-content img",{background:"#292a2d"})}),[]),s.createElement(o.A,{isFocus:!1,title:c.frontmatter.title,description:c.frontmatter.description},s.createElement("div",{className:"container"},s.createElement("article",{className:"post-wrap"},s.createElement("header",{className:"post-header"},s.createElement("h1",{className:"post-title"},c.frontmatter.title),s.createElement("div",{className:"post-meta"},s.createElement("span",{className:"post-time"},c.frontmatter.date)," ")),s.createElement("div",{className:"post-content"},s.createElement(t.xA,null,l)),d&&s.createElement("section",{className:"post-copyright"},s.createElement("p",{className:"copyright-item"},s.createElement("span",null,"Author: "),s.createElement("span",null,g.name)),s.createElement("p",{className:"copyright-item"},s.createElement("span",null,"Permalink:"),s.createElement("span",null,s.createElement("a",{href:h+c.fields.slug}," ",h+c.fields.slug," "))),s.createElement("p",{className:"copyright-item"},s.createElement("span",null,"License: "),s.createElement("span",null,s.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),s.createElement("section",{className:"post-tags"},s.createElement("div",null,s.createElement("span",null,"Tag(s):"),s.createElement("span",{className:"tag"},0!==c.frontmatter.tags.length&&c.frontmatter.tags.map((e=>s.createElement("a",{key:e,href:`/tag/${e}`},"#",e))))),s.createElement("div",null,s.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),s.createElement("span",null," · "),s.createElement("a",{href:n.site.siteMetadata.siteUrl},"home"))),s.createElement("section",{className:"post-nav"},k?s.createElement("a",{className:"prev",rel:"prev",href:k.fields.slug},k.frontmatter.title):s.createElement("span",{className:"prev"},"No More"),E?s.createElement("a",{className:"next",rel:"next",href:E.fields.slug},E.frontmatter.title):s.createElement("span",{className:"next"},"No More")),s.createElement(i.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${v?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),c.frontmatter.toc&&s.createElement(p.A,null))))};function d(e){return s.createElement(u,e,s.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-trojan-https-多域名部署方案-md-b06667d9fe5b85a2f861.js.map