"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[1180],{3102:function(n,a,s){s.r(a),s.d(a,{default:function(){return g}});var t=s(8453),e=s(6540);function p(n){const a=Object.assign({p:"p",img:"img",h2:"h2",a:"a",span:"span",ul:"ul",li:"li",h3:"h3",blockquote:"blockquote",em:"em",strong:"strong"},(0,t.RP)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,e.createElement(a.img,{src:"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/11-42-11-0f76f4f01901829907f9af90ae1aa770-reacthooks-586d4b.png",alt:""}),'\n"Hooks 到底是个啥玩意儿？？？"'),"\n",e.createElement(a.p,null,"你是不是有这样的疑惑？在你自认为已经了解了差不多 React 所有的内容的时候，Hooks 就这么出现了。"),"\n",e.createElement(a.p,null,"这就是前端开发人员的日常，技术从未停止更新。"),"\n",e.createElement(a.p,null,"学习新东西是一件很棒的事情吗？当然是！但有的时候我们又不得不思考：”为什么要学它？这个新东西有啥意义？我是必须得学他吗？“。"),"\n",e.createElement(a.p,null,"针对 Hooks 而言，上面的这个问题答案是否定的，你不需要立马就学它。如果您一直在使用 React，并且迄今为止一直在使用基于类的组件，那么就不必急于转向 Hooks。Hooks 是可选的，可以与现有组件配合使用。我相信当你因为要使用新东西而不得不重写整个代码库，你整个人都是崩溃的。"),"\n",e.createElement(a.h2,{id:"在函数组件中使用状态",style:{position:"relative"}},e.createElement(a.a,{href:"#%E5%9C%A8%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81","aria-label":"在函数组件中使用状态 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"在函数组件中使用状态"),"\n",e.createElement(a.p,null,"在使用 Hooks 之前，我们不能在函数组件中使用状态。这就意味着，如果您有一个经过精心设计和测试的函数组件，突然需要存储状态，那么你就不得不把他重构为一个类组件。"),"\n",e.createElement(a.p,null,"牛逼的来了，Hooks 让函数组件也能使用状态，就意味着我们不需要重构之前自己的写的代码，",e.createElement(a.a,{href:"https://scotch.io/courses/5-essential-react-concepts-to-know-before-learning-redux/presentational-and-container-component-pattern-in-react"},"可以点击这篇文章查看更多"),"。"),"\n",e.createElement(a.h2,{id:"类组件很笨重",style:{position:"relative"}},e.createElement(a.a,{href:"#%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%BE%88%E7%AC%A8%E9%87%8D","aria-label":"类组件很笨重 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"类组件很笨重"),"\n",e.createElement(a.p,null,"我们不的不承认的是，类组件附带了太多的东西。constructor，binding，“this”无处不在。使用函数组件可以消除许多这种情况，能让我们的代码更容易维护。"),"\n",e.createElement(a.p,null,"可以在",e.createElement(a.a,{href:"https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines"},"React文档中了解更多相关内容")),"\n",e.createElement(a.h2,{id:"更高的可读性",style:{position:"relative"}},e.createElement(a.a,{href:"#%E6%9B%B4%E9%AB%98%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7","aria-label":"更高的可读性 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"更高的可读性"),"\n",e.createElement(a.p,null,"由于 Hooks 允许我们在函数组件中使用状态，因此和类组件相比，这意味同样的功能，我们写出来的代码会更好。 这也会让我们的代码更具可读性。 我们再也不用担心方法是不是绑定了 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}}),"，也不必记住 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 之间的关系等等。 我们可以专心写代码了。"),"\n",e.createElement(a.h2,{id:"react-state-hook",style:{position:"relative"}},e.createElement(a.a,{href:"#react-state-hook","aria-label":"react state hook permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"React State Hook"),"\n",e.createElement(a.p,null,"状态，是React生态系统的基础。接下来我将通过介绍最常见的 Hook —— ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState()</code>'}})," 来让大家初步了解 Hooks。"),"\n",e.createElement(a.p,null,"我们先来看一下具有状态的类组件。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./styles.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n\tstate <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>initialValue<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t<span class="token function-variable function">setCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">This is a counter using a class</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n\t\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setCount<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click to Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"有了React Hooks 之后，我们可以重写这个类组件并删除很多内容，使其更易理解"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">CounterWithHooks</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>h2<span class="token operator">></span>This is a counter using hooks<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Click to Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> CounterWithHooks<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"代码变少了，但这到底是啥情况呢？"),"\n",e.createElement(a.h2,{id:"react-state-syntax",style:{position:"relative"}},e.createElement(a.a,{href:"#react-state-syntax","aria-label":"react state syntax permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"React State Syntax"),"\n",e.createElement(a.p,null,"在上面的代码里，我们已经用到了人生中第一个 React Hook"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"简单来讲，这里使用了数组的结构赋值。"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState()</code>'}})," 函数为我们提供了两个东西:"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"一个保存状态值的变量，在本例中称为count;"),"\n",e.createElement(a.li,null,"一个更改值的函数，在本例中称为setCount。"),"\n"),"\n",e.createElement(a.p,null,"当然，你可以为这两个东西起任何你想要的名字。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>myCount<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"而且，你也可以在你的代码中像使用正常变量/函数一样去用他们。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CounterWithHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">This is a counter using hooks</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click to Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"注意最上面的的",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState</code>'}})," Hook。 我们声明、结构了2个东西："),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"counter：是用来保存状态的"),"\n",e.createElement(a.li,null,"setCounter：是用来更改计数器变量的函数"),"\n"),"\n",e.createElement(a.p,null,"往下看代码，您会看到这一行："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"这是一个使用 Hooks 变量的例子。在JSX中，我们将 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}})," 变量放在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{}</code>'}})," 中，然后作为JavaScript执行它，最后将 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}})," 的值将展示在页面上。"),"\n",e.createElement(a.p,null,"我们来对照一下我们之前在类组件中使用状态的方式："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"你会发现，我么再也不需要关注 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 的使用了，这使我们的编码工作变得更加轻松了。"),"\n",e.createElement(a.p,null,"比如，当你没定义 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{count}</code>'}})," 的时候，VS Code编辑器直接就给你报警告了，你就更早的发现错误。 但是在运行代码之前，VS Code 可不会知道 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{this.state.count}</code>'}})," 是不是定义了。"),"\n",e.createElement(a.p,null,"我们继续往下看"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click to Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在这行代码中，我们使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setCount</code>'}})," 函数来更改 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}})," 变量。"),"\n",e.createElement(a.p,null,"单击按钮的时侯，我们把 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}})," 变量更新为1。由于状态变化，因此会触发视图重新渲染，React 会用新的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count </code>'}}),"值为我们更新视图。 真香！"),"\n",e.createElement(a.h2,{id:"那我怎么给数据一个初始值呢",style:{position:"relative"}},e.createElement(a.a,{href:"#%E9%82%A3%E6%88%91%E6%80%8E%E4%B9%88%E7%BB%99%E6%95%B0%E6%8D%AE%E4%B8%80%E4%B8%AA%E5%88%9D%E5%A7%8B%E5%80%BC%E5%91%A2","aria-label":"那我怎么给数据一个初始值呢 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"那我怎么给数据一个初始值呢？"),"\n",e.createElement(a.p,null,"您可以通过给",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState()</code>'}}),"传递参数来设置初始状态。 可以是一个硬编码的值："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"> <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"或者你也可以用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props</code>'}})," 传进来的值作为初始值："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"> <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"不论你的",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props.initialValue</code>'}}),"是啥，都会赋值给 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}})," 作为初始值。"),"\n",e.createElement(a.p,null,"总结一下：",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState</code>'}})," 最爽的地方在于，你可以像使用正常变量、函数一样处理你的状态。"),"\n",e.createElement(a.h2,{id:"那如果我有多个状态数据咋办",style:{position:"relative"}},e.createElement(a.a,{href:"#%E9%82%A3%E5%A6%82%E6%9E%9C%E6%88%91%E6%9C%89%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E5%92%8B%E5%8A%9E","aria-label":"那如果我有多个状态数据咋办 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"那如果我有多个状态数据咋办?"),"\n",e.createElement(a.p,null,"这是就是Hooks另外一个牛逼的地方了，在组件里，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState</code>'}}),"你想用多少次，就用多少次："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"> <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">const</span> <span class="token punctuation">[</span>title<span class="token punctuation">,</span> setTitle<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"This is my title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"如你所见，我们现在有3个独立的状态对象。例如，如果我们想更新年龄，只需调用",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setAge()</code>'}}),"函数。",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}}),"和",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">title</code>'}}),"也是一样。我们不再受制于旧的笨重的类组件方式——用",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setState()</code>'}}),"来管理一个超大的状态对象."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> props<span class="token punctuation">.</span>initialValue<span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"This is my title"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"那数据更新的时候我要做一些事情怎么做",style:{position:"relative"}},e.createElement(a.a,{href:"#%E9%82%A3%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%B6%E5%80%99%E6%88%91%E8%A6%81%E5%81%9A%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85%E6%80%8E%E4%B9%88%E5%81%9A","aria-label":"那数据更新的时候我要做一些事情怎么做 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"那数据更新的时候，我要做一些事情怎么做？"),"\n",e.createElement(a.p,null,"在使用函数组件 + React Hooks 这种模式下，我们再也不用去管什么生命周期了，什么 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">componentDidMount</code>'}}),"、",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">componentDidUpdate</code>'}}),"都可以统统见鬼去了。"),"\n",e.createElement(a.p,null,"你可能会问，那我用啥？？？别慌，兄弟！ React 给我们提供了另外一个钩子来干这事儿。"),"\n",e.createElement(a.h2,{id:"useeffect",style:{position:"relative"}},e.createElement(a.a,{href:"#useeffect","aria-label":"useeffect permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"useEffect"),"\n",e.createElement(a.p,null,"效果钩子 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," 是我们处理“副作用”的地方。"),"\n",e.createElement(a.p,null,"呃,副作用？那是啥?"),"\n",e.createElement(a.h3,{id:"副作用",style:{position:"relative"}},e.createElement(a.a,{href:"#%E5%89%AF%E4%BD%9C%E7%94%A8","aria-label":"副作用 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"副作用"),"\n",e.createElement(a.p,null,"那我们就先偏离一下正题，讨论一下副作用到底是什么。这有助于我们理解 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect()</code>'}})," 的作用以及为什么他很有用。"),"\n",e.createElement(a.p,null,"一个你看不懂的无聊的正规解释应该是："),"\n",e.createElement(a.blockquote,null,"\n",e.createElement(a.p,null,"​\t“在编程中，副作用是指在程序处理过程改变了程序范围之外的变量”"),"\n"),"\n",e.createElement(a.p,null,"用 React 术语来说，副作用其实意味着“当组件的变量或状态因某些外部事物而改变”。 例如："),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"\n",e.createElement(a.p,null,"组件接受了一个改变组件本身状态的props"),"\n"),"\n",e.createElement(a.li,null,"\n",e.createElement(a.p,null,"当组件进行接口调用并在接口返回结果是执行了某些操作（例如，更改了组件的状态）"),"\n"),"\n"),"\n",e.createElement(a.p,null,"那么为什么称之为副作用呢？"),"\n",e.createElement(a.p,null,e.createElement(a.em,null,e.createElement(a.strong,null,"我们不能确定这些代码的执行结果是什么")),"。 我们永远无法百分百确定我们的组件会接收到什么样的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props </code>'}}),"，也无法确定接口调用返回的结果数据是什么。 而且，我们无法确定这将如何影响我们的组件。"),"\n",e.createElement(a.p,null,"当然，我们也可以编写代码校验、处理错误等，但是我们最终还是不能确定这样的事情带来的副作用是什么。"),"\n",e.createElement(a.p,null,"所以可以这么说，当组件的状态因为一些外界因素改变的时候，这就可以称作副作用。"),"\n",e.createElement(a.p,null,"好了，我们可以回正题了。继续来看",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}}),"这个Hook。"),"\n",e.createElement(a.p,null,"在使用函数组件时，我们不再使用生命周期钩子函数，例如 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">componentDidMount</code>'}}),"，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">componentDidUpdate</code>'}}),"等。因此，可以这么说，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," Hook 代替了之前我们用到的React钩子函数。"),"\n",e.createElement(a.p,null,"让我们比较一下基于类的组件和",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," Hooks的使用方式"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n\t<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'I have just mounted!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Insert JSX here</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"用了",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}}),"之后"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'I have just mounted!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Insert JSX here</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在继续往下之前，我们必须要知道一件事儿，在默认情况下，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," Hook 在每次渲染和重新渲染时都会执行。"),"\n",e.createElement(a.p,null,"因此，只要组件中的状态发生变化或组件收到新的",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props</code>'}}),"时，组件都会重新渲染并导致`useEffect Hook 再次运行。"),"\n",e.createElement(a.h2,{id:"能不能只执行一次useeffect--就像-componentdidmount-一样",style:{position:"relative"}},e.createElement(a.a,{href:"#%E8%83%BD%E4%B8%8D%E8%83%BD%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1useeffect--%E5%B0%B1%E5%83%8F-componentdidmount-%E4%B8%80%E6%A0%B7","aria-label":"能不能只执行一次useeffect  就像 componentdidmount 一样 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"能不能只执行一次useEffect  (就像 componentDidMount 一样)"),"\n",e.createElement(a.p,null,"如果 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," Hook 在组件每次渲染时都运行，那么我们怎么才能做到 Hook 在挂载组件时仅运行一次？"),"\n",e.createElement(a.p,null,"例如，如果组件从接口获取数据，我们肯定不希望每次重新渲染组件时都去重新请求下数据吧？"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect()</code>'}})," 钩子接受第二个参数，是一个数组，其中包含导致 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," 钩子运行的依赖项的列表。当这些依赖项更改时，它将触发 Effect Hook。如果想要只运行一次 Effect Hook，那直接给他传递一个空数组，就OK啦！！"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'This only runs once\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"这就意味着 useEffect Hook 将在第一次渲染时正常运行。然而，当你的组件重新渲染时，useEffect 会想 “好吧，我已经运行了，数组中啥也没有，我没啥依赖项，谁变都跟我没关系了，所以我不必再运行了。” 然后就什么也不做了。"),"\n",e.createElement(a.blockquote,null,"\n",e.createElement(a.p,null,"总结： 空数组就意味着useEffect Hook只在挂载时运行一次"),"\n"),"\n",e.createElement(a.h2,{id:"当有内容更新时使用effect-就像componentdidupdate一样",style:{position:"relative"}},e.createElement(a.a,{href:"#%E5%BD%93%E6%9C%89%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0%E6%97%B6%E4%BD%BF%E7%94%A8effect-%E5%B0%B1%E5%83%8Fcomponentdidupdate%E4%B8%80%E6%A0%B7","aria-label":"当有内容更新时使用effect 就像componentdidupdate一样 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"当有内容更新时使用effect (就像componentDidUpdate一样)"),"\n",e.createElement(a.p,null,"我们已经介绍了如何确保 useEffect Hook仅运行一次，但是当我们的组件收到新的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props</code>'}})," 时该怎么办？ 或者我们要在状态更改时运行一些代码？ 其实Hooks 也能处理！"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The name props has changed!"</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"请注意，这次我们如何将东西传递给useEffect数组的，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props.name</code>'}}),"。"),"\n",e.createElement(a.p,null,"在这种情况下，useEffect Hook 将像往常一样在首次加载时运行。 每当您的组件从其父组件收到新的",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props.name</code>'}}),"时，都会触发useEffect Hook，并且运行其中的代码。"),"\n",e.createElement(a.p,null,"我们也可以使用状态变量来做同样的事情："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Chris"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The name state variable has changed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"每当",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}}),"发生变化时，组件就会重新渲染 ，useEffect Hook 就会运行并输出消息。而且因为这是一个数组，我们其实可以向它添加多个东西："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Chris"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Something has changed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"这样，当 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}})," 状态变量更改或 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props.name</code>'}})," 更改时，useEffect Hook 都将运行并显示控制台消息。"),"\n",e.createElement(a.h2,{id:"那我们能用componentwillunmount吗",style:{position:"relative"}},e.createElement(a.a,{href:"#%E9%82%A3%E6%88%91%E4%BB%AC%E8%83%BD%E7%94%A8componentwillunmount%E5%90%97","aria-label":"那我们能用componentwillunmount吗 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"那我们能用componentWillUnmount吗？"),"\n",e.createElement(a.p,null,"想要在组件即将卸载时运行一个Hook，我们只需从",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useEffect</code>'}})," Hook 返回一个函数"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'running effect\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'unmounting\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"那我们可以多个不同的-hooks-一起使用吗",style:{position:"relative"}},e.createElement(a.a,{href:"#%E9%82%A3%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84-hooks-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E5%90%97","aria-label":"那我们可以多个不同的 hooks 一起使用吗 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"那我们可以多个不同的 Hooks 一起使用吗？"),"\n",e.createElement(a.p,null,"当然! 你可以在组件中使用任意数量的Hooks，并根据需要混合使用"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"component has changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">return</span><span class="token punctuation">(</span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Some jsx here...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t)\n}</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"小结--接下来干啥呢",style:{position:"relative"}},e.createElement(a.a,{href:"#%E5%B0%8F%E7%BB%93--%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%B9%B2%E5%95%A5%E5%91%A2","aria-label":"小结  接下来干啥呢 permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"小结- 接下来干啥呢？"),"\n",e.createElement(a.p,null,"你这不已经学会React Hooks了么，Hooks允许我们使用老式的JavaScript函数来创建更简单的React组件，并减少大量代码。"),"\n",e.createElement(a.p,null,"接下来，手不痒痒么？当然是自己赶紧动手那Hooks做项目体验去啊！"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.RP)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},c=s(1468),l=s(7947),u=s(1327),r=s(2171),i=s(9739);const k=n=>{let{data:a,pageContext:s,children:p}=n;const o=a.mdx,{title:k,postCopyright:g,author:d,siteUrl:m}=a.site.siteMetadata,{previous:h,next:E}=s,f=(0,c.d4)((n=>n.isDarkMode));return(0,e.useEffect)((()=>{(0,i.A)(".post-content img",{background:"#292a2d"})}),[]),e.createElement(l.A,{isFocus:!1,title:o.frontmatter.title,description:o.frontmatter.description},e.createElement("div",{className:"container"},e.createElement("article",{className:"post-wrap"},e.createElement("header",{className:"post-header"},e.createElement("h1",{className:"post-title"},o.frontmatter.title),e.createElement("div",{className:"post-meta"},a.site.siteMetadata.author.name,"  /  ",e.createElement("span",{className:"post-time"},o.frontmatter.date)," ")),e.createElement("div",{className:"post-content"},e.createElement(t.xA,null,p)),g&&e.createElement("section",{className:"post-copyright"},e.createElement("p",{className:"copyright-item"},e.createElement("span",null,"Author: "),e.createElement("span",null,d.name)),e.createElement("p",{className:"copyright-item"},e.createElement("span",null,"Permalink:"),e.createElement("span",null,e.createElement("a",{href:m+o.fields.slug}," ",m+o.fields.slug," "))),e.createElement("p",{className:"copyright-item"},e.createElement("span",null,"License: "),e.createElement("span",null,e.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),e.createElement("section",{className:"post-tags"},e.createElement("div",null,e.createElement("span",null,"Tag(s):"),e.createElement("span",{className:"tag"},0!==o.frontmatter.tags.length&&o.frontmatter.tags.map((n=>e.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),e.createElement("div",null,e.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),e.createElement("span",null," · "),e.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),e.createElement("section",{className:"post-nav"},h?e.createElement("a",{className:"prev",rel:"prev",href:h.fields.slug},h.frontmatter.title):e.createElement("span",{className:"prev"},"No More"),E?e.createElement("a",{className:"next",rel:"next",href:E.fields.slug},E.frontmatter.title):e.createElement("span",{className:"next"},"No More")),e.createElement(r.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${f?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),o.frontmatter.toc&&e.createElement(u.A,null))))};function g(n){return e.createElement(k,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-给新手看的-react-hooks教程-md-977211b5c01ae48cb4ff.js.map