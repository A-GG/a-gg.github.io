{"version":3,"file":"component---src-templates-blog-post-tsx-content-file-path-content-blog-github-actions入门-md-9a9f1cfadb9a25d021b0.js","mappings":"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","sources":["webpack://w1zd-lair/./content/blog/GithubActions入门.md","webpack://w1zd-lair/./src/templates/blog-post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    span: \"span\",\n    h2: \"h2\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-12-ff8131d6e5212fdddaddb1f20be4e03e-github-actions-fd25c1.png\",\n    alt: \"github-actions\"\n  }), \"\\n\", React.createElement(_components.p, null, \"这个博客站是我自己用 Gatsby 随便拼凑了一下造出来的，前几天发现好久都没有更新博客了，心里还是很愧疚的 🤣，那就更新一篇吧。\"), \"\\n\", React.createElement(_components.p, null, \"之前用 Gatsby 写博客要么是在 OS 系统下，要么是在 Linux 系统下，从来没用过 Windows。但是由于工作环境的变化，手头只有 Windows 可用，讲道理这种纯前端该没什么平台限制，但是在我一通 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">npm</code>\"\n    }\n  }), \" 命令之后，博客并没有按照我的预期正常跑起来，这里不对这个问题做深究（Windows 文件路径大小写不敏感，而且盘符根目录都是大写字母 C D E，会导致 Gatsby 脚手架部分功能异常）。\"), \"\\n\", React.createElement(_components.p, null, \"经过一番努力之后，终于正常跑起来了，但是由于使用的 Windows 系统配置特别差，CPU 动不动就要飙到 100%，Gatsby 最终生成静态站点的过程及其痛苦。\"), \"\\n\", React.createElement(_components.p, null, \"由于所在网络环境的问题，最终将生成的静态内容推送到 Github Pages 服务的过程也是很糟心 😢。\"), \"\\n\", React.createElement(_components.p, null, \"遂决定，使用 Github Actions 自动打包自动部署。趁有空花了一下午时间，把 Github Lab 中的 Github actions 的内容都过了一遍，这里就做个简单的记录。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"github-actions-简介\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#github-actions-%E7%AE%80%E4%BB%8B\",\n    \"aria-label\": \"github actions 简介 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Github Actions 简介\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Github Actions 可以粗略的理解为集成在 Github 中的 CI/CD 服务， 和 Jenkins、Travis CI 等类似。\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-29-98b9955a8eb015e58811a8ac81a195d3-cicd-749ce1.png\",\n    alt: \"ci/cd\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Github Actions 目前可以用来做以下这些事情：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"自动化测试（持续集成）\"), \"\\n\", React.createElement(_components.li, null, \"持续交付和部署\"), \"\\n\", React.createElement(_components.li, null, \"触发 Code Review\"), \"\\n\", React.createElement(_components.li, null, \"管理分支\"), \"\\n\", React.createElement(_components.li, null, \"分类 Issue 和 PR\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"简单的来说，就是之前我们需要在本地电脑上进行的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">npm run build</code>\"\n    }\n  }), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">npm run test</code>\"\n    }\n  }), \"，都可以通过使用 Github Actions 在云平台中进行，而且在打包和测试完成之后，还能自动帮你进行部署。\"), \"\\n\", React.createElement(_components.p, null, \"这就意味着，我们不需要自己购买以及配置相关的构建服务器，Github 提供了免费云环境供大家使用。而且，由于是和 Github 集成的，所有的工作流都可以设置 Github 相关事件触发（push, issues, label, pull request 等等）。\"), \"\\n\", React.createElement(_components.p, null, \"在 Gihub 中有一个 \", React.createElement(_components.a, {\n    href: \"https://github.com/marketplace?type=actions\"\n  }, \"Action 市场\"), \"，还有别人整理的一个 \", React.createElement(_components.a, {\n    href: \"https://github.com/sdras/awesome-actions\"\n  }, \"Awesome Acitons\"), \"，里面有很多别人已经写好的 Action，可以直接拿过来用，不要太爽。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"快速入门\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\",\n    \"aria-label\": \"快速入门 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"快速入门\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"准备工作\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\",\n    \"aria-label\": \"准备工作 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"准备工作\"), \"\\n\", React.createElement(_components.p, null, \"你需要一个 Github 仓库，新建一个仓库，或者使用一个已有的仓库都可以。\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"创建你的第一个-workflow-文件\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA-workflow-%E6%96%87%E4%BB%B6\",\n    \"aria-label\": \"创建你的第一个 workflow 文件 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"创建你的第一个 workflow 文件\"), \"\\n\", React.createElement(_components.p, null, \"在你的本地仓库根目录创建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.github/workflows</code>\"\n    }\n  }), \" 文件夹，使用 Windows 操作系统的同学自行创建，Linux 操作系统的同学可以使用下面的命令。（当然你也可以不使用本地仓库，直接在 Github 网页中进行创建文件的操作）\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">mkdir</span> -p .github/workflows\\n<span class=\\\"token builtin class-name\\\">cd</span> .github/workflows</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"创建文件 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">your-first-workflow.yml</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">touch</span> your-first-workflow.yml</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"将下面的内容复制到你的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">your-first-workflow.yml</code>\"\n    }\n  }), \" 文件中，并保存。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> GitHub Actions Demo\\n<span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>push<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">Explore-GitHub-Actions</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> echo \\\"🎉 你的工作流被 $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> github.event_name <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> 事件自动触发了.\\\"\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> echo \\\"🐧 本工作流运行在 Github 托管的 $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> runner.os <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> 服务器上<span class=\\\"token tag\\\">!</span>\\\"\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> echo \\\"🔎 你的分支名是 $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> github.ref <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>，你的 github 仓库是 $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> github.repository <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>.\\\"\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Check out repository code\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/checkout@v2\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> echo \\\"💡 仓库 $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> github.repository <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> 已经被克隆到 ubuntu 了\\\"\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> echo \\\"🖥️ 工作流已经准备好在 ubuntu 上对你的代码进行测试了\\\"\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> List files in the repository\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">|</span><span class=\\\"token scalar string\\\">\\n          ls ${{ github.workspace }}</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> echo \\\"🍏 当前工作流的状态是 $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> job.status <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>.\\\"</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"将当前改动推送到你的 Github 仓库中。（如果你是 Github 页面直接新建文件操作的直接跳过）\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">git</span> <span class=\\\"token function\\\">add</span> <span class=\\\"token builtin class-name\\\">.</span>\\n<span class=\\\"token function\\\">git</span> push -u 你的仓库地址 master</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"然后打开 Github 中的 Actions 页面，你会发现你的工作流已经在运行了。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"github-actions-基本概念\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#github-actions-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\",\n    \"aria-label\": \"github actions 基本概念 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Github Actions 基本概念\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"workflow(工作流)：每个 workflow 文件就代表一个工作流，会在特定的条件下触发。\"), \"\\n\", React.createElement(_components.li, null, \"jobs(工作)：一个工作流中可以包含很多工作，字面意思很好理解（乔布斯哈哈哈）\"), \"\\n\", React.createElement(_components.li, null, \"steps(步骤)：每个工作可以有很多步骤组成\"), \"\\n\", React.createElement(_components.li, null, \"action(行为)：每个步骤中可以执行一个或多个行为（或者叫命令更好？实在不知道怎么翻译更好 😅）\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"workflow-文件详解\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#workflow-%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3\",\n    \"aria-label\": \"workflow 文件详解 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"workflow 文件详解\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"name\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#name\",\n    \"aria-label\": \"name permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"name\"), \"\\n\", React.createElement(_components.p, null, \"工作流的名称，会展示在你的 Gihub Actions 页面中， 如果你不给名字，默认会使用你的文件路径\"), \"\\n\", React.createElement(_components.p, null, \"比如快速入门中，我们的工作流名称就是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GitHub Actions Demo</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> GitHub Actions Demo</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"on\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#on\",\n    \"aria-label\": \"on permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"on\"), \"\\n\", React.createElement(_components.p, null, \"触发你工作流的 Gihub 事件名称，可以是单个事件，也可以是个事件数组。\\n\", React.createElement(_components.a, {\n    href: \"https://docs.github.com/en/actions/reference/events-that-trigger-workflows\"\n  }, \"能触发工作的流的事件看这里\")), \"\\n\", React.createElement(_components.p, null, \"快速入门中，我们的设置的触发事件是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">push</code>\"\n    }\n  }), \"，那就意味着，当我们向 Github 仓库中推送内容的时候，就会自动触发我们的工作流。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>push<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\"># 你也可以用如下的形式</span>\\n<span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span> push</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们也可以设置在指定的分支上 push 时才触发\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">push</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">branches</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> master</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们还可以设置让工作流定时执行，这就很强了！比如你写个爬虫，定时去跑，当然这属于薅羊毛操作，之前好像有不少人因为不明原因被取消了使用资格。正常情况下不会有这样的事情，官方的限制可以看看\", React.createElement(_components.a, {\n    href: \"https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration\"\n  }, \"这里\"), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">schedule</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">cron</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"*/30 5,17 * * *\\\"</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的定时计划是，在每天的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5:30</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">17:30</code>\"\n    }\n  }), \" 自动执行，这里使用的时间计划是\", React.createElement(_components.a, {\n    href: \"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07\"\n  }, \"POSIX cron syntax\"), \"，感兴趣的同学自行了解。\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"jobs\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#jobs\",\n    \"aria-label\": \"jobs permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"jobs\"), \"\\n\", React.createElement(_components.p, null, \"上面关于工作流整体的配置基本 ok 了，那么接下来就是具体的工作流里面要做的事情了。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">jobs</code>\"\n    }\n  }), \" 就是用来设置当前工作流中具体的工作内容的。\"), \"\\n\", React.createElement(_components.p, null, \"每个工作需要有自己的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">id</code>\"\n    }\n  }), \"，同时还需要一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">name</code>\"\n    }\n  }), \":\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\"># 这里 job1 就是 id</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1 <span class=\\\"token comment\\\"># 这里是 job 的 name</span>\\n  <span class=\\\"token key atrule\\\">job2</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> My second job</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"当有多项工作的时候，避免不了的会出现工作项之间的依赖关系，比如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job2</code>\"\n    }\n  }), \" 要在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job1</code>\"\n    }\n  }), \" 完成之后才能执行，那我们就需要为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job2</code>\"\n    }\n  }), \" 设置 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">needs</code>\"\n    }\n  }), \" 选项：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\"># 这里 job1 就是 id</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1 <span class=\\\"token comment\\\"># 这里是 job 的 name</span>\\n  <span class=\\\"token key atrule\\\">job2</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> My second job\\n    <span class=\\\"token key atrule\\\">needs</span><span class=\\\"token punctuation\\\">:</span> job1 <span class=\\\"token comment\\\"># 注意这里使用的是 id，不是 name</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在执行构建任务或者测试任务时，需要指定对应的执行环境，也就是对应的操作系统，我们可以通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">runs-on</code>\"\n    }\n  }), \" 来指定当前 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">jobs</code>\"\n    }\n  }), \" 需要执行的环境。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"目前 Github 能提供的环境如下：\"), \"\\n\", React.createElement(_components.p, null, \"| Virtual environment  | YAML workflow label            |\\n| -------------------- | ------------------------------ |\\n| Windows Server 2019  | windows-latest or windows-2019 |\\n| Ubuntu 20.04         | ubuntu-latest or ubuntu-20.04  |\\n| Ubuntu 18.04         | ubuntu-18.04                   |\\n| Ubuntu 16.04         | ubuntu-16.04                   |\\n| macOS Big Sur 11.0   | macos-11.0                     |\\n| macOS Catalina 10.15 | macos-latest or macos-10.15    |\"), \"\\n\", React.createElement(_components.p, null, \"有的时候需要在不同环境下测试一套代码，有同学可能会想，那我是不是要来多个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job</code>\"\n    }\n  }), \" 来在不同的环境中进行操作。其实不需要，Github Action 帮我们解决了这个问题，使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">strategy</code>\"\n    }\n  }), \"，就可以让当前 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job</code>\"\n    }\n  }), \" 在不同环境中运行。\"), \"\\n\", React.createElement(_components.p, null, \"下面的配置就可以让我们在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">unbuntu-latest</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">windows-2016</code>\"\n    }\n  }), \" 中分别执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job1</code>\"\n    }\n  }), \"，而且！而且！而且！会分别在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">node 12.x</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">node 14.x</code>\"\n    }\n  }), \" 的版本中执行。 也就是我们的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job1</code>\"\n    }\n  }), \" 最终会执行 4 次哦！\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">strategy</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">matrix</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token key atrule\\\">os</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ubuntu<span class=\\\"token punctuation\\\">-</span>latest<span class=\\\"token punctuation\\\">,</span> windows<span class=\\\"token punctuation\\\">-</span><span class=\\\"token number\\\">2016</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>12.x<span class=\\\"token punctuation\\\">,</span> 14.x<span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"steps\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"steps\"), \"\\n\", React.createElement(_components.p, null, \"每个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">job</code>\"\n    }\n  }), \" 中需要进行的操作，我们需要使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">steps</code>\"\n    }\n  }), \" 来定义。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">step</code>\"\n    }\n  }), \" 中也有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">name</code>\"\n    }\n  }), \" 来定义每一步的名称，用来声明这一步在做什么。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">strategy</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">matrix</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token key atrule\\\">os</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ubuntu<span class=\\\"token punctuation\\\">-</span>latest<span class=\\\"token punctuation\\\">,</span> windows<span class=\\\"token punctuation\\\">-</span><span class=\\\"token number\\\">2016</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>12.x<span class=\\\"token punctuation\\\">,</span> 14.x<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Print a greeting</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">step</code>\"\n    }\n  }), \" 中最关键的是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">run</code>\"\n    }\n  }), \"，用来执行具体的命令。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">strategy</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">matrix</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token key atrule\\\">os</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ubuntu<span class=\\\"token punctuation\\\">-</span>latest<span class=\\\"token punctuation\\\">,</span> windows<span class=\\\"token punctuation\\\">-</span><span class=\\\"token number\\\">2016</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>12.x<span class=\\\"token punctuation\\\">,</span> 14.x<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Print a greeting\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">|</span><span class=\\\"token scalar string\\\">\\n          echo Hello World.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">step</code>\"\n    }\n  }), \" 中还可以添加环境变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">env</code>\"\n    }\n  }), \"，这样在执行的命令中可以使用这些环境变量，就像下面这样。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">strategy</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">matrix</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token key atrule\\\">os</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ubuntu<span class=\\\"token punctuation\\\">-</span>latest<span class=\\\"token punctuation\\\">,</span> windows<span class=\\\"token punctuation\\\">-</span><span class=\\\"token number\\\">2016</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>12.x<span class=\\\"token punctuation\\\">,</span> 14.x<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Print a greeting\\n        <span class=\\\"token key atrule\\\">env</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">MY_VAR</span><span class=\\\"token punctuation\\\">:</span> Hi there<span class=\\\"token tag\\\">!</span> My name is\\n          <span class=\\\"token key atrule\\\">FIRST_NAME</span><span class=\\\"token punctuation\\\">:</span> Mona\\n          <span class=\\\"token key atrule\\\">MIDDLE_NAME</span><span class=\\\"token punctuation\\\">:</span> The\\n          <span class=\\\"token key atrule\\\">LAST_NAME</span><span class=\\\"token punctuation\\\">:</span> Octocat\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">|</span><span class=\\\"token scalar string\\\">\\n          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"除了执行指定的命令外，我们也可以使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">uses</code>\"\n    }\n  }), \" 在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">step</code>\"\n    }\n  }), \" 中调用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">action</code>\"\n    }\n  }), \"（\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">aciton</code>\"\n    }\n  }), \"可以自己写，也可以去市场找）。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">job1</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> This is the job1\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">strategy</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">matrix</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token key atrule\\\">os</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ubuntu<span class=\\\"token punctuation\\\">-</span>latest<span class=\\\"token punctuation\\\">,</span> windows<span class=\\\"token punctuation\\\">-</span><span class=\\\"token number\\\">2016</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>12.x<span class=\\\"token punctuation\\\">,</span> 14.x<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/checkout@v2 <span class=\\\"token comment\\\"># 这里就是使用市场中提供的 action 将当前的仓库代码检出到虚拟机</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Use Node.js $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> matrix.node<span class=\\\"token punctuation\\\">-</span>version <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> ./.github/actions/setup<span class=\\\"token punctuation\\\">-</span>node <span class=\\\"token comment\\\"># 这里是使用自己写的 action 安装 node 环境（实际不存在，只是给大家演示写法，实际使用的还是市场提供的 actions/setup-node@v1）</span>\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\"># with 为这个 action 提供相应的参数</span>\\n          <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> matrix.node<span class=\\\"token punctuation\\\">-</span>version <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> npm install<span class=\\\"token punctuation\\\">,</span> and test\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">|</span><span class=\\\"token scalar string\\\">\\n          npm install\\n          npm test</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"使用-github-actions-发布-gatsby-到-github-pages\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E4%BD%BF%E7%94%A8-github-actions-%E5%8F%91%E5%B8%83-gatsby-%E5%88%B0-github-pages\",\n    \"aria-label\": \"使用 github actions 发布 gatsby 到 github pages permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"使用 Github Actions 发布 Gatsby 到 Github Pages\"), \"\\n\", React.createElement(_components.p, null, \"本来打算自己写一个发布的 action，结果发现已经有人已经造好了轮子，那我们就在巨人肩上玩玩吧。\"), \"\\n\", React.createElement(_components.p, null, \"下面是我完整的 workflow 文件。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Gatsby Publish\\n\\n<span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">push</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">branches</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> master <span class=\\\"token comment\\\"># master 分支是我得 Gatsby 代码</span>\\n\\n<span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">build</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/checkout@v1 <span class=\\\"token comment\\\"># 这里还是使用市场提供的 action 检出代码到虚拟机</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> enriikke/gatsby<span class=\\\"token punctuation\\\">-</span>gh<span class=\\\"token punctuation\\\">-</span>pages<span class=\\\"token punctuation\\\">-</span>action@v2 <span class=\\\"token comment\\\"># 这里就是巨人造好得轮子，可以构建 Gatsby 静态页面，并且发布到 Github Pages</span>\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">access-token</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> secrets.ACCESS_TOKEN <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\"># 我们需要提供相应的参数，这个 token 提供我会在下面讲到</span>\\n          <span class=\\\"token key atrule\\\">deploy-branch</span><span class=\\\"token punctuation\\\">:</span> page <span class=\\\"token comment\\\"># 这里是指定提供 Github Pages 的分支，最终构件好的静态页面就会发布到这个分支</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"整个 workflow 运行流程如下：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"本地写好文章后，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">push</code>\"\n    }\n  }), \" 到 github\"), \"\\n\", React.createElement(_components.li, null, \"由于 workflow 中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">on: push</code>\"\n    }\n  }), \" 的存在，会自动触发该工作流\"), \"\\n\", React.createElement(_components.li, null, \"当前 workflow 只有一个job，在虚拟机环境 ubuntu-latest 中\"), \"\\n\", React.createElement(_components.li, null, \"第一步使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">actions/checkout</code>\"\n    }\n  }), \" 获取源码\"), \"\\n\", React.createElement(_components.li, null, \"第二步使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">enriikke/gatsby-gh-pages-action@v2</code>\"\n    }\n  }), \" 构建静态站点并进行部署\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"也就是在我们每次本地写好 Markdown 文章之后，推送到 Github，我们的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">workflow</code>\"\n    }\n  }), \" 就会自动帮我们生成静态页面，并且发布到 Github Pages。\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"-secretsaccess_token-\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#-secretsaccess_token-\",\n    \"aria-label\": \" secretsaccess_token  permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"${{ secrets.ACCESS_TOKEN }}\"), \"\\n\", React.createElement(_components.p, null, \"在上面的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">steps</code>\"\n    }\n  }), \" 第二步中，我们用到了一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">${{ secrets.ACCESS_TOKEN }}</code>\"\n    }\n  }), \"， 这是由于该 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">action</code>\"\n    }\n  }), \" 需要将构件好的静态页面 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">push</code>\"\n    }\n  }), \" 到我们的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">page</code>\"\n    }\n  }), \" 分支，所以需要 Github 的访问权限，我们需要\", React.createElement(_components.a, {\n    href: \"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\"\n  }, \"自己生成 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Access_Token</code>\"\n    }\n  })), \"，并在项目设置页面中提供。\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/w1zd/image-hosting/main/img/2022/05/10/13-43-36-677e12d2d7b9db2aaab9fb3070b7329d-access_token-aba4e5.png\",\n    alt: \"access_token\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"总结\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E6%80%BB%E7%BB%93\",\n    \"aria-label\": \"总结 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"总结\"), \"\\n\", React.createElement(_components.p, null, \"本文只是讲解了一些日常用法，关于 Github Actions 更深层次的学习，大家可以参考\", React.createElement(_components.a, {\n    href: \"https://docs.github.com/en/actions/learn-github-actions\"\n  }, \"官网文档\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"Github Actions 使得定制开发工作流如此简单，在 DevOps 方面还有很多的可能性，必然会是日后发展的趋势（当然我是说它这种模式，毕竟，它是要收钱的🤣 🤣 🤣）。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/w1zd.github.io/w1zd.github.io/content/blog/GithubActions入门.md\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport Layout from \"../components/layout\";\nimport TOC from \"../components/toc\";\nimport {useEffect} from \"react\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Giscus from \"@giscus/react\";\nimport mediumZoom from \"medium-zoom\";\nconst BlogPostTemplate = _ref => {\n  let {data, pageContext, children} = _ref;\n  const post = data.mdx;\n  const {title: siteTitle, postCopyright, author, siteUrl} = data.site.siteMetadata;\n  const {previous, next} = pageContext;\n  const isDarkmode = useSelector(state => state.isDarkMode);\n  useEffect(() => {\n    mediumZoom(\".post-content img\", {\n      background: \"#292a2d\"\n    });\n  }, []);\n  return React.createElement(Layout, {\n    isFocus: false,\n    title: post.frontmatter.title,\n    description: post.frontmatter.description\n  }, React.createElement(\"div\", {\n    className: \"container\"\n  }, React.createElement(\"article\", {\n    className: \"post-wrap\"\n  }, React.createElement(\"header\", {\n    className: \"post-header\"\n  }, React.createElement(\"h1\", {\n    className: \"post-title\"\n  }, post.frontmatter.title), React.createElement(\"div\", {\n    className: \"post-meta\"\n  }, React.createElement(\"span\", {\n    className: \"post-time\"\n  }, post.frontmatter.date), \"\\xA0\")), React.createElement(\"div\", {\n    className: \"post-content\"\n  }, React.createElement(MDXProvider, null, children)), postCopyright && React.createElement(\"section\", {\n    className: \"post-copyright\"\n  }, React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Author:\\xA0\"), React.createElement(\"span\", null, author.name)), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"Permalink:\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: siteUrl + post.fields.slug\n  }, \" \", siteUrl + post.fields.slug, \" \"))), React.createElement(\"p\", {\n    className: \"copyright-item\"\n  }, React.createElement(\"span\", null, \"License:\\xA0\"), React.createElement(\"span\", null, React.createElement(\"a\", {\n    href: \"http://creativecommons.org/licenses/by-nc/4.0/\"\n  }, \"CC-BY-NC-4.0\")))), React.createElement(\"section\", {\n    className: \"post-tags\"\n  }, React.createElement(\"div\", null, React.createElement(\"span\", null, \"Tag(s):\"), React.createElement(\"span\", {\n    className: \"tag\"\n  }, post.frontmatter.tags.length !== 0 && post.frontmatter.tags.map(item => {\n    return React.createElement(\"a\", {\n      key: item,\n      href: `/tag/${item}`\n    }, \"#\", item);\n  }))), React.createElement(\"div\", null, React.createElement(\"a\", {\n    href: \"#/\",\n    onClick: () => {\n      window.history.back();\n    }\n  }, \"back\"), React.createElement(\"span\", null, \" \\xB7 \"), React.createElement(\"a\", {\n    href: data.site.siteMetadata.siteUrl\n  }, \"home\"))), React.createElement(\"section\", {\n    className: \"post-nav\"\n  }, previous ? React.createElement(\"a\", {\n    className: \"prev\",\n    rel: \"prev\",\n    href: previous.fields.slug\n  }, previous.frontmatter.title) : React.createElement(\"span\", {\n    className: \"prev\"\n  }, \"No More\"), next ? React.createElement(\"a\", {\n    className: \"next\",\n    rel: \"next\",\n    href: next.fields.slug\n  }, next.frontmatter.title) : React.createElement(\"span\", {\n    className: \"next\"\n  }, \"No More\")), React.createElement(Giscus, {\n    id: \"comment\",\n    repo: \"w1zd/w1zd.github.io\",\n    repoId: \"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=\",\n    category: \"Announcements\",\n    categoryId: \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy\",\n    mapping: \"og:title\",\n    theme: `https://wizd.dev/giscus-themes/${isDarkmode ? \"dark\" : \"light\"}.css`,\n    reactionsEnabled: \"1\",\n    loading: \"lazy\"\n  }), post.frontmatter.toc && React.createElement(TOC, null))));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"60074105\";\n"],"names":["_createMdxContent","props","_components","Object","assign","img","p","span","h2","a","blockquote","ul","li","h3","ol","_provideComponents","components","React","src","alt","dangerouslySetInnerHTML","__html","id","style","position","href","className","wrapper","MDXLayout","BlogPostTemplate","_ref","data","pageContext","children","post","mdx","title","siteTitle","postCopyright","author","siteUrl","site","siteMetadata","previous","next","isDarkmode","useSelector","state","isDarkMode","useEffect","mediumZoom","background","Layout","isFocus","frontmatter","description","date","MDXProvider","name","fields","slug","tags","length","map","item","key","onClick","window","history","back","rel","Giscus","repo","repoId","category","categoryId","mapping","theme","reactionsEnabled","loading","toc","TOC","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}