"use strict";(self.webpackChunkw1zd_lair=self.webpackChunkw1zd_lair||[]).push([[875],{7996:function(n,a,s){s.r(a),s.d(a,{default:function(){return m}});var e=s(8453),t=s(6540);function p(n){const a=Object.assign({p:"p",span:"span",h2:"h2",a:"a",h3:"h3",blockquote:"blockquote",ul:"ul",li:"li"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"构造函数中调用的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this._init</code>'}})," 是在哪里定义的呢？正如我们所看到的，构造函数内部并未对这个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">._init</code>'}})," 方法进行定义。\n快速进行全局搜索源码可以发现 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">._init</code>'}})," 方法是在名为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">initMixin</code>'}})," 的函数中添加到 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue.prototype</code>'}})," 上的。"),"\n",t.createElement(a.h2,{id:"initmixin",style:{position:"relative"}},t.createElement(a.a,{href:"#initmixin","aria-label":"initmixin permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"initMixin"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this._init</code>'}})," 方法被定义在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">initMixin</code>'}})," 函数中。",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">initMixin</code>'}})," 函数在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue</code>'}})," 构造函数定义之后，和其他一组函数一起立即就被调用了，而且这一组函数调用全部接收了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue</code>'}})," 构造函数作为实参。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">Vue</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">\'Vue is a constructor and should be called with the `new` keyword\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">eventsMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"我们来看一下 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">initMixin</code>'}})," 函数的定义，特别简单，接收 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue</code>'}})," 构造函数作为形参，并且为构造函数原型添加了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_init</code>'}})," 方法。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"uid3",style:{position:"relative"}},t.createElement(a.a,{href:"#uid3","aria-label":"uid3 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">uid$3</code>'}})),"\n",t.createElement(a.p,null,"在顶级作用域中， ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">initMixin</code>'}})," 上面定义了一个变量 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">uid$3</code>'}}),"，这个变量被当做一个计数器，每当创建一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue</code>'}})," 实例的时候，都会自增，然后添加为当次创建的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue</code>'}})," 实例的属性。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// a uid</span>\n      vm<span class="token punctuation">.</span>_uid <span class="token operator">=</span> uid$3<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"vm-和-this",style:{position:"relative"}},t.createElement(a.a,{href:"#vm-%E5%92%8C-this","aria-label":"vm 和 this permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vm</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})),"\n",t.createElement(a.p,null,"在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_init</code>'}})," 方法内部设置了一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 的帮助变量。通常情况下，我们会将代表当前函数上下文对象的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 关键字保存在其他变量中，方便以后使用，比如 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">self = this</code>'}}),"。 这里的做法是类似的，将 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 保存在了一个名为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vm</code>'}})," 的变量中："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"性能相关",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%80%A7%E8%83%BD%E7%9B%B8%E5%85%B3","aria-label":"性能相关 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"性能相关"),"\n",t.createElement(a.p,null,"接下来，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">._init</code>'}}),"方法中，设置了性能检查相关的内容。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">var</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">;</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'production\'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      startTag <span class="token operator">=</span> <span class="token string">"vue-perf-start:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      endTag <span class="token operator">=</span> <span class="token string">"vue-perf-end:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里声明了两个变量 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">startTag</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">endTag</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">\n<span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token keyword">var</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">;</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"然后你可能会注意到这个奇怪的注释："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/* istanbul ignore if */</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"https://github.com/gotwarlost/istanbul"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Istanbul</code>'}}))," 其实是一个覆盖率测试工具，这里的注释是在告诉 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Istanbul</code>'}})," 忽略掉 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}})," 语句。"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}})," 语句首先检查的是当前环境是开发环境还是生产环境，然后判断 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">config.performence</code>'}})," 属性是否有设置为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),"。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'production\'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"config-对象",style:{position:"relative"}},t.createElement(a.a,{href:"#config-%E5%AF%B9%E8%B1%A1","aria-label":"config 对象 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">config</code>'}})," 对象"),"\n",t.createElement(a.p,null,"这里我们不得不去关注一下 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">config</code>'}})," 这个对象，这个对象声明在别的地方，并且默认的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">performance</code>'}})," 这个属性是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">false</code>'}}),"。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token comment">/**\n   * Whether to record perf\n   */</span>\n  <span class="token literal-property property">performance</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"就像注释标记的那样，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">config.performance</code>'}})," 这个属性用来决定 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue</code>'}})," 是否要记录性能。"),"\n",t.createElement(a.p,null,"我们继续回到 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_init</code>'}})," 方法里面来，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}})," 语句中接下来又检查了一个名为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 的变量。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'production\'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"mark-函数",style:{position:"relative"}},t.createElement(a.a,{href:"#mark-%E5%87%BD%E6%95%B0","aria-label":"mark 函数 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 函数"),"\n",t.createElement(a.p,null,"那我们又不得不去找找看 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 到底是在哪儿定义的。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> mark<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> measure<span class="token punctuation">;</span>\n\n  <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> perf <span class="token operator">=</span> inBrowser <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">;</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      perf <span class="token operator">&amp;&amp;</span>\n      perf<span class="token punctuation">.</span>mark <span class="token operator">&amp;&amp;</span>\n      perf<span class="token punctuation">.</span>measure <span class="token operator">&amp;&amp;</span>\n      perf<span class="token punctuation">.</span>clearMarks <span class="token operator">&amp;&amp;</span>\n      perf<span class="token punctuation">.</span>clearMeasures\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">mark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> perf<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token function-variable function">measure</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        perf<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        perf<span class="token punctuation">.</span><span class="token function">clearMarks</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        perf<span class="token punctuation">.</span><span class="token function">clearMarks</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// perf.clearMeasures(name)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"查看代码我们会发现，这个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}}),"变量，只会在特定的情况下被赋值。首先呢，他会检查，我们是否在浏览器环境中，然后检查 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">window.performance</code>'}})," 是否存在。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">  <span class="token comment">// Browser environment sniffing</span>\n  <span class="token keyword">var</span> inBrowser <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> perf <span class="token operator">=</span> inBrowser <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">;</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"要知道这里在干吗，我们需要去文档查看一下 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">window</code>'}})," 对象的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">performance</code>'}})," 属性。 MDN中说:"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"“",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">window</code>'}})," 对象的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">performance</code>'}})," 属性返回一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Performance</code>'}})," 对象，可用于收集当前文档的性能信息。 它作为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Performance Timeline API</code>'}}),"，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">High Resolution Time API</code>'}}),"，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Navigation Timing API</code>'}}),"，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">User Timing API</code>'}}),"和",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Resource Timing API</code>'}}),"的公开点。性能接口是",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">High Resolution Time API</code>'}}),"的一部分，可以通过它来访问当前页面性能相关信息。"),"\n"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">measure</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clearMarks</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clearMeasures</code>'}})," 都是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Performance</code>'}})," 对象上的方法。"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 方法用给定的名字在浏览器的性能输入缓冲区创建一个时间戳。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">measure</code>'}})," 方法在浏览器的性能输入缓冲区中两个指定标记(分别称为开始标记和结束标记)之间创建一个命名时间戳。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clearMarks</code>'}})," 方法用来移除浏览器的性能输入缓冲区中指定的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clearMeasures</code>'}})," 方法用来移除浏览器的性能输入缓冲区中指定的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">measure</code>'}})),"\n"),"\n"),"\n",t.createElement(a.p,null,"就像Vue ",t.createElement(a.a,{href:"https://vuejs.org/v2/api/#performance"},"API"),"中解释的那样，如果 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">performance</code>'}})," 选项被设置为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),"，将会在浏览器的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">devtool peformance/timeline</code>'}})," 面板中开启对组件初始化、编译、渲染以及组件更新的性能追踪。但是只能在",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">development</code>'}})," 模式下生效，并且受限于浏览器，只能在支持 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">performance.mark</code>'}})," 接口的浏览器中使用。"),"\n",t.createElement(a.p,null,"所以，我们继续回头看一下 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 变量的初始化代码："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> perf <span class="token operator">=</span> inBrowser <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">;</span>\n  <span class="token comment">/* istanbul ignore if */</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    perf <span class="token operator">&amp;&amp;</span>\n    perf<span class="token punctuation">.</span>mark <span class="token operator">&amp;&amp;</span>\n    perf<span class="token punctuation">.</span>measure <span class="token operator">&amp;&amp;</span>\n    perf<span class="token punctuation">.</span>clearMarks <span class="token operator">&amp;&amp;</span>\n    perf<span class="token punctuation">.</span>clearMeasures\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">mark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> perf<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token function-variable function">measure</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      perf<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      perf<span class="token punctuation">.</span><span class="token function">clearMarks</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      perf<span class="token punctuation">.</span><span class="token function">clearMarks</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      perf<span class="token punctuation">.</span><span class="token function">clearMeasures</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"如果 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">perf</code>'}})," 对象存在，并且当 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">perf</code>'}})," 对象中存在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}}),"、 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">measure</code>'}}),"、 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clearMarks</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clearMeasures</code>'}})," 方法，那么 Vue 就会设置好 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">measure</code>'}})," 函数。"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 函数接收一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tag</code>'}})," 作为形参，并且返回一个在浏览器性能入口缓存区中用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tag</code>'}})," 作为名字的时间戳。"),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 与 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">measure</code>'}})," 一起，就允许我们在浏览器 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">devtool perfomance/timeline</code>'}})," 面板中跟踪性能。"),"\n",t.createElement(a.h3,{id:"继续回到_init方法",style:{position:"relative"}},t.createElement(a.a,{href:"#%E7%BB%A7%E7%BB%AD%E5%9B%9E%E5%88%B0_init%E6%96%B9%E6%B3%95","aria-label":"继续回到_init方法 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"继续回到",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_init</code>'}}),"方法"),"\n",t.createElement(a.p,null,"现在我们知道了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 函数是用来做什么的，我们终于可以继续回到 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Vue.prototype._init</code>'}})," 方法中继续了解代码所做的事情。"),"\n",t.createElement(a.p,null,"下面的代码，检查了是否是开发环境，确认了性能配置选项是否被设置为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),", 还确认了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 函数是否存在。如果上述三个检查都通过了，Vue 会设置两个变量 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">startTag</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">endTag</code>'}}),", 然后使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">startTag</code>'}})," 作为形参调用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mark</code>'}})," 函数。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token comment">// a uid</span>\n    vm<span class="token punctuation">.</span>_uid <span class="token operator">=</span> uid$3<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">var</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">;</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'production\'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      startTag <span class="token operator">=</span> <span class="token string">"vue-perf-start:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      endTag <span class="token operator">=</span> <span class="token string">"vue-perf-end:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">[</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.RP)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},o=s(1468),l=s(7947),u=s(1327),r=s(2171),i=s(9739);const k=n=>{let{data:a,pageContext:s,children:p}=n;const c=a.mdx,{title:k,postCopyright:m,author:d,siteUrl:g}=a.site.siteMetadata,{previous:h,next:_}=s,E=(0,o.d4)((n=>n.isDarkMode));return(0,t.useEffect)((()=>{(0,i.A)(".post-content img",{background:"#292a2d"})}),[]),t.createElement(l.A,{isFocus:!1,title:c.frontmatter.title,description:c.frontmatter.description},t.createElement("div",{className:"container"},t.createElement("article",{className:"post-wrap"},t.createElement("header",{className:"post-header"},t.createElement("h1",{className:"post-title"},c.frontmatter.title),t.createElement("div",{className:"post-meta"},t.createElement("span",{className:"post-time"},c.frontmatter.date)," ")),t.createElement("div",{className:"post-content"},t.createElement(e.xA,null,p)),m&&t.createElement("section",{className:"post-copyright"},t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Author: "),t.createElement("span",null,d.name)),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"Permalink:"),t.createElement("span",null,t.createElement("a",{href:g+c.fields.slug}," ",g+c.fields.slug," "))),t.createElement("p",{className:"copyright-item"},t.createElement("span",null,"License: "),t.createElement("span",null,t.createElement("a",{href:"http://creativecommons.org/licenses/by-nc/4.0/"},"CC-BY-NC-4.0")))),t.createElement("section",{className:"post-tags"},t.createElement("div",null,t.createElement("span",null,"Tag(s):"),t.createElement("span",{className:"tag"},0!==c.frontmatter.tags.length&&c.frontmatter.tags.map((n=>t.createElement("a",{key:n,href:`/tag/${n}`},"#",n))))),t.createElement("div",null,t.createElement("a",{href:"#/",onClick:()=>{window.history.back()}},"back"),t.createElement("span",null," · "),t.createElement("a",{href:a.site.siteMetadata.siteUrl},"home"))),t.createElement("section",{className:"post-nav"},h?t.createElement("a",{className:"prev",rel:"prev",href:h.fields.slug},h.frontmatter.title):t.createElement("span",{className:"prev"},"No More"),_?t.createElement("a",{className:"next",rel:"next",href:_.fields.slug},_.frontmatter.title):t.createElement("span",{className:"next"},"No More")),t.createElement(r.A,{id:"comment",repo:"w1zd/w1zd.github.io",repoId:"MDEwOlJlcG9zaXRvcnkyODg3MTA5NjA=",category:"Announcements",categoryId:"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMzMDE1OTcy",mapping:"og:title",theme:`https://wizd.dev/giscus-themes/${E?"dark":"light"}.css`,reactionsEnabled:"1",loading:"lazy"}),c.frontmatter.toc&&t.createElement(u.A,null))))};function m(n){return t.createElement(k,n,t.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-深入了解-vue-js源码-2-init-mixin-md-625444b3c03174f2e979.js.map